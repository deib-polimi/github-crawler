-require 'chef/rest/rest_request'
BREAKS HERE
-  allow_downgrade trues
BREAKS HERE
-  source 'ohai_plugins/dovecot.rb.erb'
BREAKS HERE
-          :key_name,
-          read_namespace('secret_file') or
-          Chef::Config[:encrypted_data_bag_secret]
-          read_namespace('secret_file') or
-          Chef::Config[:encrypted_data_bag_secret]
-                Chef::Application.fatal!('Cannot read SSL key from content key value')
-          item[item_key]
-        rescue
-          item[item_key]
-        rescue
BREAKS HERE
-default['kibana']['config']['panel_names']   =  %w(histogram map pie table filtering timepicker text fields hits dashcontrol column derivequeries trends bettermap query terms)
BREAKS HERE
-  fail "node['push_jobs']['whitelist'] should have a hash value!"
-    fail "Please set both ['push_jobs']['package_url'] and ['push_jobs']['package_checksum'] attributes."
-  fail 'This cookbook currently supports only Windows, Debian-family Linux, and RHEL-family Linux.'
BREAKS HERE
-require 'cheffish/base_resource'
-require 'chef_zero'
-        require 'berkshelf'
-        berksfile Berkshelf::Berksfile.new('/tmp/Berksfile')
-            if ::File.directory?(::File.join(path, name)) && name != '.' && name != '..'
-          file = Tempfile.new('privatekey')
-              :client_name => new_resource.chef_server[:options][:client_name] || 'me',
BREAKS HERE
-      context "when given a value for :shims pointing to a valid path", focus: true do
-
-          shims_path.join(cached_one.cookbook_name).should exist
-          shims_path.join(cached_two.cookbook_name).should exist
BREAKS HERE
-  chef_gem 'mysql'
BREAKS HERE
-        path = if (!(defined?(Chef::Util::PathHelper.cleanpath).nil?))
-                 Chef::Util::PathHelper.cleanpath(path)
-               else
BREAKS HERE
-default['openresty']['pcre']['url']      = "http://downloads.sourceforge.net/project/pcre/pcre/#{node['openresty']['pcre']['version']}/pcre-#{node['openresty']['pcre']['version']}.tar.bz2/download"
BREAKS HERE
-    let(:options)    { { :exclude => Berkshelf::Berksfile::EXCLUDED_VCS_FILES_WHEN_VENDORING, delete: nil } }
-    it 'includes the top-level metadata.rb file' do
-      expect(options[:exclude].any? { |exclude| File.fnmatch?(exclude, 'my_cookbook/metadata.rb', File::FNM_DOTMATCH) }).to be(false)
BREAKS HERE
-        instance_id = open('http://169.254.169.254/latest/meta-data/instance-id', options = { proxy: false }) { |f| f.gets }
-        availability_zone = open('http://169.254.169.254/latest/meta-data/placement/availability-zone/', options = { proxy: false }) { |f| f.gets }
-        eni_id = open("http://169.254.169.254/latest/meta-data/network/interfaces/macs/#{mac}/interface-id", options = { proxy: false }) { |f| f.gets }
BREAKS HERE
-          @log_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log'), run_context)
-              d.recursive(true)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-region = node['openstack']['identity']['region']
-
-execute 'bootstrap_keystone' do
-  command "keystone-manage bootstrap \\
-          --bootstrap-password #{admin_pass} \\
-          --bootstrap-username #{admin_user} \\
-          --bootstrap-project-name #{admin_project} \\
-          --bootstrap-role-name #{admin_role} \\
-          --bootstrap-service-name keystone \\
-          --bootstrap-region-id #{region} \\
-          --bootstrap-admin-url #{identity_admin_endpoint} \\
-          --bootstrap-public-url #{identity_public_endpoint} \\
-          --bootstrap-internal-url #{identity_internal_endpoint}"
-end
BREAKS HERE
-  file node['openstack']['block-storage']['san']['san_private_key'] do
-    mode '0400'
-    owner node['openstack']['block-storage']['user']
-    group node['openstack']['block-storage']['group']
BREAKS HERE
-      @chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
BREAKS HERE
-      source = Source.new(options[:source])
BREAKS HERE
-          sts_client = ::Aws::STS::Client.new(credentials: creds, region: region)
BREAKS HERE
-chef_version     '>= 12.11' if respond_to?(:chef_version)
-
-depends          'compat_resource'
BREAKS HERE
-        cat > /tmp/#{mysql_name}/my.sql <<-EOSQL
-UPDATE mysql.user SET #{password_column_name}=PASSWORD('#{root_password}')#{password_expired} WHERE user = 'root';
-      Shellwords.escape(initial_root_password)
BREAKS HERE
-property :version, String, default: '6.3.0'
BREAKS HERE
-depends          'nginx', '~> 2.7'
BREAKS HERE
-
-
-  @current_resource.value new_resource.value  
-    
-  def path_value_equals?(value)    
-    hashed_settings = get_maven_settings_hash
-    
-    *path_elements, setting_to_update = new_resource.path.split(".")
-    path_elements.inject(hashed_settings, :fetch)[setting_to_update] == value
-  end
-  def get_maven_settings_hash
-     require 'nori'
-     Nori.new(:parser => :rexml).parse(::File.open("#{node['maven']['m2_home']}/conf/settings.xml", "r").read)  
-  end
-  def update_maven_settings
-    require 'gyoku'
-    
-    hashed_settings = get_maven_settings_hash    
-    *path_elements, setting_to_update = new_resource.path.split(".")
-    path_elements.inject(hashed_settings, :fetch)[setting_to_update] = new_resource.value
-    
-    # Convert back to xml
-    xmlized_updated_settings = Gyoku.xml(hashed_settings)
-    # Empty tags end up with attribute xsi:nil="true", let's clean that up
-    xmlized_updated_settings.gsub!(/xsi:nil="true"/, '')
-    ::File.open("#{node['maven']['m2_home']}/conf/settings.xml", "w+").write(xmlized_updated_settings)    
-  end
BREAKS HERE
-    UUID_REGEX = /[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89aAbB][a-f0-9]{3}-[a-f0-9]{12}/.freeze unless defined?(UUID_REGEX)
BREAKS HERE
-        :cpuvendor => cpuVendor
BREAKS HERE
-        notifying_block dodirectory config_directory do
BREAKS HERE
-web_app "000-default" do
-  enable false
-end
-
BREAKS HERE
-    "#{run_status_cookbook_detail(context)}#{run_status_message_detail(context)}"
-  def node_details(context)
-  def environment_details(context)
-  def run_status_cookbook_detail(context)
-  def run_status_message_detail(context)
BREAKS HERE
-            owners |= superusers
-        owners.uniq
BREAKS HERE
-                "#{new_resource.cookbook_version} " \
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-node.override['mariadb']['allow_root_pass_change'] = true
-node.override['mariadb']['server_root_password'] = super_password
-node.override['mariadb']['mysqld']['bind_address'] = listen_address
-node.override['mariadb']['install']['prefer_os_package'] = true
-  node.override['mariadb']['forbid_remote_root'] = false
-node.override['mariadb']['mysqld']['default_storage_engine'] = node['openstack']['mysql']['default-storage-engine']
-node.override['mariadb']['mysqld']['max_connections'] = node['openstack']['mysql']['max_connections']
-
-# Current mariadb cookbook does not handle deleting anonymous users and default
-# users. We need to delete them here.
-mysql_connection_info = {
-  host: 'localhost',
-  username: 'root',
-  password: super_password,
-}
-
-mysql_database 'drop empty and default users' do
-  database_name 'mysql'
-  sql "DELETE FROM mysql.user WHERE User = '' OR Password = ''"
-  connection mysql_connection_info
-  action :query
-end
-
-mysql_database 'test' do
-  connection mysql_connection_info
-  action :drop
-end
-
-mysql_database 'flush priviledges after cleanup' do
-  database_name 'mysql'
-  sql 'FLUSH PRIVILEGES'
-  connection mysql_connection_info
-  action :query
-end
BREAKS HERE
-      response = connection.get(self.resource_path).body
-      find!(object, version)
-    # @param [String, #chef_id] object
-    # @param [String] version
-    #
-    # @raise [Errors::HTTPNotFound]
-    #   if a resource with the given chef_id is not found
-    #
-    # @return [CookbookResource]
-    def find!(object, version)
-      chef_id = object.respond_to?(:chef_id) ? object.chef_id : object
-      new(connection.get("#{self.resource_path}/#{chef_id}/#{version}").body)
-    end
-
BREAKS HERE
-attribute :ssl, :kind_of => [Array, NilClass], :default => nil #Allow the creation of ssl cert files.
BREAKS HERE
-memcached = memcached_servers
BREAKS HERE
-default['cookbook-openshift3']['audit_config_enabled'] = false
BREAKS HERE
-default['cassandra']['metrics_reporter']['config'] = nil # should be a hash of relevant config
BREAKS HERE
-  brokerId = (node["kafka"]["brokers"].index{|broker| broker == node["fqdn"] || broker == node["ipaddress"] || broker == node["hostname"]} ) + 1
-    errors.push "Unable to find node in node[:kafka][:brokers] : #{node["kafka"]["brokers"]}"
BREAKS HERE
-    # Return the files within a cookbook tree that we are interested in trying
-    # to match rules against.
-                     "providers,recipes,resources}/*.rb,templates/*/*.erb}"
BREAKS HERE
-  runs_role = Proc.new { |host, role| host[:runlist].include? role }
-  runs_recipe = Proc.new { |host, recipe| host[:runlist].include? recipe }
-    node.default[:bcpc][:hadoop].dig(*service[:key]) =
-        runs_role.call(h, service[name][:role]) ||
-        runs_recipe.call(h, service[name][:recipe])
BREAKS HERE
-require 'chef/config'
-
-          @old_chef_server_url = Chef::Config.chef_server_url
-          @old_node_name = Chef::Config.node_name
-          @old_client_key = Chef::Config.client_key
-          Chef::Config.chef_server_url = ChefZero::RSpec.server.url
-          Chef::Config.node_name = 'admin'
-          Chef::Config.client_key = ChefZero::RSpec.client_key.path
-          Chef::Config.http_retry_count = 0
-        end
-
-        after :each do
-          Chef::Config.chef_server_url = @old_chef_server_url
-          Chef::Config.node_name = @old_node_name
-          Chef::Config.client_key = @old_client_key
BREAKS HERE
-  revision "v1.1.4"
BREAKS HERE
-      # lookup existing user resource
-      es_user = find_es_resource(run_context, :elasticsearch_user, new_resource)
-
-        path "#{new_resource.path_conf[es_install.type]}/elasticsearch.in.sh"
-        owner es_user.username
-        group es_user.groupname
-        variables(java_home: new_resource.java_home,
-                  es_home: es_user.homedir,
-                  es_config: new_resource.path_conf[es_install.type],
-                  allocated_memory: new_resource.allocated_memory,
-                  Xms: new_resource.allocated_memory,
-                  Xmx: new_resource.allocated_memory,
-                  Xss: new_resource.thread_stack_size,
-                  gc_settings: new_resource.gc_settings,
-                  env_options: new_resource.env_options)
BREAKS HERE
-    unscoped_name = name.split('/').last
BREAKS HERE
-# Implements per-object storage of cache control data for S3 objects resources
BREAKS HERE
-package "perl" do
-  action :upgrade
-if %w{redhat centos fedora scientific oracle amazon}.include?(node['platform'])
-  package "perl-CPAN" do
-    action :upgrade
-  end
-end
-
-libwww_perl = case node[:platform]
-  when "redhat","centos","fedora","scientific","oracle","amazon"
-    "perl-libwww-perl"
-  when "arch"
-    "perl-libwww"
-  when "debian","ubuntu","mint"
-    "libwww-perl"
-  end
-
-package libwww_perl do
-  action :upgrade
-end
-
-libperl_dev = case node[:platform]
-  when "redhat","centos","fedora","scientific","oracle","amazon"
-    "perl-devel"
-  when "ubuntu","debian","mint" 
-    "libperl-dev"
-  when "arch"
-    nil
-  end
-
-package libperl_dev do
-  action :upgrade
-end unless libperl_dev.nil?
-
-  path case node[:platform]
-    when "redhat","centos","scientific","oracle"
-      if node[:platform_version].to_f >= 6
-        "/usr/share/perl5/CPAN/Config.pm"
-      else
-        "/usr/lib/perl5/#{node[:languages][:perl][:version]}/CPAN/Config.pm"
-      end
-    when "amazon","fedora"
-      # FIXME: need platform_version tests for fedora and amazon
-      "/usr/share/perl5/CPAN/Config.pm"
-    when "arch"
-      "/usr/share/perl5/core_perl/CPAN/Config.pm"
-    when "debian","ubuntu","mint"
-      "/etc/perl/CPAN/Config.pm"
-    end
-  source "Config-#{node[:languages][:perl][:version]}.pm"
BREAKS HERE
-plugin_path. See 'Ohai Settings' at https://docs.chef.io/config_rb_client.html")
BREAKS HERE
-# These two attributes should only be set when connecting directly to Chef Compliance, otherwise they should be nil
-token = node['audit']['token']
-server = node['audit']['server']
-    quiet node['audit']['quiet']
-  quiet node['audit']['quiet']
BREAKS HERE
-        raise " A finish block already regitered" unless @finish.empty?
-          Chef::Log.debug "Resource #{resource_name} will converge"
-      Chef::Log.warn("Registering on #{event} for #{name}")
-          Chef::Log.warn "Will create a dynamic recipe for #{resource}"
-          Chef::Recipe.new(:choregraphie, "dynamic_resource_for_#{resource.to_s}_#{clean_name}", run_context).instance_eval do
-            Chef::Log.warn "Will create a dynamic recipe for #{resource}"
-            Chef::Recipe.new(:choregraphie, "dynamic_resource_for_#{resource.to_s}_#{clean_name}", run_context).instance_eval do
BREAKS HERE
-class ::Chef::Recipe # rubocop:disable Documentation
-rabbit_endpoint = endpoint 'mq'
-listen_address = rabbit_endpoint.host
-
-    node.override['rabbitmq']['port'] = rabbit_endpoint.port
-
-
-
-
-
-
-# TODO(wenchma) This could be removed once the issue is fixed in rabbitmq cookbook.
-# Issue: https://github.com/kennonkwok/rabbitmq/issues/153
-# Notifies rabbitmq-server service restart.
-r = resources(template: "#{node['rabbitmq']['config_root']}/rabbitmq-env.conf")
-r.notifies(:restart, "service[#{node['rabbitmq']['service_name']}]", :immediately)
-r = resources(template: "#{node['rabbitmq']['config_root']}/rabbitmq.config")
-r.notifies(:restart, "service[#{node['rabbitmq']['service_name']}]", :immediately)
BREAKS HERE
-    if new_resource.torrent =~ /^(https?:\/\/)(.*\/)(.*\.torrent)$/
-      r = remote_file cache_file_path do
-        source new_resource.torrent
-        backup false
-        mode '0755'
-      end
-    else
-      r = file cache_file_path do
-        content IO.read(new_resource.torrent)
-        backup false
-        mode '0755'
-      end
-    end
BREAKS HERE
-    "auth_uri" => auth_uri
BREAKS HERE
-      user node['openstack']['db'][service]['username']
BREAKS HERE
-include_recipe "sensu::_enterprise_repo.rb"
BREAKS HERE
-    expect(chef_run).to install_package(['libtool', 'autoconf', 'make', 'unzip', 'rsync', 'gcc', 'autogen'])
BREAKS HERE
-      @patch_names ||= case nt_version
BREAKS HERE
-    cmd =  "rabbitmqctl delete_vhost #{new_resource.vhost}"
BREAKS HERE
-    it "installs cinder api packages" do
BREAKS HERE
-    attribute :sandbox_id,
-      type: String
-      client.put("sandboxes/#{sandbox_id}", MultiJson.encode(is_completed: true)).body
BREAKS HERE
-property :sensitive,     [TrueClass, FalseClass], default: true
BREAKS HERE
-      def server_has_cookbook?(name, version)
-        !ridley.cookbook.find(name, version).nil?
BREAKS HERE
-  variables(:pidfile => "/var/run/activemq.pid")
BREAKS HERE
-
- 'passdb' => {
- },
- 'userdb' => {
-    'args'  => "username_format=%u #{node['dovecot']['conf']['password_file']}",
- }
-         'user' => 'dovecot'
BREAKS HERE
-unless Ohai::Config[:plugin_path].include?(node['ohai']['plugin_path'])
-  Ohai::Config[:plugin_path] = [node['ohai']['plugin_path'], Ohai::Config[:plugin_path]].flatten.compact
BREAKS HERE
-if (node[:bamboo][:graylog])
-  include_recipe "graylog"
BREAKS HERE
-default[:ruby][:patch] = 'p385'
BREAKS HERE
-      contains "cookbook 'minitest-handler'"
BREAKS HERE
-        when '2016' then 'https://download.microsoft.com/download/9/A/E/9AE09369-C53D-4FB7-985B-5CF0D547AE9F/SQLServer2016-SSEI-Expr.exe'
-        when '2016' then 'bdb84067de0187234673de73216818fcfd774501307e84b8cba327b948ef4ca6'
BREAKS HERE
-attribute :predefined_value, kind_of: [String], default: nil, callbacks: { 'should be a valid predefined value' => lambda { |spec| validate_predefined_value(spec) } }
-attribute :minute, kind_of: [Integer, String], default: '*', callbacks: { 'should be a valid minute spec' => lambda { |spec| validate_numeric(spec, 0, 59) } }
-attribute :hour, kind_of: [Integer, String], default: '*', callbacks: { 'should be a valid hour spec' => lambda { |spec| validate_numeric(spec, 0, 23) } }
-attribute :day, kind_of: [Integer, String], default: '*', callbacks: { 'should be a valid day spec' => lambda { |spec| validate_numeric(spec, 1, 31) } }
-attribute :month, kind_of: [Integer, String], default: '*', callbacks: { 'should be a valid month spec' => lambda { |spec| validate_month(spec) } }
-attribute :weekday, kind_of: [Integer, String], default: '*', callbacks: { 'should be a valid weekday spec' => lambda { |spec| validate_dow(spec) } }
BREAKS HERE
-    context "with cookbook #{name}" do
BREAKS HERE
-default['build-essential']['compile_time'] = true # ~FC019
BREAKS HERE
-version '1.12.0'
BREAKS HERE
-include_recipe"webpi::install-#{node['webpi']['install_method']}"
BREAKS HERE
-        if arg.nil? && @address.nil?
-          set_or_return(:address, @node_name, :kind_of => String, :required => true)
-        else
-          set_or_return(:address, arg, :kind_of => String, :required => true)
-        end
BREAKS HERE
-  cookbook node['kibana'][install_type]['config_cookbook']
-              elasticsearch: es_server
BREAKS HERE
-version          '3.0.0'
BREAKS HERE
-default['bcpc']['kibana']['user'] = "kibana"
-default['bcpc']['kibana']['group'] = "adm"
BREAKS HERE
-#
-#
-      #
-      #
BREAKS HERE
-  only_if  { node['activemq']['use_default_config'] }
BREAKS HERE
-action :create, :delete, :disable
-attribute :cookbook, :kind_of => String, :default => "nginx_conf" #Cookbook to find template
-attribute :block, :kind_of => [String, Array] # Include additional code
-attribute :listen, :kind_of => String, :default => node['nginx_conf']['listen']  # Listening port, ip, etc.
-attribute :locations, :kind_of => Hash, :default => {} # Locations to include.
-attribute :options, :kind_of => Hash, :default => {} # Key value pairs of options to include in the Server body.
-attribute :reload, :default => :delayed # How soon should we restart nginx.
-attribute :root, :kind_of => String # Server root
-attribute :server_name, :kind_of => String # Server name if different then the name attribute.
-attribute :socket, :kind_of => String # Path to socket file.
-attribute :template, :kind_of => String, :default => "conf.erb" # Template to use.
BREAKS HERE
-version '2.0.2'
BREAKS HERE
-# Copyright 2012
-node['apache']['listen_ports'] << node['jira']['apache2']['port'] unless node['apache']['listen_ports'].include?(node['jira']['apache2']['port'])
-node['apache']['listen_ports'] << node['jira']['apache2']['ssl']['port'] unless node['apache']['listen_ports'].include?(node['jira']['apache2']['ssl']['port'])
-
-node['apache']['default_site_enabled'] = false if node['jira']['apache2']['virtual_host_alias'] == node['fqdn']
BREAKS HERE
-    Solve.engine = :gecode
BREAKS HERE
-depends 'openstack-common', '>= 11.0.0'
BREAKS HERE
-version '11.0.0'
BREAKS HERE
-Chef::Log.info("Chef Handlers will be located at: #{node['chef_handler']['handler_path']}")
BREAKS HERE
-    [file_match(filename)] unless (declared_dependencies(ast) & %w(build-essential dmg chef_handler chef_hostname mac_os_x swap sysctl)).empty?
BREAKS HERE
-        with_retries { container.kill(signal: 'SIGHUP') }
BREAKS HERE
-        new(client, client.get(fetch_uri).body)
-        client.put(url, manifest)
BREAKS HERE
-  :default => "test1"
BREAKS HERE
-    property :package_options, String, default: nil, desired_state: false
BREAKS HERE
-package 'logrotate'
BREAKS HERE
-  default['hadoop']['hadoop_env']['hadoop_opts'] += " -D#{distro}.version=%{_FULL_VERSION}"
-  default['hadoop']['mapred_env']['hadoop_opts'] += " -D#{distro}.version=%{_FULL_VERSION}"
BREAKS HERE
-When /^I check the cookbook with dot as the argument$/ do
-  cd "cookbooks/example"
-  run_lint(["."])
-end
-
-
-# use of "foodcritic ." and "./metadata.rb" in the FC054 rules seems to badly confuse expect_warning
-Then 'the FC054 warning should not be displayed against the ./metadata.rb file' do
-  expect_no_output('FC054')
-end
BREAKS HERE
-chef_version_for_provides "< 14.0" if defined?(:chef_version_for_provides)
BREAKS HERE
-property :limit_cpu, [Integer, String]
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
BREAKS HERE
-        ridley_options[:client_name] = Berkshelf.config.chef.node_name
-        ridley_options[:client_key]  = Berkshelf.config.chef.client_key
BREAKS HERE
-        .with_content('unicorn_rails --env #\{DEPLOY_ENV\} --daemonize -c #\{ROOT_PATH\}/shared/config/unicorn.conf')
-        .with_content('puma -C #\{ROOT_PATH\}/shared/config/puma.rb')
-        .with_content('thin -C #\{ROOT_PATH\}/shared/config/thin.yml')
BREAKS HERE
-      node_hash['disks'] = node['filesystem'].map { |d,o| d if d.to_s =~ /^\/dev/ && o['fs_type'] != 'swap' }.compact
BREAKS HERE
-# Fixed to check platform_family versus platform
-#    'redhat', 'fedora', 'centos' are platforms;
-#    'rhel' is the platform_family that includes those platforms
-source = 'etc_main.cf_rhel.erb' if node['platform_family'] == 'rhel'
-# Fixed to check platform_family versus platform
-#    'debian', 'ubuntu', 'linuxmint' are platforms;
-#    'debian' is the platform_family that includes those platforms
-source = 'etc_main.cf_ubuntu.erb' if node['platform_family'] == 'debian'
BREAKS HERE
-  retries 3
-  retry_delay 3
BREAKS HERE
-          if current_version < desired_version
BREAKS HERE
-      comand cmd
BREAKS HERE
-      @sandbox_resource = SandboxResource.new_link(connection_registry, client_name, client_key, options)
BREAKS HERE
-accumulator node['prometheus']['flags']['config.file'] do
-  filter        { |res| res.is_a? Chef::Resource::PrometheusJob }
-  target        template: node['prometheus']['flags']['config.file']
-  transform     { |jobs| jobs.sort_by(&:name) }
-  variable_name :jobs
-  notifies      :restart, 'service[prometheus]'
-
-  not_if { node['prometheus']['allow_external_config'] && File.exist?(node['prometheus']['flags']['config.file']) }
-end
-
-include_recipe "prometheus::#{node['prometheus']['install_method']}"
BREAKS HERE
-require 'cucumber/core/gherkin/tag_expression'
-      @rules.sort { |a,b| a.code <=> b.code }.
-      end.map { |w|"#{w.first}:#{w[1]}" }.uniq.join("\n")
-      ['any'] + @tags
BREAKS HERE
-default[:opsworks_nodejs][:version] = '0.8.19'
BREAKS HERE
-# Copyright:: 2011-2016, Chef Software, Inc.
-      def initialize(name, run_context = nil)
-        super
-        runit_node = runit_attributes_from_node(run_context)
-        @resource_name = :runit_service
-        @provider = Chef::Provider::RunitService
-        @supports = { restart: true, reload: true, status: true }
-        @action = :enable
-        @allowed_actions = [:nothing, :start, :stop, :enable, :disable, :restart, :reload, :status, :once, :hup, :cont, :term, :kill, :up, :down, :usr1, :usr2, :create]
-        # sv_bin, sv_dir, service_dir and lsb_init_dir may have been set in the
-        # node attributes
-        @sv_bin = runit_node[:sv_bin] || '/usr/bin/sv'
-        @sv_dir = runit_node[:sv_dir] || '/etc/sv'
-        @service_dir = runit_node[:service_dir] || '/etc/service'
-        @lsb_init_dir = runit_node[:lsb_init_dir] || '/etc/init.d'
-        @control = []
-        @options = {}
-        @env = {}
-        @log = true
-        @cookbook = nil
-        @check = false
-        @start_down = false
-        @delete_downfile = false
-        @finish = false
-        @supervisor_owner = nil
-        @supervisor_group = nil
-        @owner = nil
-        @group = nil
-        @enabled = false
-        @running = false
-        @default_logger = false
-        @restart_on_update = true
-        @run_template_name = @service_name
-        @log_template_name = @service_name
-        @check_script_template_name = @service_name
-        @finish_script_template_name = @service_name
-        @control_template_names = {}
-        @status_command = "#{@sv_bin} status #{@service_dir}"
-        @sv_templates = true
-        @sv_timeout = nil
-        @sv_verbose = false
-        @log_dir = ::File.join('/var/log/', @service_name)
-        @log_flags = '-tt'
-        @log_size = nil
-        @log_num = nil
-        @log_min = nil
-        @log_timeout = nil
-        @log_processor = nil
-        @log_socket = nil
-        @log_prefix = nil
-        @log_config_append = nil
-          service_dir_name = ::File.join(@service_dir, @name)
-          @service_mirror.supports(@supports)
-          @service_mirror.start_command("#{@sv_bin} start #{service_dir_name}")
-          @service_mirror.stop_command("#{@sv_bin} stop #{service_dir_name}")
-          @service_mirror.restart_command("#{@sv_bin} restart #{service_dir_name}")
-          @service_mirror.status_command("#{@sv_bin} status #{service_dir_name}")
-      def sv_bin(arg = nil)
-        set_or_return(:sv_bin, arg, kind_of: [String])
-      end
-
-      def sv_dir(arg = nil)
-        set_or_return(:sv_dir, arg, kind_of: [String, FalseClass])
-      end
-
-      def sv_timeout(arg = nil)
-        set_or_return(:sv_timeout, arg, kind_of: [Integer])
-      end
-
-      def sv_verbose(arg = nil)
-        set_or_return(:sv_verbose, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def service_dir(arg = nil)
-        set_or_return(:service_dir, arg, kind_of: [String])
-      end
-
-      def lsb_init_dir(arg = nil)
-        set_or_return(:lsb_init_dir, arg, kind_of: [String])
-      end
-
-      def control(arg = nil)
-        set_or_return(:control, arg, kind_of: [Array])
-      end
-
-      def options(arg = nil)
-        default_opts = @env.empty? ? @options : @options.merge(env_dir: ::File.join(@sv_dir, @service_name, 'env'))
-
-        merged_opts = arg.respond_to?(:merge) ? default_opts.merge(arg) : default_opts
-
-        set_or_return(
-          :options,
-          merged_opts,
-          kind_of: [Hash],
-          default: default_opts
-        )
-      end
-
-      def env(arg = nil)
-        set_or_return(:env, arg, kind_of: [Hash])
-      end
-
-      ## set log to current instance value if nothing is passed.
-      def log(arg = @log)
-        set_or_return(:log, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def cookbook(arg = nil)
-        set_or_return(:cookbook, arg, kind_of: [String])
-      end
-
-      def finish(arg = nil)
-        set_or_return(:finish, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def check(arg = nil)
-        set_or_return(:check, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def start_down(arg = nil)
-        set_or_return(:start_down, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def delete_downfile(arg = nil)
-        set_or_return(:delete_downfile, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def supervisor_owner(arg = nil)
-        set_or_return(:supervisor_owner, arg, regex: [Chef::Config[:user_valid_regex]])
-      end
-
-      def supervisor_group(arg = nil)
-        set_or_return(:supervisor_group, arg, regex: [Chef::Config[:group_valid_regex]])
-      end
-
-      def owner(arg = nil)
-        set_or_return(:owner, arg, regex: [Chef::Config[:user_valid_regex]])
-      end
-
-      def group(arg = nil)
-        set_or_return(:group, arg, regex: [Chef::Config[:group_valid_regex]])
-      end
-
-      def default_logger(arg = nil)
-        set_or_return(:default_logger, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def restart_on_update(arg = nil)
-        set_or_return(:restart_on_update, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def run_template_name(arg = nil)
-        set_or_return(:run_template_name, arg, kind_of: [String])
-      end
-      alias template_name run_template_name
-
-      def log_template_name(arg = nil)
-        set_or_return(:log_template_name, arg, kind_of: [String])
-      end
-
-      def check_script_template_name(arg = nil)
-        set_or_return(:check_script_template_name, arg, kind_of: [String])
-      end
-
-      def finish_script_template_name(arg = nil)
-        set_or_return(:finish_script_template_name, arg, kind_of: [String])
-      end
-
-      def control_template_names(arg = nil)
-        set_or_return(
-          :control_template_names,
-          arg,
-          kind_of: [Hash],
-          default: set_control_template_names
-        )
-      end
-
-      def set_control_template_names
-        @control.each do |signal|
-          @control_template_names[signal] ||= @service_name
-        end
-        @control_template_names
-      end
-
-      def sv_templates(arg = nil)
-        set_or_return(:sv_templates, arg, kind_of: [TrueClass, FalseClass])
-      end
-
-      def log_dir(arg = nil)
-        set_or_return(:log_dir, arg, kind_of: [String])
-      end
-
-      def log_flags(arg = nil)
-        set_or_return(:log_flags, arg, kind_of: [String])
-      end
-
-      def log_size(arg = nil)
-        set_or_return(:log_size, arg, kind_of: [Integer])
-      end
-
-      def log_num(arg = nil)
-        set_or_return(:log_num, arg, kind_of: [Integer])
-      end
-
-      def log_min(arg = nil)
-        set_or_return(:log_min, arg, kind_of: [Integer])
-      end
-
-      def log_timeout(arg = nil)
-        set_or_return(:log_timeout, arg, kind_of: [Integer])
-      end
-
-      def log_processor(arg = nil)
-        set_or_return(:log_processor, arg, kind_of: [String])
-      end
-
-      def log_socket(arg = nil)
-        set_or_return(:log_socket, arg, kind_of: [String, Hash])
-      end
-
-      def log_prefix(arg = nil)
-        set_or_return(:log_prefix, arg, kind_of: [String])
-      end
-
-      def log_config_append(arg = nil)
-        set_or_return(:log_config_append, arg, kind_of: [String])
-      end
-
-      def runit_attributes_from_node(run_context)
-        if run_context && run_context.node && run_context.node['runit']
-          run_context.node['runit']
-        else
-          {}
-        end
-      end
BREAKS HERE
-version '2.5.0'
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
BREAKS HERE
-    self.gsub(/::/, '/').
-    gsub(/([A-Z]+)([A-Z][a-z])/,'\1_\2').
-    gsub(/([a-z\d])([A-Z])/,'\1_\2').
-    tr("-", "_").
-    downcase
-    self.gsub(/(^|_)(.)/) { |e| $2.upcase }
BREAKS HERE
-      return 'mysql' # not one of the above
BREAKS HERE
-  rescue_from ActionController::ParameterMissing do |e|
-    error(
-      error_code: t('api.error_codes.invalid_data'),
-      error_messages: [t("api.error_messages.missing_#{e.param}")]
-    )
-  end
-
BREAKS HERE
-  passenger-install-nginx-module --auto --prefix=/opt/nginx --auto-download --extra-configure-flags="#{node['passenger-nginx']['nginx']['extra_configure_flags']}"
BREAKS HERE
-    include_recipe 'powershell::windows_reboot' if (node['powershell']['installation_reboot_mode'] == 'immediate_reboot' && powershell_version < 4)
BREAKS HERE
-  environment lazy { ({ 'HOME' => ::Dir.home(homebrew_owner), 'USER' => homebrew_owner }) }
-    environment lazy { ({ 'HOME' => ::Dir.home(homebrew_owner), 'USER' => homebrew_owner }) }
BREAKS HERE
-  it 'app[\'deploy\'] = false' do
-                                                       aws_opsworks_app.merge(shortname: 'a1'),
-                                                       aws_opsworks_app.merge(shortname: 'a2', deploy: false)
-      solo_node.set['deploy'] = { 'a1' => {}, 'a2' => {} }
BREAKS HERE
-          ::File.mtime('/var/lib/apt/periodic/update-success-stamp') > Time.now - node['apt']['periodic_update_min_delay']
BREAKS HERE
-default["airflow"]["config"]["webserver"]["base_url"] = "http//#{node["fqdn"]}:#{node["airflow"]["config"]["webserver"]["web_server_port"]}"
-default["airflow"]["config"]["celery"]["broker_url"] = "sqla+mysql//airflowairflow@localhost3306/airflow"
-default["airflow"]["config"]["celery"]["celery_result_backend"] = "db+mysql//airflowairflow@localhost3306/airflow"
BREAKS HERE
-    Chef::Log.debug("Skipping deploy::php application #{application} as it is not an PHP app")
BREAKS HERE
-default["airflow"]["config"]["webserver"]["base_url"] = "http//#{node["fqdn"]}#{node["airflow"]["config"]["webserver"]["web_server_port"]}"
BREAKS HERE
-          %r{^connection = mysql://glance:db-pass@127\.0\.0\.1:3306/glance\?charset=utf8$}
BREAKS HERE
-    action(:execute) do
BREAKS HERE
-if platform?('centos') or platform?('redhat') or platform('amazon')
BREAKS HERE
-if bind_db['interface']
-  listen_address = address_for bind_db['interface']
-else
-  listen_address = bind_db['host']
-end
BREAKS HERE
-      version node['windows']['rubyzipversion']
BREAKS HERE
-          result[name] = DataNormalizer.normalize_cookbook(cookbook, name, versions[0], request.base_uri, 'GET')
BREAKS HERE
-
-  module DSL
-    # Coerces instance functions into class functions on Ridley::CookbookResource. This coercion
-    # sends an instance of the including class along to the class function.
-    #
-    # @see Ridley::ChainLink
-    #
-    # @return [Ridley::ChainLink]
-    #   a context object to delegate instance functions to class functions on Ridley::CookbookResource
-    def cookbook
-      ChainLink.new(self, Ridley::CookbookResource)
-    end
-  end
BREAKS HERE
-    os = if major_platform_version == 5 || hdp_version.to_f >= 2.3
-    yum_repository 'hdp' do
-      name 'HDP-2.x'
-      description 'Hortonworks Data Platform Version - HDP-2.x'
-      url yum_repo_url
-      gpgkey yum_repo_key_url
-      action :add
-    end
-      yum_repository 'hdp-updates' do
-        name 'Updates-HDP-2.x'
-        description 'Updates for Hortonworks Data Platform Version - HDP-2.x'
-        url "#{yum_base_url}/#{os}/2.x/updates"
BREAKS HERE
-  execute 'rebuild-iptables' do
-    command '/usr/sbin/rebuild-iptables'
-    action :nothing
-  execute 'rebuild-iptables' do
-    command '/usr/sbin/rebuild-iptables'
-    action :nothing
BREAKS HERE
-      unless TasteTester::Config.skip_pre_test_hook || TasteTester::Config.linkonly
-      unless TasteTester::Config.skip_post_test_hook || TasteTester::Config.linkonly
BREAKS HERE
-  only_if { !::File.exist?(::File.join(wildfly['base'], '.chef_deployed')) || wildfly['enforce_config'] }
BREAKS HERE
-#
-# Author:: Seth Chisamore (<schisamo@chef.io>)
-# Cookbook Name:: chef_handler
-# Recipe:: default
-#
-# Copyright 2011-2016, Chef Software, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-Chef::Log.warn("chef_handler::default recipe has been deprecated. Use the chef_handler resource instead to define handlers from your own wrapper cookbook.")
BREAKS HERE
-  has_binaries %w(nomad)
BREAKS HERE
-        profiles = node['audit']['profiles']
BREAKS HERE
-execute "set-hostname" do
BREAKS HERE
-default['rabbitmq']['policies']['ha-all']['priority'] = nil
BREAKS HERE
-  log "Unsupported platform family." do
-    level :warn
-  end
-      
-      puts "Search pattern: #{search_pattern}"
-      puts "Line to remove: #{line_to_remove}"
-      
-      Dynatrace::Helpers.file_replace_line(fileExists, line_to_remove, '')
-    end
-  end
-  if not apache_daemon.empty?
-    notifies :restart, "service[#{apache_daemon}]", :immediately
-  end
-  ignore_failure true
-end
-apache_config_file_path = '/opt/easytravel/resources/custom_httpd.conf'
-ruby_block "Remove the #{name} from Apache HTTPD's config file #{apache_config_file_path}" do
-  block do
-    fileExists = apache_config_file_path
-    if File.exist?(fileExists)
-      # Host Agent is already installed
-      search_pattern = "LoadModule dtagent_module"
-      line_to_remove = "#{search_pattern} \"#{agent_path}\""
-      
-      puts "Search pattern: #{search_pattern}"
-      puts "Line to remove: #{line_to_remove}"
-      
BREAKS HERE
-description 'Installs/Configures macos-cookbook-cookbook'
-long_description 'Installs/Configures macos-cookbook-cookbook'
-version '0.2.1'
-chef_version '~> 13' if respond_to?(:chef_version)
-source_url 'https://office.visualstudio.com'
-issues_url 'https://office.visualstudio.com'
-
-# The `issues_url` points to the location where issues for this cookbook are
-# tracked.  A `View Issues` link will be displayed on this cookbook's page when
-# uploaded to a Supermarket.
-#
-# issues_url 'https://github.com/<insert_org_here>/macos/issues'
-
-# The `source_url` points to the development repository for this cookbook.  A
-# `View Source` link will be displayed on this cookbook's page when uploaded to
-# a Supermarket.
-#
-# source_url 'https://github.com/<insert_org_here>/macos'
BREAKS HERE
-#TODO(breu): this needs to be abstracted for multi-distro support
-
-# package does not exist in ubuntu anymore
-#package "nova-novnc" do
-#  action :upgrade
-#end
-package "nova-vncproxy" do
-package "nova-consoleauth" do
-  only_if "egrep 'exec.*nova$' /etc/init/nova-vncproxy.conf"
-service "nova-vncproxy" do
-service "nova-consoleauth" do
BREAKS HERE
-if node["collectd"].attribute?("rhel") or node["collectd"].attribute?("debian")
-  case node["platform_family"]
-  when "rhel"
-  when "debian"
BREAKS HERE
-attribute :stream_specification, kind_of: Hash
BREAKS HERE
-          'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-          'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-          'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-          'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-            'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-            'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-            'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
-            'ENV_VAR2="some data" RACK_ENV="staging" DATABASE_URL="sqlite:///srv/www/dummy_project/current/db/' \
BREAKS HERE
-      values = "#{bindings},".match(%r{(?<protocol>[^\/]+)\/\*:(?<port>[^:]+):(?<host_header>[^,]*),})
-
-    if values
-      protocol values[:protocol]
-      port values[:port].to_i
-      host_header values[:host_header]
-    end
-      converge_if_changed :bindings, :host_header, :protocol do
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
BREAKS HERE
-  if node['fb_syslog']['rsyslog_stats_logging']
-    node.default['fb_logrotate']['configs']['rsyslog-stats'] = {
-      'files' => ['/var/log/rsyslog-stats.log'],
-    }
-  end
BREAKS HERE
-attribute :smp_processor_affinity_mask, kind_of: Bignum, default: 4_294_967_295
-attribute :smp_processor_affinity_mask_2, kind_of: Bignum, default: 4_294_967_295
BREAKS HERE
-# vim looks for xsubpp in wrong location RHEL 7+ and Fedora
-if platform?('fedora') || (platform_family?('rhel') && node['platform_version'].to_i >= 7)
-  link '/usr/share/perl5/ExtUtils/xsubpp' do
-    to '/usr/bin/xsubpp'
-    only_if { ::File.exist?('/usr/bin/xsubpp') } # if package node attributes don't include perl this won't be here
-  end
-end
BREAKS HERE
-    # The class responsible for parsing the lockfile and turning it into a
-    # useful data structure.
-    class LockfileParser
-      NAME_VERSION         = '(?! )(.*?)(?: \(([^-]*)(?:-(.*))?\))?'.freeze
-      DEPENDENCY_PATTERN   = /^ {2}#{NAME_VERSION}$/.freeze
-      DEPENDENCIES_PATTERN = /^ {4}#{NAME_VERSION}$/.freeze
-      OPTION_PATTERN       = /^ {4}(.+)\: (.+)/.freeze
-
-      # Create a new lockfile parser.
-      #
-      # @param [Lockfile]
-      def initialize(lockfile)
-        @lockfile  = lockfile
-        @berksfile = lockfile.berksfile
-      end
-
-      # Parse the lockfile contents, adding the correct things to the lockfile.
-      #
-      # @return [true]
-      def run
-        @parsed_dependencies = {}
-        contents = File.read(@lockfile.filepath)
-        if contents.strip.empty?
-          Berkshelf.formatter.warn "Your lockfile at '#{@lockfile.filepath}' " \
-            "is empty. I am going to parse it anyway, but there is a chance " \
-            "that a larger problem is at play. If you manually edited your " \
-            "lockfile, you may have corrupted it."
-        end
-        if contents.strip[0] == '{'
-          Berkshelf.formatter.warn "It looks like you are using an older " \
-            "version of the lockfile. Attempting to convert..."
-
-          dependencies = "#{Lockfile::DEPENDENCIES}\n"
-          graph        = "#{Lockfile::GRAPH}\n"
-
-          begin
-            hash = JSON.parse(contents)
-          rescue JSON::ParserError
-            Berkshelf.formatter.warn "Could not convert lockfile! This is a " \
-            "problem. You see, previous versions of the lockfile were " \
-            "actually a lie. It lied to you about your version locks, and we " \
-            "are really sorry about that.\n\n" \
-            "Here's the good news - we fixed it!\n\n" \
-            "Here's the bad news - you probably should not trust your old " \
-            "lockfile. You should manually delete your old lockfile and " \
-            "re-run the installer."
-          hash['dependencies'] && hash['dependencies'].sort .each do |name, info|
-            dependencies << "  #{name} (>= 0.0.0)\n"
-            info.each do |key, value|
-              unless key == 'locked_version'
-                dependencies << "    #{key}: #{value}\n"
-            graph << "  #{name} (#{info['locked_version']})\n"
-          contents = "#{dependencies}\n#{graph}"
-        end
-        contents.split(/(?:\r?\n)+/).each do |line|
-          if line == Lockfile::DEPENDENCIES
-            @state = :dependency
-          elsif line == Lockfile::GRAPH
-            @state = :graph
-          else
-            send("parse_#{@state}", line)
-        end
-        @parsed_dependencies.each do |name, options|
-          dependency = Dependency.new(@berksfile, name, options)
-          @lockfile.add(dependency)
-        true
-      end
-
-      private
-      # Parse a dependency line.
-      #
-      # @param [String] line
-      def parse_dependency(line)
-        if line =~ DEPENDENCY_PATTERN
-          name, version = $1, $2
-
-          @parsed_dependencies[name] ||= {}
-          @parsed_dependencies[name][:constraint] = version if version
-          @current_dependency = @parsed_dependencies[name]
-        elsif line =~ OPTION_PATTERN
-          key, value = $1, $2
-          @current_dependency[key.to_sym] = value
-        end
-      # Parse a graph line.
-      #
-      # @param [String] line
-      def parse_graph(line)
-        if line =~ DEPENDENCY_PATTERN
-          name, version = $1, $2
-
-          @lockfile.graph.find(name) || @lockfile.graph.add(name, version)
-          @current_lock = name
-        elsif line =~ DEPENDENCIES_PATTERN
-          name, constraint = $1, $2
-          @lockfile.graph.find(@current_lock).add_dependency(name, constraint)
-      end
-    end
-
-    # The class representing an internal graph.
-    class Graph
-      # Create a new Lockfile graph.
-      #
-      # Some clarifying terminology:
-      #
-      #     yum-epel (0.2.0) <- lock
-      #       yum (~> 3.0)   <- dependency
-      #
-      # @return [Graph]
-      def initialize(lockfile)
-        @lockfile  = lockfile
-        @berksfile = lockfile.berksfile
-        @graph     = {}
-      end
-      # The list of locks for this graph. Dependencies are retrieved from the
-      # lockfile, then the Berksfile, and finally a new dependency object is
-      # created if none of those exist.
-      #
-      # @return [Hash<String, Dependency>]
-      #   a key-value hash where the key is the name of the cookbook and the
-      #   value is the locked dependency
-      def locks
-        @graph.sort.inject({}) do |hash, (name, item)|
-          dependency = @lockfile.find(name)  ||
-                       @berksfile && @berksfile.find(name) ||
-                       Dependency.new(@berksfile, name)
-          dependency.locked_version = item.version
-
-          hash[item.name] = dependency
-          hash
-      end
-      # Find a given dependency in the graph.
-      #
-      # @param [Dependency, String]
-      #   the name/dependency to find
-      #
-      # @return [GraphItem, nil]
-      #   the item for the name
-      def find(dependency)
-        @graph[Dependency.name(dependency)]
-      end
-
-      # Find if the given lock exists?
-      #
-      # @param [Dependency, String]
-      #   the name/dependency to find
-      #
-      # @return [true, false]
-      def lock?(dependency)
-        !find(dependency).nil?
-      end
-      alias_method :has_lock?, :lock?
-
-      # Determine if this graph contains the given dependency. This method is
-      # used by the lockfile when adding or removing dependencies to see if a
-      # dependency can be safely removed.
-      #
-      # @param [Dependency, String] dependency
-      #   the name/dependency to find
-      #
-      # @option options [String, Array<String>] :ignore
-      #   the list of dependencies to ignore
-      def dependency?(dependency, options = {})
-        name   = Dependency.name(dependency)
-        ignore = Hash[*Array(options[:ignore]).map { |i| [i, true] }.flatten]
-
-        @graph.values.each do |item|
-          next if ignore[item.name]
-          if item.dependencies.key?(name)
-            return true
-          end
-        false
-      end
-      alias_method :has_dependency?, :dependency?
-      # Add each a new {GraphItem} to the graph.
-      #
-      # @param [#to_s] name
-      #   the name of the cookbook
-      # @param [#to_s] version
-      #   the version of the lock
-      #
-      # @return [GraphItem]
-      def add(name, version)
-        @graph[name.to_s] = GraphItem.new(name, version)
-      end
-      # Recursively remove any dependencies from the graph unless they exist as
-      # top-level dependencies or nested dependencies.
-      #
-      # @param [Dependency, String] dependency
-      #   the name/dependency to remove
-      #
-      # @option options [String, Array<String>] :ignore
-      #   the list of dependencies to ignore
-      def remove(dependency, options = {})
-        name = Dependency.name(dependency)
-        if @lockfile.dependency?(name)
-          return
-        if dependency?(name, options)
-          return
-        # Grab the nested dependencies for this particular entry so we can
-        # recurse and try to remove them from the graph.
-        locked = @graph[name]
-        nested_dependencies = locked && locked.dependencies.keys || []
-        # Now delete the entry
-        @graph.delete(name)
-        # Recursively try to delete the remaining dependencies for this item
-        nested_dependencies.each(&method(:remove))
-      end
-      # Update the graph with the given cookbooks. This method destroys the
-      # existing dependency graph with this new result!
-      #
-      # @param [Array<CachedCookbook>]
-      #   the list of cookbooks to populate the graph with
-      def update(cookbooks)
-        @graph = {}
-
-        cookbooks.each do |cookbook|
-          @graph[cookbook.cookbook_name.to_s] = GraphItem.new(
-            cookbook.name,
-            cookbook.version,
-            cookbook.dependencies,
-          )
-      end
-      # Write the contents of the graph to the lockfile format.
-      #
-      # The resulting format looks like:
-      #
-      #     GRAPH
-      #       apache2 (1.8.14)
-      #       yum-epel (0.2.0)
-      #         yum (~> 3.0)
-      #
-      # @example lockfile.graph.to_lock #=> "GRAPH\n  apache2 (1.18.14)\n..."
-      #
-      # @return [String]
-      #
-      def to_lock
-        out = "#{Lockfile::GRAPH}\n"
-        @graph.sort.each do |name, item|
-          out << "  #{name} (#{item.version})\n"
-
-          unless item.dependencies.empty?
-            item.dependencies.sort.each do |name, constraint|
-              out << "    #{name} (#{constraint})\n"
-            end
-        out
-      end
-
-      private
-
-      # A single item inside the graph.
-      class GraphItem
-        # The name of the cookbook that corresponds to this graph item.
-        # @return [String]
-        #   the name of the cookbook
-        attr_reader :name
-
-        # The locked version for this graph item.
-        #   the locked version of the graph item (as a string)
-        attr_reader :version
-
-        # The list of dependencies and their constraints.
-        # @return [Hash<String, String>]
-        #   the list of dependencies for this graph item, where the key
-        #   corresponds to the name of the dependency and the value is the
-        #   version constraint.
-        attr_reader :dependencies
-
-        # Create a new graph item.
-        def initialize(name, version, dependencies = {})
-          @name         = name.to_s
-          @version      = version.to_s
-          @dependencies = dependencies
-        end
-        # Add a new dependency to the list.
-        #
-        # @param [#to_s] name
-        #   the name to use
-        # @param [#to_s] constraint
-        #   the version constraint to use
-        def add_dependency(name, constraint)
-          @dependencies[name.to_s] = constraint.to_s
-    end
BREAKS HERE
-
BREAKS HERE
-default['kibana']['apache']['basic_auth_username'] = "admin"
-default['kibana']['apache']['basic_auth_password'] = "PLEASEchangeme"
BREAKS HERE
-         container.info['NetworkSettings']['Networks'][new_resource.network_mode] &&
-         container.info['NetworkSettings']['Networks'][new_resource.network_mode]['IPAMConfig'] &&
-         container.info['NetworkSettings']['Networks'][new_resource.network_mode]['IPAMConfig']['IPv4Address']
-        ip_address container.info['NetworkSettings']['Networks'][new_resource.network_mode]['IPAMConfig']['IPv4Address']
-            !(new_reosurce.hostname.nil? || new_reosurce.hostname.empty?) ||
-            !(new_reosurce.dns.nil? || new_reosurce.dns.empty?) ||
-            !(new_reosurce.dns_search.nil? || new_reosurce.dns_search.empty?) ||
-            !(new_reosurce.mac_address.nil? || new_reosurce.mac_address.empty?) ||
-            !(new_reosurce.extra_hosts.nil? || new_reosurce.extra_hosts.empty?) ||
-            !(new_reosurce.exposed_ports.nil? || new_reosurce.exposed_ports.empty?) ||
-            !(new_reosurce.port_bindings.nil? || new_reosurce.port_bindings.empty?) ||
-            !(new_reosurce.publish_all_ports.nil? || new_reosurce.publish_all_ports.empty?) ||
-            !new_reosurce.port.nil?
BREAKS HERE
-  source 'vhost.conf.erb' if node['kibana']['version'] =~ /^2/
BREAKS HERE
-      destination      = File.expand_path(destination)
-      FileUtils.mkdir_p(destination)
-      FileUtils.remove_dir(destination, force: true)
-
BREAKS HERE
-        event_title = ''
-        run_time = pluralize(run_status.elapsed_time, 'second')
-        if run_status.success?
-          alert_type = 'success'
-          event_priority = 'low'
-          event_title << "Chef completed in #{run_time} on #{hostname} "
-        else
-          event_title << "Chef failed in #{run_time} on #{hostname} "
-        end
-
-        event_data = "Chef updated #{run_status.updated_resources.length} resources out of #{run_status.all_resources.length} resources total."
-
-        if run_status.failed?
-          alert_type = 'error'
-          event_priority = 'normal'
-          event_data << "\n@@@\n#{run_status.formatted_exception}\n@@@\n"
-          event_data << "\n@@@\n#{run_status.backtrace.join("\n")}\n@@@\n"
-        end
-
-        if run_status.updated_resources.length.to_i > 0
-          event_data << "\n@@@\n"
-          run_status.updated_resources.each do |r|
-            event_data << "- #{r} (#{r.defined_at})\n"
-          end
-          event_data << "\n@@@\n"
-        end
BREAKS HERE
-  execute "Set blockstoragemanager" do
-     command lazy { "#{euctl} #{cluster}.storage.blockstoragemanager=#{storage_backend}" }
-     not_if "#{euctl} #{cluster}.storage.blockstoragemanager | grep #{storage_backend}"
-     retries 15
-     retry_delay 20
-     action :nothing
-  end
-    # if we reach this point we received a successful result from the loop above
-    notifies :run, 'execute[Set blockstoragemanager]', :immediately
BREAKS HERE
-  # if the vpn agent is enabled, we should stop and disable the l3 agent
-  notifies :restart, 'service[neutron-l3-agent]', :immediately
BREAKS HERE
-# policies
-default['rabbitmq']['policies']['ha-all']['pattern'] = "\"^(?!amq\\.).*\""
-default['rabbitmq']['policies']['ha-all']['params'] = "'{\"ha-mode\": \"all\"}'"
BREAKS HERE
-  mode 00644
BREAKS HERE
-      debug_entries = header('Backtrace', 'Exception', 'Formatted Exception');
-      [:backtrace, :exception, :formatted_exception].each do |msg|
-        debug_entries << (node[:lastrun][:debug][msg] ? node[:lastrun][:debug][msg].to_s : "none")
-      end
-      ui.msg h.list(debug_entries, :columns_down, 2)
BREAKS HERE
-    :chef_server_url => Chef::Config.chef_server_url,
-    :node_name => Chef::Config[:node_name],
-    :client_key_path => node['push_jobs']['chef']['client_key_path'],
-    :trusted_certs_path => node['push_jobs']['chef']['trusted_certs_path'],
-    :whitelist => node['push_jobs']['whitelist'],
-    :env_variables => node['push_jobs']['environment_variables'],
-    :verify_api_cert => node['push_jobs']['chef']['verify_api_cert'])
BREAKS HERE
-
BREAKS HERE
-  raw_source = convert_pem(ext)
-
-  cert_obj = OpenSSL::X509::Certificate.new(raw_source) # A certificate object in memory
-  $hash = #{hash}
-  Test-Path "Cert:\\#{cert_location}\\#{new_resource.store_name}\\$hash"
-  $store = New-Object System.Security.Cryptography.X509Certificates.X509Store "#{new_resource.store_name}", ([System.Security.Cryptography.X509Certificates.StoreLocation]::#{cert_location})
-  $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]::ReadWrite)
-  #{inner_script}
-  $store.Close()
-  $hash = #{hash}
-  $storeCert = Get-ChildItem "cert:\\#{cert_location}\\#{new_resource.store_name}\\$hash"
-  if ($storeCert -eq $null) { throw 'no key exists.' }
-  $keyname = $storeCert.PrivateKey.CspKeyContainerInfo.UniqueKeyContainerName
-  if ($keyname -eq $null) { throw 'no private key exists.' }
-  if ($storeCert.PrivateKey.CspKeyContainerInfo.MachineKeyStore)
-  {
-    $fullpath = "$Env:ProgramData\\Microsoft\\Crypto\\RSA\\MachineKeys\\$keyname"
-  }
-  else
-  {
-    $currentUser = New-Object System.Security.Principal.NTAccount($Env:UserDomain, $Env:UserName)
-    $userSID = $currentUser.Translate([System.Security.Principal.SecurityIdentifier]).Value
-    $fullpath = "$Env:ProgramData\\Microsoft\\Crypto\\RSA\\$userSID\\$keyname"
-  }
-  # Uses powershell command to convert crt/der/cer/pfx & p7b certificates
-  # In PEM format and returns its certificate content
-  def convert_pem(ext)
-    out = case ext
-          when '.crt', '.cer', '.der'
-            command = "openssl x509 -text -in #{new_resource.source} -outform PEM"
-            command += ' -inform DER' if binary_cert?
-            powershell_out(command)
-          when '.pfx'
-            powershell_out("openssl pkcs12 -in #{new_resource.source} -nodes -passin pass:'#{new_resource.pfx_password}'")
-          when '.p7b'
-            powershell_out("openssl pkcs7 -print_certs -in #{new_resource.source} -outform PEM")
-          else
-            powershell_out("openssl x509 -text -inform #{ext.delete('.')} -in #{new_resource.source} -outform PEM")
-          end
-
-    if out.exitstatus == 0
-      format_raw_out(out.stdout)
-      raise out.stderr
-  # Returns the certificate content
-  def format_raw_out(out)
-    begin_cert = '-----BEGIN CERTIFICATE-----'
-    end_cert = '-----END CERTIFICATE-----'
-    begin_cert + out[/#{begin_cert}(.*?)#{end_cert}/m, 1] + end_cert
-  end
-
-  # Checks if the certificate is binary encoded or not
-    powershell_out("file -b --mime-encoding #{new_resource.source}").stdout.strip == 'binary'
BREAKS HERE
-  bbox [[-35.12, 16.23], [-22.1, 33.18]]
BREAKS HERE
- cert = ssl_certificate 'postfixadmin' do
- # Create SSL virtualhost
BREAKS HERE
-        remote_file.run_action(:create_if_missing)
BREAKS HERE
-when 'smartos', 'rhel', 'debian', 'fedora', 'mac_os_x'
BREAKS HERE
-  action :add
BREAKS HERE
-      return self.new(
-        priority:   priority,
-    comments = "# #{comment.to_s}".strip
-    return 00
BREAKS HERE
-            children, error = list(path, "*")
-          if !@current_acls.has_key?(acl_path)
-            matches = Chef::ChefFS::Parallelizer.parallelize(matches) do |path|
-              found, error = list(path, part)
BREAKS HERE
-default['openresty']['source']['version']   = '1.2.8.1'
-default['openresty']['source']['checksum']  = '741b64ebd108938a2265a9df8c93c9e1be6a790c4f70290fca4560a90f51c44d'
BREAKS HERE
-    :dd_urls => dd_urls
BREAKS HERE
-# CENTOS6: 3.1.16
-  source "main.cf.erb"
BREAKS HERE
-          Berkshelf.log.debuig "    Constraints are not satisfied!"
BREAKS HERE
-  sasl_pkgs = %w{libsasl2-2  ca-certificates}
-    sasl_pkgs = %w{cyrus-sasl openssl}
-    sasl_pkgs = %w{cyrus-sasl ca-certificates}
-  sasl_pkgs = %w{cyrus-sasl ca-certificates}
BREAKS HERE
-          expect(chef_run).not_to render_config_file(file.name).with_section_content('DEFAULT', /^kombu_ssl_version=TLSv1.2$/)
-          expect(chef_run).to render_config_file(file.name).with_section_content('DEFAULT', /^kombu_ssl_version=TLSv1.2$/)
BREAKS HERE
-	  cmd << " -DomainName #{new_resource.name}"
-	  cmd << " -SafeModeAdministratorPassword (convertto-securestring '#{new_resource.safe_mode_pass}' -asplaintext -Force)"
-	  cmd = "dcpromo -unattend"
-	  cmd << " -newDomain:#{new_resource.type}"
-	  cmd << " -NewDomainDNSName:#{new_resource.name}"
-	  cmd << " -RebootOnCompletion:Yes"
-	  cmd << " -SafeModeAdminPassword:(convertto-securestring '#{new_resource.safe_mode_pass}' -asplaintext -Force)"
-	  cmd << " -ReplicaOrNewDomain:#{new_resource.replica_type}"
-	end
-	
-   if node[:os_version] > '6.2'
-	end
-  	  when "domain"
-  	    "domain"
-	    "domain"
-	  when "replica"
-	    "replica"
-	end
BREAKS HERE
-    plugin_dir_exists = ::File.exist?(es_conf.path_plugins[es_install.type])
-    shell_out_as_user!("mkdir -p #{es_conf.path_plugins[es_install.type]}", run_context) unless plugin_dir_exists
-    command_array = "#{es_conf.path_bin[es_install.type]}/elasticsearch-plugin #{arguments.chomp(' ')} #{new_resource.options}".chomp(' ').split(' ')
-    path = es_conf.path_plugins[es_install.type]
-    unless es_conf.path_plugins[es_install.type] # we do not check existence (may not exist if no plugins installed)
-      raise "Could not determine the plugin directory (#{es_conf.path_plugins[es_install.type]}). Please check elasticsearch_configure[#{es_conf.name}]."
-    unless es_conf.path_bin[es_install.type] && ::File.exist?(es_conf.path_bin[es_install.type])
-      raise "Could not determine the binary directory (#{es_conf.path_bin[es_install.type]}). Please check elasticsearch_configure[#{es_conf.name}]."
-    if es_install.type == :package
BREAKS HERE
-version IO.read(File.join(File.dirname(__FILE__), 'VERSION')) rescue '0.0.1'
BREAKS HERE
-      postrotate '/etc/init.d/chef-client reload >/dev/null || :'
BREAKS HERE
-  variables({
-    :options => openssh_server_options
-  })
BREAKS HERE
-default['mongodb3']['config']['mongod']['systemLog']['logAppend'] = true # default : false
-default['mongodb3']['config']['mongod']['systemLog']['destination'] = 'file' # default : 'file'
BREAKS HERE
-    def start!(*args, &block)
-      at_exit { ChefSpec::Coverage.report!(*args) }
BREAKS HERE
-attribute :product_id, :kind_of => String, :name_attribute => true
-attribute :accept_eula, :kind_of => [TrueClass, FalseClass], :default => false
BREAKS HERE
-
-raise "The compat_resources cookbook does not support chef versions older than Chef 12.0.0"
-  unless Gem::Requirement.new(">= 12.0").satisfied_by?(Gem::Version.new(Chef::VERSION))
BREAKS HERE
-    attr_reader :options
-      options = options.reverse_merge(
-      self.class.validate_options(options)
-      @ssh              = options[:ssh]
-      @validator_client = options[:validator_client]
-      options[:client_key] = File.expand_path(options[:client_key])
-      if options[:validator_path]
-        @validator_path = File.expand_path(options[:validator_path])
-      if options[:encrypted_data_bag_secret_path]
-        @encrypted_data_bag_secret_path = File.expand_path(options[:encrypted_data_bag_secret_path])
-      unless options[:client_key].present? && File.exist?(options[:client_key])
-        raise Errors::ClientKeyFileNotFound, "client key not found at: '#{options[:client_key]}'"
-      @options = options
-
-        options[:server_url],
-        options[:client_name],
-        options[:client_key],
-        options.slice(*Connection::VALID_OPTIONS)
BREAKS HERE
-        # Try to figure out the name of this cookbook, pretending this block
-        # is in the name context as the cookbook under test.
-        cookbook_name = begin
-          cookbook.name
-        rescue IOError
-          # Old cookbook, has no metadata, use the folder name I guess.
-          File.basename(options[:cookbook_root])
-        end
-        cookbook_root: config.cookbook_root || calling_cookbook_root(caller),
-        cookbook_path: config.cookbook_path || calling_cookbook_path(caller),
-    def calling_cookbook_root(kaller)
-      calling_spec = kaller.find { |line| line =~ /\/spec/ }
-    def calling_cookbook_path(kaller)
-      File.expand_path(File.join(calling_cookbook_root(kaller), '..'))
BREAKS HERE
-      'http://public-repo-1.hortonworks.com/HDP/ubuntu12/2.x/updates/2.6.1.0'
-      'http://public-repo-1.hortonworks.com/HDP/ubuntu14/2.x/updates/2.6.1.0'
-      'http://public-repo-1.hortonworks.com/HDP-UTILS-1.1.0.21/repos/ubuntu14'
BREAKS HERE
-    unless (::File.exist?('metadata.rb') && field_value(read_ast('metadata.rb'), "license") == 'All Rights Reserved')
BREAKS HERE
-    puts "=========================================================="
-    puts req.body
BREAKS HERE
-remote_file "/tmp/apache-activemq-#{version}-bin.tar.gz" do
-  source "#{mirror}/apache/activemq/apache-activemq/#{version}/apache-activemq-#{version}-bin.tar.gz"
-  mode "0644"
-end
-execute "tar zxf /tmp/apache-activemq-#{version}-bin.tar.gz" do
-  cwd "/opt"
-  not_if { File.exists?("/opt/apache-activemq-#{version}/bin/activemq") }
BREAKS HERE
-    unless ::File.exist?("metadata.rb") && field_value(read_ast("metadata.rb"), "license") == "All Rights Reserved"
BREAKS HERE
-  unless node['cookbook-openshift3']['openshift_metrics_cassandra_storage_types'].any? { |t| t.casecmp(node['cookbook-openshift3']['openshift_metrics_cassandra_storage_type']) == 0 }
BREAKS HERE
-default["airflow"]["python_runtime"] = "2"
-default["airflow"]["python_version"] = "2.7"
-default["airflow"]["pip_version"] = true
BREAKS HERE
-when "rhel", "fedora"
BREAKS HERE
-        c.unit_test do
-          bundle_install_mutex.synchronize { sh("#{embedded_bin("bundle")} install") }
-          sh("#{embedded_bin("bundle")} exec #{embedded_bin("rspec")} -fp -t '~volatile_from_verify' spec/unit")
-        end
BREAKS HERE
-      seen_before = File.exists?(config)
-
-    unless seen_before
-
-      File.open(config, 'w') do |f|
-        json_data = node.data
-        f.write(JSON.dump(json_data))
-        f.write("\n")
-      end
BREAKS HERE
-    File.open(euca_p12, 'w', ) do |file|
BREAKS HERE
-  listen = new_resource.listen || node['nginx_conf']['listen']
-  locations = node['nginx_conf']['locations'].to_hash.merge(new_resource.locations)
-    locations['/']['proxy_pass'] = node['nginx_conf']['pre_socket'] + new_resource.socket
BREAKS HERE
-  when 'fedora', 'rhel'
BREAKS HERE
-                       node['sql_server']['sysadmins'].join(' ')
-                       node['sql_server']['sysadmins']
BREAKS HERE
-          "mysql_database_user",
-          :username => "",
-          :host => "localhost",
-          :connection => @connection,
-          :action => [:drop]
-        )
-      end
-
-      it "removes insecure default hostname mysql users" do
-        resource = @chef_run.find_resource(
-          "mysql_database_user",
-          "drop empty hostname user"
-        ).to_hash
-
-        expect(resource).to include(
-          :username => "",
-          :host => "Fauxhai",
-          :action => [:drop]
-          "FLUSH privileges"
-          :sql => "FLUSH privileges",
-          :action => [:nothing]
-
-      it "flush privileges subscribes to 'mysql_database[test]', :query" do
-        pending "How to test subscribes"
-      end
BREAKS HERE
-version           "7.0.4"
BREAKS HERE
-        dependency = get_demand(name) || Dependency.new(berksfile, name, constraint: version)
BREAKS HERE
-# Copyright:: Copyright (c) 2014-2018 Chef Software Inc.
-          new_file_path = nil
-            new_file_path = arguments[0]
BREAKS HERE
-      not_if do ::File.symlink?("#{node['openresty']['conf_dir']}/sites-enabled/#{new_resource.name}") end
-action :remove do
-      only_if do ::File.symlink?("#{node['openresty']['conf_dir']}/sites-enabled/#{new_resource.name}") end
BREAKS HERE
-package 'postfix'
-package 'procmail' if node['postfix']['use_procmail']
-
-case node['platform_family']
-when 'rhel', 'fedora'
-  service 'sendmail' do
-    action :nothing
-  end
-
-  execute 'switch_mailer_to_postfix' do
-    command '/usr/sbin/alternatives --set mta /usr/sbin/sendmail.postfix'
-    notifies :stop, 'service[sendmail]'
-    notifies :start, 'service[postfix]'
-    not_if '/usr/bin/test /etc/alternatives/mta -ef /usr/sbin/sendmail.postfix'
-  end
-when 'omnios'
-  manifest_path = ::File.join(Chef::Config[:file_cache_path], 'manifest-postfix.xml')
-
-  # we need to manage the postfix group and user
-  # and then subscribe to the package install because it creates a
-  # postdrop group and adds postfix user to it.
-  group 'postfix' do
-    append true
-  end
-
-  user 'postfix' do
-    uid node['postfix']['uid']
-    gid 'postfix'
-    home '/var/spool/postfix'
-    subscribes :manage, 'package[postfix]'
-    notifies :run, 'execute[/opt/omni/sbin/postfix set-permissions]', :immediately
-  end
-
-  # we don't guard this because if the user creation was successful (or happened out of band), then this won't get executed when the action is :nothing.
-  execute '/opt/omni/sbin/postfix set-permissions'
-
-  template manifest_path  do
-    source 'manifest-postfix.xml.erb'
-    owner 'root'
-    group 'root'
-    mode '0644'
-    notifies :run, 'execute[load postfix manifest]', :immediately
-  end
-
-  execute 'load postfix manifest' do
-    action :nothing
-    command "svccfg import #{manifest_path}"
-    notifies :restart, 'service[postfix]'
-  end
-execute 'update-postfix-sender_canonical' do
-  command "postmap #{node['postfix']['conf_dir']}/sender_canonical"
-  action :nothing
-unless node['postfix']['sender_canonical_map_entries'].empty?
-  template "#{node['postfix']['conf_dir']}/sender_canonical" do
-    owner 'root'
-    group 0
-    mode '0644'
-    notifies :run, 'execute[update-postfix-sender_canonical]'
-    notifies :reload, 'service[postfix]'
-  end
-
-  unless node['postfix']['main'].key?('sender_canonical_maps')
-    node.set['postfix']['main']['sender_canonical_maps'] = "hash:#{node['postfix']['conf_dir']}/sender_canonical"
-  end
-end
-
-execute 'update-postfix-smtp_generic' do
-  command "postmap #{node['postfix']['conf_dir']}/smtp_generic"
-  action :nothing
-end
-
-if !node['postfix']['smtp_generic_map_entries'].empty?
-  template "#{node['postfix']['conf_dir']}/smtp_generic" do
-    owner 'root'
-    group 0
-    mode  '0644'
-    notifies :run, 'execute[update-postfix-smtp_generic]'
-    notifies :reload, 'service[postfix]'
-  end
-
-  if !node['postfix']['main'].key?('smtp_generic_maps')
-    node.set['postfix']['main']['smtp_generic_maps'] = "hash:#{node['postfix']['conf_dir']}/smtp_generic"
-  end
-%w{main master}.each do |cfg|
-  template "#{node['postfix']['conf_dir']}/#{cfg}.cf" do
-    source "#{cfg}.cf.erb"
-    owner 'root'
-    group 0
-    mode '0644'
-    notifies :restart, 'service[postfix]'
-    variables(settings: node['postfix'][cfg])
-    cookbook node['postfix']["#{cfg}_template_source"]
-  end
-service 'postfix' do
-  supports status: true, restart: true, reload: true
-  action [:enable, :start]
BREAKS HERE
-        'worker_rlimit_nofile' => node['nginx']['worker_rlimit_nofile']
BREAKS HERE
-    device = File.basename(controller[:device])
-    device = File.basename(disk[:device])
BREAKS HERE
-          @service_link ||=
-            begin
-              l = Chef::Resource::Link.new(::File.join(service_dir_name), run_context)
-              l.to(sv_dir_name)
-              l
-            end
BREAKS HERE
-  initial_admin_config["name"] = "#{sentry_config["admin_first_name"] sentry_config["admin_last_name"]}"
BREAKS HERE
-          if node['platform_family'] == "rhel" && node[:kernel][:machine] == "x86_64"
-            "/usr/lib64/fluent/ruby/bin/fluent-gem"
-          elsif node['platform'] == 'ubuntu' && major && major != '1'
BREAKS HERE
-      # Attribute: yes - answer yes to all questions
-      #
-      # @param arg [Bool] true, false
-      #
-      # @return [Bool] true, false
-      #
-      def yes(arg = nil)
-        set_or_return(
-          :yes,
-          arg,
-          kind_of: Bool
-        )
-      end
BREAKS HERE
-  notifies :restart, "service[#{osquery_daemon}]"
-  notifies :restart, "service[#{osquery_daemon}]"
BREAKS HERE
-#node.default[:cassandra][:conf_dir]  = "/etc/cassandra/conf"
-
-Chef::Application.fatal!("attribute node['cassandra']['cluster_name'] not defined") unless node.cassandra.cluster_name
-
-  # I don't understand why these are needed when installing from a package? Certainly broken on Centos.
-=begin
-  [node.cassandra.installation_dir,
-   node.cassandra.bin_dir,
-   node.cassandra.lib_dir].each do |dir|
-
-     directory dir do
-       owner     node.cassandra.user
-       group     node.cassandra.group
-       recursive true
-       action    :create
-     end
-   end
-=end
-    apt_repository "datastax" do
-      uri          "http://#{dse_credentials['username']}:#{dse_credentials['password']}@debian.datastax.com/enterprise"
-      distribution "stable"
-      components   ["main"]
-      key          "http://debian.datastax.com/debian/repo_key"
-      action :add
-    apt_repository "datastax" do
-      uri          "http://debian.datastax.com/community"
-      distribution "stable"
-      components   ["main"]
-      key          "http://debian.datastax.com/debian/repo_key"
-
-      action :add
-    yum_repository "datastax" do
-      description "DataStax Repo for Apache Cassandra"
-      baseurl     "http://#{dse_credentials['username']}:#{dse_credentials['password']}@rpm.datastax.com/enterprise"
-      gpgcheck    false
-      action      :create
-    yum_repository node['cassandra']['yum']['repo'] do
-      description   node['cassandra']['yum']['description']
-      baseurl       node['cassandra']['yum']['baseurl']
-      mirrorlist    node['cassandra']['yum']['mirrorlist']
-      gpgcheck      node['cassandra']['yum']['gpgcheck']
-      enabled       node['cassandra']['yum']['enabled']
-      action        :create
-  yum_package "#{node.cassandra.package_name}" do
-    options node['cassandra']['yum']['options']
-
BREAKS HERE
-    it 'creates shared/pids' do
-      expect(chef_run).to create_directory("/srv/www/#{aws_opsworks_app['shortname']}/shared/pids")
-    end
-
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid')
-            '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid ' \
-            '/srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid 8\'" with timeout 18 seconds'
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid')
-            '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid ' \
-            '/srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid 8\'" with timeout 18 seconds'
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid')
-            '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid ' \
-            '/srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid 8\'" with timeout 18 seconds'
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid')
-            '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid ' \
-            '/srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid 8\'" with timeout 18 seconds'
-        .with_content('with pidfile /srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid')
-          'QUEUE=test_queue VERBOSE=1 PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid COUNT=2 ' \
-          '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid`\'' \
-        .with_content('with pidfile /srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid')
-          'QUEUE=test_queue VERBOSE=1 PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid COUNT=2 ' \
-          '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid`\'' \
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid')
-            'QUEUE=test_queue VERBOSE=1 PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid ' \
-            '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid`\'' \
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid')
-            'QUEUE=test_queue VERBOSE=1 PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid ' \
-            '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid`\'' \
-        .with_content('with pidfile /srv/www/dummy_project/shared/pids/delayed_job.0.pid')
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 --queues=test_queue' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" ' \
-        .with_content('with pidfile /srv/www/dummy_project/shared/pids/delayed_job.1.pid')
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 --queues=test_queue' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" ' \
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/delayed_job.0.pid')
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" ' \
-          .with_content('with pidfile /srv/www/dummy_project/shared/pids/delayed_job.1.pid')
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" ' \
BREAKS HERE
-if Gem::Requirement.new('< 12.14.37').satisfied_by?(Gem::Version.new(Chef::VERSION))
BREAKS HERE
-describe "Environment API operations" do
BREAKS HERE
-#########################################################################
-# Docker
-#########################################################################
-include_recipe 'chef-apt-docker::default'
-
-package "docker-engine"
-
-execute 'install docker-compose' do
-  command <<-EOH
-curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
-chmod +x /usr/local/bin/docker-compose
-EOH
-# Ensure the `dbuild` user is part of the `docker` group so they can
-# connect to the Docker daemon
-execute "usermod -aG docker #{node['delivery_builder']['build_user']}"
-
BREAKS HERE
-node.set['bcpc']['management']['ip'] = node['network']['interfaces'][node['bcpc']['management']['interface']]['addresses'].select {|k,v| v['family'] == "inet" and k != node['bcpc']['management']['vip'] }[0].first
BREAKS HERE
-  conf['DEFAULT']['osapi_volume_listen'] = cinder_api_bind.host
BREAKS HERE
-              block { ::File.unlink("#{::File.join(new_resource.lsb_init_dir, new_resource.service_name)}") }
-              only_if { ::File.symlink?("#{::File.join(new_resource.lsb_init_dir, new_resource.service_name)}") }
BREAKS HERE
-  lvm = LVM::LVM.new
-  lvm = LVM::LVM.new
BREAKS HERE
-version          "0.4.2"
-recipe "nfs::exports", "Templates the exports file from attribute or LWRP"
BREAKS HERE
-          cmd_text << " /ou:#{ou_dn}" if new_resource.ou
BREAKS HERE
-# NSCD and SSSD don't play well together.
-# https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/6/html/Deployment_Guide/usingnscd-sssd.html
-package 'nscd' do
-  action :remove
-end
-
BREAKS HERE
-                servercommand = "knife bootstrap#{Spiceweasel::Config[:knife_options]} #{server} #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
-              nodenames.push(optname.gsub(/\{\{n\}\}/, (i + 1).to_s))
-        count.to_i.times { |i| provided_names << name.gsub('{{n}}', (i + 1).to_s) } if name
-              server = "knife #{provider}#{Spiceweasel::Config[:knife_options]} vm clone #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
-              server = "knife #{provider}#{Spiceweasel::Config[:knife_options]} vm create #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
-              server = "knife #{provider}#{Spiceweasel::Config[:knife_options]} droplet create #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
-              server = "knife #{provider}#{Spiceweasel::Config[:knife_options]} server create #{name} #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
-              server = "knife #{provider}#{Spiceweasel::Config[:knife_options]} server create #{options}".gsub(/\{\{n\}\}/, (i + 1).to_s)
BREAKS HERE
-      property :volumes, [Hash, nil], coerce: proc { |v| coerce_volumes(v) }
BREAKS HERE
-      test/integration/default/serverspec
-      test/integration/default/serverspec/default_spec.rb
-      test/integration/helpers/serverspec/spec_helper.rb
-        describe "test/integration/default/serverspec/default_spec.rb" do
-          let(:file) { File.join(tempdir, "new_cookbook", "test", "integration", "default", "serverspec", "default_spec.rb") }
-# Uncomment the following verifier to leverage Inspec instead of Busser (the
-# default verifier)
-# verifier:
-#   name: inspec
-#   format: doc
-# Uncomment the following verifier to leverage Inspec instead of Busser (the
-# default verifier)
-# verifier:
-#   name: inspec
-#   format: doc
BREAKS HERE
-      @pool       = Concurrent::FixedThreadPool.new([Concurrent.processor_count - 1, 1].max)
-      cookbooks = resolver.resolve.sort.map { |dependency| worker.future.install(dependency) }.map(&:value)
BREAKS HERE
-node.set['bcpc']['management']['ip'] = node['network']['interfaces'][node['bcpc']['management']['interface']]['addresses'].select {|k,v| v['family'] == "inet" and k != node['bcpc']['management']['vip'] }.keys[0]
BREAKS HERE
-        describe "policies" do
-            let(:file) { "policies/README.md" }
-        it "does not create a policies directory" do
-          expect(File).to_not exist(File.join(repo_path, "policies"))
BREAKS HERE
-# Cookbook Name:: perl
-# Copyright 2009-2016, Chef Software, Inc.
BREAKS HERE
-
-        merged_configuration[:_seen] = {} # magic state variable for what we've seen in a config
-        found_symbols = merged_configuration.keys.select { |s| s.is_a?(Symbol) && s != :_seen }
BREAKS HERE
-      node_hash['custom_vars']['disks'] = node_hash['disks']
BREAKS HERE
-%w{ ubuntu fedora redhat centos }.each do |os|
BREAKS HERE
-      def run
-        else
BREAKS HERE
-  when /^2.1.[0-1]/
-  when /^2.1.[2-3]/
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
BREAKS HERE
-      raise DuplicateSourceDefined if has_source?(source.name)
BREAKS HERE
-Chef::Log.warn "Running chef-client as a service on Windows is deprecated and not recommended. This recipe will be removed in a future version of this cookbook. We recommend running Chef client as a scheduled task instead."
BREAKS HERE
-
-# pull form public after pulling from private
-docker_image 'fedora' do
-  action :pull_if_missing
-end
BREAKS HERE
-attribute :queue_length, :kind_of => Integer
BREAKS HERE
-# 
-# 
-        (node.platform == "debian") && (node.platform_version.to_f < 6.0)
-        (node.platform == "ubuntu") && (node.platform_version.to_f < 10.0)
BREAKS HERE
-default['sysctl']['params']['net']['ipv4']['conf']['eth0']['arp_ignore'] =
-default['sysctl']['params']['net']['ipv4']['conf']['eth0']['arp_announce'] =
BREAKS HERE
-      notifies :run, 'execute[chown syslog pipe]', :immediately
-      notifies :run, 'execute[chmod syslog pipe]', :immediately
-      action :nothing
-      action :nothing
-  cookbook_file new_resource.syslog_file do
-    source rsyslog_legacy ? 'rsyslog/osquery-legacy.conf' : 'rsyslog/osquery.conf'
BREAKS HERE
-  options "-o Dpkg::Options::='--force-confold' --force-yes"
BREAKS HERE
-when 'rhel', 'fedora', 'suse', 'freebsd', 'gentoo'
BREAKS HERE
-      require 'chef/cookbook_loader'
-      validate_cookbook_exists
-    # Re-used from Chef
-    def cookbook_loader
-      @cookbook_loader ||= Chef::CookbookLoader.new(config[:cookbook_path])
-    end
-
-    # Validate cookbook existence
-    # Since we can have cookbooks in paths that are not named the same as the directory, using
-    # a metadata entry to describe the cookbook is better. In its absence, uses the directory name.
-    #
-    # @return [String] @cb_path, a string with the root directory of the cookbook
-    # @return [String] @cb_name, a string with the cookbook's name, either from metadata or interpreted from directory
-    def validate_cookbook_exists
-      unless cookbook_loader.cookbook_exists?(@cookbook)
-        ui.error "Cannot find a cookbook named #{@cookbook} at #{config[:cookbook_path]}"
-        exit 2
-      end
-      cb = cookbook_loader.cookbooks_by_name[@cookbook]
-      @cb_path = cb.root_dir
-      @cb_name = cb.metadata.name.to_s
-      @cb_version = Versionomy.parse(cb.version)
-    end
BREAKS HERE
-  action :nothing
-#service 'kibana' do
-#  case node['platform']
-#  when 'centos'
-#    if node['platform_version'].to_f <= 6.8
-#      provider Chef::Provider::Service::Init::Redhat
-#    else
-#      provider Chef::Provider::Service::Systemd
-#    end
-#  when 'ubuntu'
-#      provider Chef::Provider::Service::Upstart
-#  end
-#  supports start: true, restart: true, stop: true, status: true
-#  action :nothing
-#end
-
BREAKS HERE
-  owner 'root'
-  group 'root'
-  owner 'root'
-  group 'root'
BREAKS HERE
-default['stash']['tomcat']['keyAlias']     = "tomcat"
-default['stash']['tomcat']['keystoreFile'] = "#{node['stash']['home_path']}/.keystore"
-default['stash']['tomcat']['keystorePass'] = "changeit"
-default['stash']['tomcat']['port']         = "8085"
-default['stash']['tomcat']['ssl_port']     = "8443"
BREAKS HERE
-# TODO: This is deprecated. Remove after sysctl >= 0.6.0
-if cookbook_version('sysctl', '< 0.6.0')
-  log 'DEPRECATION: You use an older version of chef-sysctl. chef-os-hardening will not support this version in future releases.' do
-    level :warn
-  end
-  include_recipe 'sysctl'
-else
-  include_recipe 'sysctl::apply'
-end
-
-# Conditional handling of procps reload
-# TODO: This is deprecated. Remove after sysctl >= 0.6.0
-# ignore FC023: @see https://github.com/acrmp/foodcritic/issues/151
-if cookbook_version('sysctl', '< 0.6.0') # ~FC023
-  case node['platform_family']
-  when 'debian'
-    service_provider = node['platform'] == 'ubuntu' ? Chef::Provider::Service::Upstart : nil
-    service 'procps' do
-      provider service_provider
-      supports restart: false, reload: false
-      action [:enable, :start]
-    end
-  end
-end
BREAKS HERE
-  username 'foo'
BREAKS HERE
-        Chef::Log.debug("#{new_resource.pid} exists? #{pid_exists}")
-
-
-
-          Chef::Log.debug("Unique fields: #{new_resource.unique_fields}")
-          Chef::Log.debug(
-            "#{new_resource.factory_pid} instances: #{instances}"
-          )
-      def align_same_property_instances(candidates)
-        # Since all candidates are the same use the fist one as a diff source
-        diff = property_diff(
-          candidates.first['properties'],
-          new_resource.properties,
-          new_resource.append
-        )
-        Chef::Log.debug("Diff: #{diff}")
-        if diff.empty?
-          Chef::Log.info("#{new_resource.factory_pid} is already configured")
-        else
-          case
-          when candidates.length == new_resource.count
-            update_existing_instances(candidates, diff)
-          when candidates.length < new_resource.count
-            # Update existing instances
-            update_existing_instances(candidates, diff)
-
-            # Create missing instances
-            create_missing_instances(new_resource.count - candidates.length)
-          when candidates.length > new_resource.count
-            if new_resource.enforce_count
-              # Remove redundant configs
-              count = candidates.length - new_resource.count
-              delete_redundant_instances(candidates[0..count - 1])
-
-              # Update those that left
-              update_existing_instances(candidates[count..-1], diff)
-            else
-              Chef::Application.fatal!(
-                "Expected #{new_resource.count} #{new_resource.factory_pid} "\
-                "instance(s), but found #{candidates.length} possible "\
-                'candidates. enforce_count is off, so please either turn it '\
-                'on or update unique_fields property'
-              )
-            end
-          align_same_property_instances(candidates)
BREAKS HERE
-)/
-IPV4_ADDR ||= /((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])/
-IPV6_CIDR ||= /s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]d|1dd|[1-9]?d)(.(25[0-5]|2[0-4]d|1dd|[1-9]?d)){3}))|:)))(%.+)?s*/
-IPV4_CIDR ||= %r{(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))}
BREAKS HERE
-
-
BREAKS HERE
-when "ubuntu", "debian" 
-  service "postfix" do
-   action :enable
-  end
-when "redhat", "centos"
-  service "postfix" do
-    action :nothing
-  end
BREAKS HERE
-            }.to raise_error(Berkshelf::BerkshelfError, "Invalid options for Cookbook Source: 'invalid_opt'.")
-            }.to raise_error(Berkshelf::BerkshelfError, "Invalid options for Cookbook Source: 'invalid_one', 'invalid_two'.")
BREAKS HERE
-class Chef::Recipe::GPPCheck
-          log file + ": gpgcheck=1 not properly configured" do
-            level :error
-            only_if { pattern.match(line) }
BREAKS HERE
-        command_prefix: 'jenkins.launcher.prefixStartSlaveCmd',
-        command_suffix: 'jenkins.launcher.suffixStartSlaveCmd',
BREAKS HERE
-  before { ops_database_stubs }
-    before do
-      @chef_run = ::ChefSpec::Runner.new(::UBUNTU_OPTS) do |n|
-        n.set['mysql'] = {
-        }
-      end
-      @chef_run.converge 'openstack-ops-database::mysql-server'
-      expect(@chef_run.node['mysql']['bind_address']).to eql '127.0.0.1'
-      expect(@chef_run.node['mysql']['tunable']['innodb_thread_concurrency']).to eql '0'
-      expect(@chef_run.node['mysql']['tunable']['innodb_commit_concurrency']).to eql '0'
-      expect(@chef_run.node['mysql']['tunable']['innodb_read_io_threads']).to eql '4'
-      expect(@chef_run.node['mysql']['tunable']['innodb_flush_log_at_trx_commit']).to eql '2'
-      expect(@chef_run.node['mysql']['tunable']['skip-name-resolve']).to eql true
-      expect(@chef_run).to include_recipe 'openstack-ops-database::mysql-client'
-      expect(@chef_run).to include_recipe 'mysql::server'
-      file = @chef_run.template '/etc/mysql/my.cnf'
-      before do
-        @connection = {
-          host: 'localhost',
-          username: 'root',
-          password: 'server-root-password'
-        }
-      end
-        resource = @chef_run.find_resource(
-          connection: @connection,
-        resource = @chef_run.find_resource(
-          connection: @connection,
-        resource = @chef_run.find_resource(
-          connection: @connection,
BREAKS HERE
-            @lsb_init.variables(:options => new_resource.options)
BREAKS HERE
-  ssh_known_host_entries hosts
-  ssh_known_hosts_from_node_search("keys_ssh:* AND -name:#{node.name}")
BREAKS HERE
-  template '/usr/lib/systemd/system/nrpe.service' do
-    owner 'root'
-    group 'root'
-    mode '0644'
-    notifies :restart, "service[#{node['nrpe']['service_name']}]"
-    only_if  { node['init_package'] == 'systemd' }
-  template "/etc/init.d/#{node['nrpe']['service_name']}" do
-    owner 'root'
-    group 'root'
-    mode  '0754'
-  owner 'root'
BREAKS HERE
-license_path = "#{installer_prefix_dir}/dynatrace/server/conf/dtlicense.key"
BREAKS HERE
-  in_current_dir { FileUtils.rm_f(Berkshelf::Lockfile::DEFAULT_FILENAME) }
BREAKS HERE
-          property :verify, [TrueClass, FalseClass], 
-                            default: true,
-                            desired_state: false
BREAKS HERE
-      :database => deploy[:database],
BREAKS HERE
-    expect(chef_run).not_to run_execute("ntpd -q -u #{node['ntp']['var_owner']}")
-      expect(chef_run).to run_execute("ntpd -q -u #{node['ntp']['var_owner']}")
BREAKS HERE
-version '1.8.2'
BREAKS HERE
-          :cert_path, arg,
BREAKS HERE
-        endpoint_adminurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s',
-        endpoint_internalurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s',
-        endpoint_publicurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s'
-          endpoint_adminurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s',
-          endpoint_internalurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s',
-          endpoint_publicurl: 'http://127.0.0.1:8776/v2/%(tenant_id)s'
BREAKS HERE
-  template "/etc/resolv.conf" do
-    source "resolv.conf.erb"
-    owner "root"
-    group "root"
BREAKS HERE
-else
-default[:passenger][:version] = '3.0.9'
-  default[:passenger][:module_path] = "#{passenger[:root_path]}/ext/apache2/mod_passenger.so"
BREAKS HERE
-        .with_content('unicorn_rails --env staging')
-  context 'Mysql' do
BREAKS HERE
-          # By default all fields should be considered as unique, so fill that
-          # in if user didn't set anything explicitly
-        info['properties'].select { |k, v| v['is_set'] == true }
-          # Create missing instances
-          missing_count = new_resource.count - ideal_copies.length
-
-          converge_by(
-            "Create #{missing_count} #{new_resource.factory_pid} instance(s)"
-          ) do
-            missing_count.times do
-              create_config(
-                new_resource.instance,
-                new_resource.username,
-                new_resource.password,
-                new_resource.properties,
-                new_resource.factory_pid
-              )
-            end
-          end
-          # Delete redundant instances if enforce_count is enabled
-            to_delete = ideal_copies.length - new_resource.count
-
-            converge_by(
-              "Delete #{to_delete} #{new_resource.factory_pid} instance(s) "\
-              'due to enforce_count'
-            ) do
-              to_delete.times do |i|
-                delete_config(
-                  new_resource.instance,
-                  new_resource.username,
-                  new_resource.password,
-                  ideal_copies[i]['pid']
-                )
-              end
-            end
-              "#{new_resource.count} instance(s) of "\
-              "#{new_resource.factory_pid} is/are expected, but found "\
-              "#{ideal_copies.length} of them. enforce_count is off, so "\
-              'please either turn it on to get rid of redundant configs or '\
-              'update unique_fields property'
-      def greater_than_zero_score_factories(rank)
-        if candidates.uniq { |c| property_checksum(c) }.length == 1
-          diff = property_diff(
-            candidates.first['properties'],
-            new_resource.properties,
-            new_resource.append
-          )
-          Chef::Log.debug("Diff: #{diff}")
-
-          if diff.empty?
-            Chef::Log.info("#{new_resource.factory_pid} is already configured")
-          else
-            case
-            when candidates.length == new_resource.count
-              converge_by(
-                "Update #{new_resource.count} instance(s) of "\
-                "#{new_resource.factory_pid}"
-              ) do
-                diff = new_resource.properties if new_resource.apply_all
-                candidates.each do |c|
-                  update_config(
-                    new_resource.instance,
-                    new_resource.username,
-                    new_resource.password,
-                    c,
-                    diff
-                  )
-                end
-              end
-            when candidates.length < new_resource.count
-              # Update existing instances
-              converge_by(
-                "Update #{candidates.length} instance(s) of "\
-                "#{new_resource.factory_pid}"
-              ) do
-                diff = new_resource.properties if new_resource.apply_all
-                candidates.each do |c|
-                  update_config(
-                    new_resource.instance,
-                    new_resource.username,
-                    new_resource.password,
-                    c,
-                    diff
-                  )
-                end
-              end
-
-              # Create missing instances
-              missing_count = new_resource.count - candidates.length
-
-              converge_by(
-                "Create #{missing_count} instance(s) of "\
-                "#{new_resource.factory_pid}"
-              ) do
-                missing_count.times do
-                  create_config(
-                    new_resource.instance,
-                    new_resource.username,
-                    new_resource.password,
-                    new_resource.properties,
-                    new_resource.factory_pid
-                  )
-                end
-              end
-            when candidates.length > new_resource.count
-              if new_resource.enforce_count
-                # Remove redundant configs
-                to_delete = candidates.length - new_resource.count
-
-                converge_by(
-                  "Delete #{to_delete} instances of "\
-                  "#{new_resource.factory_pid} due to enforce_count"
-                ) do
-                  to_delete.times do |i|
-                    delete_config(
-                      new_resource.instance,
-                      new_resource.username,
-                      new_resource.password,
-                      candidates[i]['pid']
-                    )
-                  end
-                end
-
-                # Update those that left
-                converge_by(
-                  "Update #{new_resource.count} instance(s) of "\
-                  "#{new_resource.factory_pid}"
-                ) do
-                  diff = new_resource.properties if new_resource.apply_all
-                  new_resource.count.times do |i|
-                    update_config(
-                      new_resource.instance,
-                      new_resource.username,
-                      new_resource.password,
-                      candidates[i + to_delete],
-                      diff
-                    )
-                  end
-                end
-              else
-                Chef::Application.fatal!(
-                  "#{new_resource.count} instance(s) of "\
-                  "#{new_resource.factory_pid} is/are expected, but "\
-                  "found #{candidates.length} possible candidates. "\
-                  'enforce_count is off, so please either turn it on to '\
-                  'get rid of redundant configs or update unique_fields '\
-                  'property'
-                )
-              end
-            end
-          end
-            greater_than_zero_score_factories(rank)
-        if  new_resource.factory_pid
BREAKS HERE
-  provider: Chef::Provider::JenkinsUser,
BREAKS HERE
-default['openstack']['block-storage']['rbd_pool'] = 'rbd'
-default['openstack']['block-storage']['rbd_user'] = 'cinder'
-default['openstack']['block-storage']['rbd_secret_uuid'] = nil
-# make this a valid uuid for when node['openstack']['developer_mode'] = true
-default['openstack']['block-storage']['rbd_secret_name'] = '00000000-0000-0000-0000-000000000000'
-default['openstack']['block-storage']['rbd_key_name'] = 'openstack_image_cephx_key'
BREAKS HERE
-  command  %Q|sed -i "s/^rpc_backend = quantum.openstack.common.rpc.impl_qpid//g" /etc/quantum/quantum.conf|
BREAKS HERE
-  escaped_filter = filter.gsub('{', '{{').gsub('}', '}}')
BREAKS HERE
-    %w(arch) =>  [:restart],
BREAKS HERE
-      opts << '--ip-masq=true' if ip_masq
-      opts << '--ipv6=true' if ipv6
-      opts << '--selinux-enabled=true' if selinux_enabled
BREAKS HERE
-      :database => database_info,
BREAKS HERE
-db_endpoint = node['openstack']['endpoints']['db']
-super_password = get_password 'user', node['openstack']['db']['root_user_key']
-node.override['mariadb']['mysqld']['bind_address'] = db_endpoint.host
-unless db_endpoint.host == '127.0.0.1' || db_endpoint.host == 'localhost'
BREAKS HERE
-default['rabbitmq']['deb_package'] = "rabbitmq-server_#{node['rabbitmq']['version']}-1_all.deb"
-default['rabbitmq']['deb_package_url'] = "https://www.rabbitmq.com/releases/rabbitmq-server/v#{node['rabbitmq']['version']}/"
-                                         "rabbitmq-server-#{node['rabbitmq']['version']}-1.el7.noarch.rpm"
-                                         "rabbitmq-server-#{node['rabbitmq']['version']}-1.el6.noarch.rpm"
-  default['rabbitmq']['rpm_package'] = "rabbitmq-server-#{node['rabbitmq']['version']}-1.suse.noarch.rpm"
-default['rabbitmq']['rpm_package_url'] = "https://www.rabbitmq.com/releases/rabbitmq-server/v#{node['rabbitmq']['version']}/"
-default['rabbitmq']['config'] = "#{node['rabbitmq']['config_root']}/rabbitmq"
BREAKS HERE
-
BREAKS HERE
-  source "solr.initd.erb"
BREAKS HERE
-      unless data['type'] == 'nfs' || data['type'] == 'glusterfs'
BREAKS HERE
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then node['jira']['arch'] == 'x64' ? '55161ba22f51b168fc33e751851de099911b5f648b02c43d77b37ed4f3d88586' : '9d57ecb6d487754b965a0ffed8b644122fef500af0c068ddb755a4685df21ca4'
-    when '5.2.11' then node['jira']['arch'] == 'x64' ? 'a3ac923ff8563d178853222f4ebf246f78af6d1e1f4ea503b3b6443ecbdc9258' : '336297395d6cb0f0b80503bb88e545f441608a31d9af492b27fa4e4045e04c0f'
-    when '6.0' then node['jira']['arch'] == 'x64' ? '971f0d6242eb8aa02e47b086428d1f1fe46ea6c7a0859412303be2cc909487c7' : '0d7e6dc83e4fbca5b5ec5a62d40ac18c6b81d9dda470251e954a0035bee328e6'
-    when '6.0.1' then node['jira']['arch'] == 'x64' ? '47f0e16cdce30900135e425e978359db13fb5b913d8c8aadcfa7e6b4870c30c2' : '651b5bac996575c153e0dd2310a390b403aa28bd0c3a0d197dcdf5772155df65'
-    when '6.0.2' then node['jira']['arch'] == 'x64' ? '34f462e24dc9dea5a413d6a287b513624dec4a6e8ad37240a7dd586e43c6402f' : '8b286e809c42bb80c5a98bc9440cfabb219ec01bbdd895005e866941ea5662e0'
-    when '6.0.3' then node['jira']['arch'] == 'x64' ? 'a50ba6428c8692948a26ff1098538f7c4968b9b55d801d6a810b6a80228ad1d8' : '819626e6882dd2fd3aa763d1ae765783a34a20e51fb71d6b0438b05729b9541d'
-    when '6.0.4' then node['jira']['arch'] == 'x64' ? '8a990fa09cb8c7952195a0adb3a1139cfce3f4a59ed0c97bf9d693091ec3dd6e' : '24067f9cc9629e4abc69d53be870c91a40246dd15c8313464053c02b548dbcbc'
-    when '6.0.5' then node['jira']['arch'] == 'x64' ? '470de9a8a3f14c9cf5cde0b950c7cdfc4019c9cb55f1566ada136a2b8737a7c5' : '565385605da0fa5e4158e1e42cedcb2bda3a40f18732594f077a7a921ac86354'
-    when '6.0.6' then node['jira']['arch'] == 'x64' ? '0c62209c7564b64b6cbd176804169959df13817a8d2e0285583ba35bc4131541' : '95e692b444b97c69c18326318d76b3452aaa04b6a4883a16aa14ef84adb03c29'
-    when '6.0.7' then node['jira']['arch'] == 'x64' ? '48eb2264ddc48b03edd2b0c3f26f2de2cb281e76e1892e8fb62cb015556a8943' : 'fcd6b1621cf64bd0668b978e51092ec787773f842b8124472a01c96b2e67cb7b'
-    when '6.0.8' then node['jira']['arch'] == 'x64' ? 'a3fefd20ba4b14bb6d99877f645439f8f392adc819bea8b34b2f668c110fa3c5' : 'f6ea152b9bdf7eb834a7c467e52a1cc42225d8b9e2c35a0b6248d6eac31068be'
-    when '6.1' then node['jira']['arch'] == 'x64' ? '4bae29a79cc76b6845be5149bfa18a82918a0bfcfa7bd621514bc73cdfa7690f' : 'c484ffcb4f9fb14e490273d655f6659bcf8de3b0b74439245408099bc32b70ac'
-    end
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then 'a8ef62077f87d9f22d60c3e558436b11cf5e8664d4a417f622a33257d46ba3f1'
-    when '5.2.11' then '7ea1a106e9d70f6d9a53a4c7d49a975cdfeadbae75f6452542e192c897f1faf0'
-    when '6.0' then 'bdd47d3e30827e445288faf211992d7e96170ebae11e2451cc0362afe8de6ab1'
-    when '6.0.1' then '367dcb92f2e006cda86997b363f0835d3bfd75d4492404c1a496aad1251bdf9b'
-    when '6.0.2' then '702d0e67fce623de9d7c3da880d7b6dc810faa5e10ae63b6189d10d01e708fbe'
-    when '6.0.3' then '3c917b8c828c54785b4dec36a073a9c587ed71669ff5c6e792d7f6f3ac338bb6'
-    when '6.0.4' then '39e89c69f539c0e0404ebeffa40fc784129a221ca2a1c2da535691b865d706a9'
-    when '6.0.5' then '2ce8e65247dbb5d09e3b7f54e9ee827459229c2d52b73ec60ee8c2e557b6127b'
-    when '6.0.6' then '9d037c9666cfb606308be3af1f70447db978ecbe8032f0d0961cbcad2b848b79'
-    when '6.0.7' then '4bc901c9e6d01291936cd2c1de9692582edfbc476ec256865cc37e936813e899'
-    when '6.0.8' then '410d77cb66f9a3972609a41f407ca2dc5bfaee41c477f4b06f90a9588f9546f2'
-    when '6.1' then '51131e1c7a453468b14dccf86560b8e023dc840fdc9f44a88a89793ca76cd54f'
-    end
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then 'e3ef2c555accfa40399b287a46c7ffd75b3d87d9a691b33e2b9cd359f7a3d433'
-    when '5.2.11' then 'b372a1c1e7f7983a3413adcaa0f027b03c6f986cc5c7d833f52488350dc65c93'
-    when '6.0' then '6a46035d2fd9b9425df631d2fdeca13ab2e36814de30a3a50b88a234eabd3f66'
-    when '6.0.1' then 'd6b63f05d5ce2530592e5e174411a9a5104007e92a84a3f032f73526efabb10f'
-    when '6.0.2' then 'f8060b1dfc059025652bbc87d5f2440012024aa97b018cf269410ac5866f5b6c'
-    when '6.0.3' then '768b73d58fac78b83495cc6918c28e60d68417f4a6d2ceb70ccc7927f8cff6b5'
-    when '6.0.4' then '8214851759cd5b6034d5064c4f181bc36eaeaa54421d3206a49c42d0ef55640f'
-    when '6.0.5' then '55f06fae0525291b18e65da2c82a26aa2f4d300f6830fd08554eab89b5081e07'
-    when '6.0.6' then '54f516dc835d7e4f99409ebf39095960273b45dec98f86c5dc6923eb5cc8f258'
-    when '6.0.7' then 'ea1a60a2585dcb97ddf0e9dc0c4755e842bed40b2ae11ac0e9044412b4bae6b0'
-    when '6.0.8' then '82b92df5337a7f0fd4c8aa95a56594b675050f3b066a8dec0563dccebe15fd30'
-    when '6.1' then '2377e4c3546760773d8e2f9d22d5d7bafd05980bf27b8f6d22a7126863d9da9a'
-    end
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then node['jira']['arch'] == 'x64' ? '95841d1b222db63c5653b81583837a5d90e315a2ff2661534b310113afcff33f' : '05335145554cc446adfb90e318139f9408b41cacb57d90d0e11b788718ed8734'
-    when '5.2.11' then node['jira']['arch'] == 'x64' ? 'ad4a851e7dedd6caf3ab587c34155c3ea68f8e6b878b75a3624662422966dff4' : '7088a7d123e263c96ff731d61512c62aef4702fe92ad91432dc060bab5097cb7'
-    when '6.0' then node['jira']['arch'] == 'x64' ? '915b773c9870ebacbee4712e26d1c9539b48210b6055cb1b2d81e662deae2e60' : '3967f8f663c24ff51bf30300ae0f2fb27320c9b356ed4dbf78fce7cc1238eccb'
-    when '6.0.1' then node['jira']['arch'] == 'x64' ? '4e56ef7980b8f3b5b434a7a440d663b9d08e5588d635214e4434eabc3a8d9623' : 'e383961667e6ef6b5bc387123fa76620a5bdf71413283de5b79cd0ae71248922'
-    when '6.0.2' then node['jira']['arch'] == 'x64' ? 'fee8fe6804ace532abb805eea5ae0df342526eaf45b2c3e8e34978c97b5aa3aa' : 'bfa7d8731ef2ec5b7e802c119d5a68b1b93505d904c831801236eacff9fa1f5e'
-    when '6.0.3' then node['jira']['arch'] == 'x64' ? 'cdbd679e70097120c0083e9e0949c66b842742a3a4ccbae0db01b81d9e9fce9e' : 'cda9499247c43c0f812bd2924e569ba3dd08c088e03455ec9c1f79bd30c1509a'
-    when '6.0.4' then node['jira']['arch'] == 'x64' ? 'd7b845cb21461f032e1563e40f7daa220277809c53e14e4342728f04d0fa039a' : '4f60c69a13d3d66b0864849d9d3d5a8dfe240830b332cdd8848ae14055709984'
-    when '6.0.5' then node['jira']['arch'] == 'x64' ? '0826bf54c7765b053e571d3118b8b48f899d60a76518dc4df34da14a66930e37' : '10f9cc9ebb702f01d44f315eabfa4bc1af75dadf161a2cf6d5439c720d604fed'
-    when '6.0.6' then node['jira']['arch'] == 'x64' ? 'bf7145fbbbe0446f3a349e85b7b1277cab3cbe1dfc85029a2fb974f8fac3be59' : '030f25f6ab565d66b9f390dced8cafafe0d338ea792d942a6d1901888fa91b7d'
-    when '6.0.7' then node['jira']['arch'] == 'x64' ? '89da53718d80aad4680e48559ff126ffb35addccfed556c022d5450fb8e44cbb' : '159f143a1d15c9764b05f0b07f5ea24e4afe851f276ba5290eadabcf5f404a53'
-    when '6.0.8' then node['jira']['arch'] == 'x64' ? 'b7d14d74247272056316ae89d5496057b4192fb3c2b78d3aab091b7ba59ca7aa' : 'ad1d17007314cf43d123c2c9c835e03c25cd8809491a466ff3425d1922d44dc0'
-    when '6.1' then node['jira']['arch'] == 'x64' ? '72e49cc770cc2a1078dd60ad11329508d6815582424d16836efd873f3957e2c8' : 'c879e0c4ba5f508b4df0deb7e8f9baf3b39db5d7373eac3b20076c6f6ead6e84'
-    end
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then '80e05e65778ce2e3d91422da9d30a547e174fe2b9ba920b7dcdff78e29f353da'
-    when '5.2.11' then '8d18b1da9487c1502efafacc441ad9a9dc55219a2838a1f02800b8a9a9b3d194'
-    when '6.0' then '791a8a4a65e40cd00c1ee2a3207935fbcc2c103416e739ad4e3ed29e39372383'
-    when '6.0.1' then '492e46119310f378d7944dea0a92c470f0d0b794219d6647a92ea08f8e99f80e'
-    when '6.0.2' then '89b0178bf33488040c032d678ffcdeebc9b9d4565599a31b35515e3aaa391667'
-    when '6.0.3' then '0f94b9d31b8825e91c05e06538dce5891801b83549adbc1dfd26f5b9100c24cf'
-    when '6.0.4' then 'ca0f80c36ab408131e283b5c00aead949ce37c4ef8a870b2726eb55882ea6821'
-    when '6.0.5' then '9050297a28059468a9a3ddfcc8b788aaf62210b341f547d4aebbab92baa96dd3'
-    when '6.0.6' then '27e699692e107a9790926d5f6fb0ddb89a1bd70e1d6877ce23991c0701495d67'
-    when '6.0.7' then '6de5ac1a06116de2c95d5944eab1da416170e8b6bea3a0a7a641b52836100946'
-    when '6.0.8' then '2ca0eb656a348c43b7b9e84f7029a7e0eed27eea9001f34b89bbda492a101cb6'
-    when '6.1' then 'e63821f059915074ff866993eb5c2f452d24a0a2d3cf0dccea60810c8b3063a0'
-    end
-    default['jira']['checksum'] = case node['jira']['version']
-    when '5.2' then '521f0f60500b8f9e1700af3024e5d51a378e3a63a3c6173a66ae298ddadb3d4b'
-    when '5.2.11' then '11e34312389362260af26b95aa83a4d3c43705e56610f0f691ceaf46e908df6a'
-    when '6.0' then '53583c56e6697201813eca07ca87c0d2010359f68d29f6b20b09d1ecad8c185b'
-    when '6.0.1' then '525f62eee680e3a0f6e602dbb8c9ed83b7e17c730009530dd1a88f175e2bed85'
-    when '6.0.2' then '083d055b86b86df485829d4d8848a4354818b4ee410aff8c9c3bfa300de61f9a'
-    when '6.0.3' then 'e1038bfba3365ccd85d1ba86bb9c5c36591d56637e5f9acab9fa01654386c588'
-    when '6.0.4' then 'f994ed71ea29764187a1cb1eb12d726182cd404d0a77dfb585ad70789d75e80f'
-    when '6.0.5' then '4a7eda7da278be778add316bd783a5564ae931f7d77ad6078217dd3d8b49f595'
-    when '6.0.6' then 'd6ce6bfe41275887cf6004827916b43d29a9c1b8a1b2029c18d9a4e54c9b199b'
-    when '6.0.7' then 'd75d798021038584a8f987142ac161c2d467329a430a3573538d8600d8805005'
-    when '6.0.8' then '4bcee56a7537a12e9eeec7a9573f59fd37d6a631c5893152662bef2daa54869d'
-    when '6.1' then '7beb69e3b66560b696a3c6118b79962614d17cd26f9ff6df626380679c848d29'
-    end
BREAKS HERE
-#
-# Cookbook Name:: dynatrace
-# Attributes:: server_update
-#
-# Copyright 2016, Dynatrace
-#
-
-# The file URL of the Dynatrace server update
-default['dynatrace']['server']['linux']['update']['update_file_url'] = nil
-
-# A REST URL to update Dynatrace server
-default['dynatrace']['server']['linux']['update']['rest_update_url'] = 'https://localhost:8021/rest/management/installjobs'
-# A REST URL to check Dynatrace server version after update
-default['dynatrace']['server']['linux']['update']['rest_version_url'] = 'https://localhost:8021/rest/management/version'
-
-default['dynatrace']['server']['linux']['update']['user'] = 'admin'
-default['dynatrace']['server']['linux']['update']['passwd'] = 'admin'
-
-# Max. time to wait for the update to be applied after uploading it to the server (in seconds)
-default['dynatrace']['server']['linux']['update']['update_status_timeout'] = 300
-# Interval between update status checks (in seconds)
-default['dynatrace']['server']['linux']['update']['update_status_retry_sleep'] = 5
-
-# Attributes set internally by the recipe
-default['dynatrace']['server']['linux']['update']['isrestartrequired'] = true
-default['dynatrace']['server']['linux']['update']['jobid'] = nil
BREAKS HERE
-
-    include Windows::Error
-    include Windows::Registry
-    include Windows::Process
-    include Windows::Security
-
BREAKS HERE
-# Cookbook Name:: openldap
-# Copyright 2008-2016, Chef Software, Inc.
BREAKS HERE
-# Copyright 2015, Dynatrace
-  ruby_block "#{name}" do
-    block do
-      kernel = node['kernel']['machine'].include?('64') ? '64' : ''
-    end
-  end
-
BREAKS HERE
-# Copyright 2012-2013, Opscode, Inc. <legal@opscode.com>
-#
BREAKS HERE
-golang_package       = 'go1.5.2'
BREAKS HERE
-      "http://packages.treasuredata.com/#{major}/ubuntu/#{dist}/"
BREAKS HERE
-if %w[rhel fedora centos].include?(node['platform'])
-  source = 'etc_main.cf_rhel.erb'
-end
-if %w[debian ubuntu].include?(node['platform'])
-  source = 'etc_main.cf_ubuntu.erb'
-end
BREAKS HERE
-          !(dns.nil? || dns.empty?) ||
-          !(dns_search.nil? || dns_search.empty?) ||
-          !(mac_address.nil? || mac_address.empty?) ||
-          !(extra_hosts.nil? || extra_hosts.empty?)
-        raise Chef::Exceptions::ValidationFailed, 'Cannot specify hostname, dns, dns_search, mac_address, or extra_hosts when network_mode is host.'
BREAKS HERE
-  if new_resource.socket
-  elsif !locations['/']['proxy_pass']
-  if type == :dynamic && options['try_files']
-    locations.each do |name, location|
-      options['try_files'] << " #{name}" if name.index('@') == 0
-    end
-  end
-
-  execute "test-nginx-conf" do
-    command "nginx -t"
-    action :nothing
-    notifies :restart, resources(:service => "nginx"), new_resource.reload
-  end
-
-  link "#{node['nginx']['dir']}/sites-enabled/#{new_resource.name}" do
-    to "#{node['nginx']['dir']}/sites-available/#{new_resource.name}"
-    notifies :run, resources(:execute => "test-nginx-conf"), :immediately
BREAKS HERE
-version          '9.0.0'
-depends          'apt', '~> 2.3.8'
-depends          'selinux', '~> 0.7.2'
BREAKS HERE
-if File.exists? node['sumologic']['installDir']
-    Chef::Log.info "Sumo Logic Collector found."
-	# If collector is already in sync source mode, just uncomment these following lines to update the sources
-    #include_recipe 'sumologic-collector::sumoconf'
-	#if node['sumologic']['use_json_path_dir'] == true 
-	#	# use the recipe sumojsondir if your source configurations are in a directory 
-	#	include_recipe 'sumologic-collector::sumojsondir'
-	#else
-	#	# use the recipe sumojson if your source configurations are in a single json file
-	#	include_recipe 'sumologic-collector::sumojson'
-	#end
-    #include_recipe 'sumologic-collector::restart'
-    Chef::Log.info "Installing Sumo Logic Collector..."
-    include_recipe 'sumologic-collector::sumoconf'
-	if node['sumologic']['use_json_path_dir'] == true 
-		# use the recipe sumojsondir if your source configurations are in a directory 
-		include_recipe 'sumologic-collector::sumojsondir'
-	else
-		# use the recipe sumojson if your source configurations are in a single json file
-		include_recipe 'sumologic-collector::sumojson'
-	end
-    include_recipe 'sumologic-collector::install'
-	# The following recipe will clean up sumo.conf and the json configuration file(s). Use it if you only need to setup the collector once. 
-    #include_recipe 'sumologic-collector::cleanup'
BREAKS HERE
-every_enabled_application do |application, _app_data|
BREAKS HERE
-    stub_command("nc -z -w5 localhost 5000 && nc -z -w5 localhost 5043").and_return(true)
BREAKS HERE
-    source "/root/rpmbuild/RPMS/runit-2.1.1.rpm"
BREAKS HERE
-default['chef_client']['handler']['slack']['username']   = node.name
BREAKS HERE
-default['openstack']['apt']['components'] = ["precise-updates/#{node['openstack']['release']}", 'main']
BREAKS HERE
-
-swap_mounts = node['filesystem2']['by_device'].to_hash.select do |_k, v|
-  v['fs_type'] == 'swap'
-end
-
-case swap_mounts.count
-when 0
-  Chef::Log.debug('No swap mounts found, nothing to do here.')
-  return
-when 1
-  swap_device = swap_mounts.keys[0]
-  Chef::Log.debug("Found swap device: #{swap_device}")
-  fail 'More than one swap mount found, this is not right.'
-end
-
-if node.systemd?
-  swap_unit = FB::Systemd.path_to_unit(swap_device, 'swap')
-
-  service 'mask swap unit' do # ~FC038
-    not_if { node['fb_swap']['enabled'] }
-    service_name swap_unit
-    action [:stop, :mask]
-  end
-
-  service 'unmask swap unit' do # ~FC038
-    only_if { node['fb_swap']['enabled'] }
-    service_name swap_unit
-    action [:unmask, :start]
-  end
-end
-
-whyrun_safe_ruby_block 'validate swap size' do
-  only_if do
-    node['fb_swap']['size'] && node['fb_swap']['size'].to_i < 1024
-  end
-  block do
-    fail 'You asked for a swap device smaller than 1 MB. This is probably ' +
-         'not what you want. Please make it larger or disable swap altogether.'
-  end
-end
-
-whyrun_safe_ruby_block 'validate resize' do
-  only_if do
-    node['fb_swap']['enabled'] && node['fb_swap']['size'] &&
-    node['memory']['swap']['total'] != '0kB' &&
-    (node['fb_swap']['size'].to_i - 4) > node['memory']['swap']['total'].to_i
-  end
-  block do
-    fail 'fb_swap does not support increasing the size of a swap device'
-  end
-end
-
-execute 'resize swap' do
-  only_if do
-    node['fb_swap']['enabled'] && node['fb_swap']['size'] &&
-    # actual size is always desired - 4
-    (node['fb_swap']['size'].to_i - 4) < node['memory']['swap']['total'].to_i
-  end
-  command lazy {
-    uuid = node['filesystem2']['by_device'][swap_device]['uuid']
-    size = node['fb_swap']['size']
-    "swapoff #{swap_device} && mkswap -U #{uuid} #{swap_device} #{size} && " +
-    "swapon #{swap_device}"
-  }
-end
-
-execute 'turn swap on' do
-  only_if do
-    node['memory']['swap']['total'] == '0kB' &&
-    node['fb_swap']['enabled']
-  end
-  command '/sbin/swapon -a'
-end
-
-execute 'turn swap off' do
-  only_if do
-    node['memory']['swap']['total'] != '0kB' &&
-    !node['fb_swap']['enabled']
-  end
-  command '/sbin/swapoff -a'
BREAKS HERE
-      if current_credentials
-        @current_resource.password(current_credentials[:password])
-      end
BREAKS HERE
-
-# expand snake_case to spaces
-def snake_to_space(string)
-  string.to_s.gsub(/_/, " ")
-#
-# Walk collection for :add rsync_serve resources
-# Build and write the config template
-#
-def write_conf
-  # There has to be a better way to pull the attribs from the resource than this.
-  attr_keys=%w/path comment read_only write_only list uid gid auth_users secrets_file hosts_allow
-              hosts_deny max_connections munge_symlinks use_chroot numeric_ids fake_super
-              exclude_from exclude include_from include strict_modes log_file log_format
-              transfer_logging timeout dont_compress lock_file refuse_options/
-  # Walk the collection, and build a new hash of RsyncServe resources
-  # We will use this hash to build up a template for rsyncd.conf
-  rsync_modules = Hash.new
-  run_context.resource_collection.each do |resource|
-    if resource.is_a? Chef::Resource::RsyncServe and
-       resource.config_path == new_resource.config_path and
-       resource.action == :add
-      rsync_modules[resource.name] ||= Hash.new
-      attr_keys.each do |key|
-        value = resource.send(key)
-        next if value.nil?
-        rsync_modules[resource.name][snake_to_space(key)] = value
-      end
-  global_opts = Hash.new
-  node['rsyncd']['globals'].each do |key, value|
-    next if value.nil?
-    global_opts[snake_to_space(key)] = value
-  service node['rsyncd']['service'] do
-    action [ :nothing ]
-  # TODO: make rsyncd globals a better interface than just attributes?
-  # dunno think the current way is a bit of a cludge (attribute/LWRP mixed)
-  t = template new_resource.config_path do
-    source "rsyncd.conf.erb"
-    cookbook "rsync"
-    owner "root"
-    group "root"
-    mode  0640
-    variables(
-      # globals
-      :globals => global_opts,
-      :modules => rsync_modules
-    )
-    notifies :restart, "service[#{node['rsyncd']['service']}]", :delayed
-  new_resource.updated_by_last_action(t.updated?)
-end
-action :add do
- write_conf
-end
-action :remove do
- write_conf
-end
BREAKS HERE
-bootstrap_token = secret "secrets", "keystone_bootstrap_token"
BREAKS HERE
-if kernel['machine'] =~ /x86_64/
-  case node['sql_server']['version']
-  when '2008R2'
-    default['sql_server']['server']['url']          = 'http://download.microsoft.com/download/D/1/8/D1869DEC-2638-4854-81B7-0F37455F35EA/SQLEXPR_x64_ENU.exe'
-    default['sql_server']['server']['checksum']     = '6840255cf493927a3f5e1d7f865b8409ed89133e3657a609da229bab4005b613'
-    default['sql_server']['server']['package_name'] = 'Microsoft SQL Server 2008 R2 (64-bit)'
-  when '2012'
-    default['sql_server']['server']['url']          = 'http://download.microsoft.com/download/8/D/D/8DD7BDBA-CEF7-4D8E-8C16-D9F69527F909/ENU/x64/SQLEXPR_x64_ENU.exe'
-    default['sql_server']['server']['checksum']     = '7f5e3d40b85fba2da5093e3621435c209c4ac90d34219bab8878e93a787cf29f'
-    default['sql_server']['server']['package_name'] = 'Microsoft SQL Server 2012 (64-bit)'
-  end
-
-else
-  case node['sql_server']['version']
-  when '2008R2'
-    default['sql_server']['server']['url']          = 'http://download.microsoft.com/download/D/1/8/D1869DEC-2638-4854-81B7-0F37455F35EA/SQLEXPR32_x86_ENU.exe'
-    default['sql_server']['server']['checksum']     = '24f75df802a406cf32e854a60b0c340a50865fb310c0f74c7cecc918cff6791c'
-    default['sql_server']['server']['package_name'] = 'Microsoft SQL Server 2008 R2 (32-bit)'
-  when '2012'
-    default['sql_server']['server']['url']          = 'http://download.microsoft.com/download/8/D/D/8DD7BDBA-CEF7-4D8E-8C16-D9F69527F909/ENU/x86/SQLEXPR_x86_ENU.exe'
-    default['sql_server']['server']['checksum']     = '9bdd6a7be59c00b0201519b9075601b1c18ad32a3a166d788f3416b15206d6f5'
-    default['sql_server']['server']['package_name'] = 'Microsoft SQL Server 2012 (32-bit)'
-  end
-
-end
BREAKS HERE
-version           '8.0.0'
BREAKS HERE
-default['cookbook-openshift3']['core_packages'] = %w(libselinux-python wget vim-enhanced net-tools bind-utils git bash-completion bash-completion dnsmasq)
BREAKS HERE
-          File.open(file_name, 'w', ) do |file|
BREAKS HERE
-
-include_recipe "test_helper::fix_permissions"
BREAKS HERE
-      @rules.sort { |a, b| a.code <=> b.code }.
BREAKS HERE
-  default['prometheus']['init_style']                                                     = 'init'
-                                                                                               'web.enable-lifecycle'
-                                                                                            ]
-  default['prometheus']['flags']['web.use-local-assets']                                  = false
BREAKS HERE
-  directory "/etc/rc.conf.d" do
-    owner "root"
-    group "wheel"
-    mode "0644"
-  template "/etc/rc.d/chef-client" do
-    owner "root"
-    group "wheel"
-    variables :client_bin => client_bin
-  template "/etc/rc.conf.d/chef" do
-    notifies :start, "service[chef-client]", :delayed
-  service "chef-client" do
-    supports :status => true, :restart => true
-  log "Hint: chef-client -i #{node["chef_client"]["client_interval"]} -s #{node["chef_client"]["client_splay"]}"
BREAKS HERE
-default['openstack']['block-storage']['volume']['driver'] = 'cinder.volume.driver.ISCSIDriver'
BREAKS HERE
-      link "#{node['cookbook-openshift3']['etcd_generated_certs_dir']}/etcd-#{etcd_master['fqdn']}/ca.crt" do
-        to "#{node['cookbook-openshift3']['etcd_ca_dir']}/ca.crt"
-        link_type :hard
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
-depends 'openstack-image', '>= 16.0.0'
BREAKS HERE
-long_description 'Resources for configuring and provisioning macOS'
-version '1.3.1'
BREAKS HERE
-  gem_package win_gem do
-  gem_package win_gem do
BREAKS HERE
-        puts "\nWARNING: ** Unrepairable Items **\nPlease see #{action_needed_file_path}\n" unless ::File.exist?(action_needed_file_path)
BREAKS HERE
-    node['network']['interfaces'].each do |iface, addrs|
-    lazy { { :ntpd_supports_native_leapfiles => ntpd_supports_native_leapfiles } }
-  supports :status => true, :restart => true
BREAKS HERE
-  if node['cassandra']['dse']
-    package 'apt-transport-https'
-  end
-  
-  
BREAKS HERE
-  command "service NetworkManager stop && service network restart"
BREAKS HERE
-DELETE FROM mysql.db WHERE db LIKE 'test%'
BREAKS HERE
-    attr_accessor :base
-    attr_accessor :version
-
-    def initialize
-      @base = URI.parse(node['terraform']['url_base'])
-      @version = node['terraform']['version']
-    end
-
-      "#{@base}/#{@version}/#{node['terraform']['zipfile']}"
BREAKS HERE
-default['openstack']['db']['bind_interface'] = 'lo'
-
BREAKS HERE
-    %w(rhel fedora) => %w(openssl-devel make tar),
-    'debian' => %w(libssl-dev make tar),
-    'gentoo' => [],
-    'default' => %w(libssl-dev make tar)
-  )
BREAKS HERE
-# 
-# 
-  
-    lambda { 
-  
-    lambda { 
-  
-    lambda { 
-  
-  
-  
-    
-  
-  
-  
-        pp self.methods
-    
-    
BREAKS HERE
-property :install_dir,         default: '/opt/zookeeper'
-  remote_file "#{file_cache_path}/zookeeper-#{version}.tar.gz" do
-    owner    'root'
-    group    'root'
-    mode     '0644'
-    source   "#{mirror}/zookeeper-#{version}/zookeeper-#{version}.tar.gz"
-    checksum new_resource.checksum if property_is_set? :checksum
-  [
-    install_dir,
-    log_dir
-  ].each do |d|
-    directory d do
-      owner     username
-      group     username
-      mode      '0755'
-      recursive true
-    end
-  unless ::File.exist? ::File.join(install_dir, "zookeeper-#{version}", "zookeeper-#{version}.jar")
-    Chef::Log.info "Zookeeper version #{version} not installed. Installing now!"
-
-    execute 'install zookeeper' do
-      cwd     file_cache_path
-      command <<-eos
-tar -C #{install_dir} -zxf zookeeper-#{version}.tar.gz
-chown -R #{user}:#{user} #{install_dir}
-      eos
-    end
BREAKS HERE
-    mac: DevSec::Ssh.get_client_macs(node['ssh']['client']['weak_hmac']),
-    kex: DevSec::Ssh.get_client_kexs(node['ssh']['client']['weak_kex']),
-    cipher: DevSec::Ssh.get_client_ciphers(node['ssh']['client']['cbc_required']),
BREAKS HERE
-keystone = get_settings_by_role("keystone", "keystone")
BREAKS HERE
-default['openstack']['endpoints']['network-api']['path'] = "/v2"
BREAKS HERE
-      only_if "[[ $(#{node['cookbook-openshift3']['openshift_common_client_binary']} get node -l ${key}!=${value} --no-headers -config=#{FOLDER}/admin.kubeconfig | wc -l) > 0 ]]"
BREAKS HERE
-version          "2.8.0"
BREAKS HERE
-if node[:platform] == "windows"
BREAKS HERE
-if Gem::Requirement.new('< 12.13.32').satisfied_by?(Gem::Version.new(Chef::VERSION))
BREAKS HERE
-
-identity_admin_endpoint = endpoint "identity-admin"
-identity_endpoint = endpoint "identity-api"
-  auth_host identity_admin_endpoint["host"]
-  auth_port identity_admin_endpoint["port"]
-  auth_protocol identity_admin_endpoint["scheme"]
-  api_ver identity_admin_endpoint["path"]
-  auth_host identity_admin_endpoint["host"]
-  auth_port identity_admin_endpoint["port"]
-  auth_protocol identity_admin_endpoint["scheme"]
-  api_ver identity_admin_endpoint["path"]
-  auth_host identity_admin_endpoint["host"]
-  auth_port identity_admin_endpoint["port"]
-  auth_protocol identity_admin_endpoint["scheme"]
-  api_ver identity_admin_endpoint["path"]
-  auth_host identity_admin_endpoint["host"]
-  auth_port identity_admin_endpoint["port"]
-  auth_protocol identity_admin_endpoint["scheme"]
-  api_ver identity_admin_endpoint["path"]
-    :keystone_api_ipaddress => identity_endpoint["host"],
-    :service_port => identity_endpoint["port"],
-    :admin_port => identity_admin_endpoint["port"],
-  auth_host identity_admin_endpoint["host"]
-  auth_port identity_admin_endpoint["port"]
-  auth_protocol identity_admin_endpoint["scheme"]
-  api_ver identity_admin_endpoint["path"]
BREAKS HERE
-default['chef_client']['task']['password'] = '' # SYSTEM user does not need a password, but windows_task LWRP wants one
BREAKS HERE
-  class Provider::KibanaWeb < Chef::Provider::LWRPBase
BREAKS HERE
-    'root' => File.join(node['kibana']['base_dir'], 'current', 'src'),
BREAKS HERE
-  user      conf.user
-  nopasswd  true
BREAKS HERE
-  initial_admin_config["name"] = "#{sentry_config["admin_first_name"] sentry_config["admin_last_name"]}"
BREAKS HERE
-  command "[[ $(curl --silent #{node['cookbook-openshift3']['openshift_master_api_url']}/healthz/ready --cacert #{node['cookbook-openshift3']['openshift_master_config_dir']}/ca.crt --cacert #{node['cookbook-openshift3']['openshift_master_config_dir']}/ca-bundle.crt) =~ \"ok\" ]]"
BREAKS HERE
-      node['delivery']['workspace_path']
BREAKS HERE
-    not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-cc-1"
-    not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-sc-1"
-      not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-vb"
-    not_if "egrep '3.[0-9].[0-9]' #{node['eucalyptus']['home-directory']}/etc/eucalyptus/eucalyptus-version || #{disable_proxy} euca-describe-services | egrep 'API_#{uf_ip}'"
-    not_if "#{disable_proxy} euca-describe-services | grep walrus-1"
BREAKS HERE
-    command "cmd /c \'#{client_cmd}\'"
BREAKS HERE
-  user_pass node["nova"]["service_pass"]
BREAKS HERE
-    "cinder_volume_packages" => ["openstack-cinder"],
BREAKS HERE
-    fail 'Attribute ms_dotnet.v4.version is not configured to install .NET4.5 as required for Powershell4' if node['ms_dotnet']['v4']['version'] < '4.5'
BREAKS HERE
-      version = Solve::Solver.satisfy_best(constraint, versions(name)).to_s
-    rescue Solve::Errors::NoSolutionError
BREAKS HERE
-default["keystone"]["syslog"]["use"] = true
BREAKS HERE
-package "autogen"
BREAKS HERE
-  jna = node.cassandra.jna
-    source "#{jna.base_url}/#{jna.jar_name}"
-    checksum jna.sha256sum
BREAKS HERE
-    ssl_chain_combined: cert.chain_combined_path,
BREAKS HERE
-# Brought in these patches, until we get an updated novnc package.
-# This allows vncproxy to run on port 80 and 443 (useful when fronting
-# it with a load balancer.
-# https://github.com/kanaka/noVNC/pull/245
-cookbook_file "/usr/share/novnc/vnc_auto.html" do
-  source "vnc_auto.html"
-  owner "root"
-  group "root"
-  mode 0644
-end
-cookbook_file "/usr/share/novnc/include/ui.js" do
-  source "ui.js"
-  owner "root"
-  group "root"
-  mode 0644
BREAKS HERE
-if node['postfixadmin']['ssl']
-  include_recipe 'apache2::mod_ssl'
-end
-
-  template 'vhost.erb'
-  server_aliases []
-  if node['postfixadmin']['ssl']
-  else
-    port '80'
-  enable true
BREAKS HERE
-default['config_disclaimer']              = '**Note:** This file was automatically created by Pinerolo configuration. If you use its automated setup, do not edit this file directly, but adjust the automation instead.'
BREAKS HERE
-attribute :set_profile_environment, :kind => [TrueClass, FalseClass], :default => true
-attribute :logon_type, :kind => Symbol, :equal_to => [:LogonBatch, :LogonService], :default => :LogonBatch
BREAKS HERE
-  my_command, my_options = command, options
-
-    command "#{my_command} #{my_options}"
BREAKS HERE
-if node["nova"]["apply_novnc_patch"]
-  # Brought in these patches, until we get an updated novnc package.
-  # This allows vncproxy to run on port 80 and 443 (useful when fronting
-  # it with a load balancer.
-  # https://github.com/kanaka/noVNC/pull/245
-  cookbook_file "/usr/share/novnc/vnc_auto.html" do
-    source "vnc_auto.html"
-    owner "root"
-    group "root"
-    mode 00644
-  end
-
-  cookbook_file "/usr/share/novnc/include/ui.js" do
-    source "ui.js"
-    owner "root"
-    group "root"
-    mode 00644
-  end
-end
-
BREAKS HERE
-  class KubeletService < Chef::Resource
BREAKS HERE
-        return unless Dir.exists?(cookbook_files_directory)
-        FileUtils.remove_entry(cookbook_files_directory)
-          make_cookbook_directory(cookbook)
-          generate_archive_file(cookbook)
BREAKS HERE
-when "Ubuntu","Debian"
-when "CentOS"
BREAKS HERE
-        cookbooks_to_clean.each do |name, identifiers|
-          active_revs = active_cbs[cb_name]
BREAKS HERE
-      # disable gpgcheck because the repository is unsigned 
BREAKS HERE
-    class Cookbooks < Base
-
-      add_check "local copy exists" do
-        failure( "exists on server but not locally" ) if item.path.nil?
-      end
-      add_check "server copy exists" do
-        failure( "exists locally but not on server" ) if item.server_version.nil?
-      end
-
-      add_check "versions" do
-        if item.local_version && item.server_version &&
-          item.local_version != item.server_version
-          failure "chef server has #{item.server_version} but local version is #{item.local_version}"
-      add_check "uncommitted changes" do
-        if item.git_repo?
-          result = `cd #{item.path} && git status -s`
-            failure "Uncommitted changes:\n#{result.chomp}"
-      add_check "commits not pushed to remote" do
-        if item.git_repo?
-          result = `cd #{item.path} && git status`
-            failure "ahead of #{$1}"
-      add_check "changes on the server not in the repo" do
-        if item.server_version == item.local_version && !item.bad_files.empty?
-          fail_message = "has a checksum mismatch between server and repo in\n"
-          fail_message << item.bad_files.map { |f| "    #{f}" }.join("\n")
-          failure fail_message 
-      class Cookbook < Struct.new(:name, :path, :server_version, :local_version, :bad_files)
-        def git_repo?
-          self.path && File.exist?("#{self.path}/.git")
-        end
-          item = Cookbook.new.tap do |cookbook|
-            cookbook.name           = name
-            cookbook.path           = cookbook_path(name)
-            cookbook.server_version = server_cookbooks[name]
-            cookbook.local_version  = local_cookbooks[name]
-            cookbook.bad_files      = checksum_compare(name, cookbook.server_version.inspect)
-          end
-      def cookbook_path(name)
-        path = @context.cookbook_path.find { |f| File.exist?("#{f}/#{name}") }
-        path ? File.join(path, name) : nil
-      end
-
-      # TODO: Check files that exist locally but not in manifest on server
-      def checksum_compare(name, version)
-        begin
-          cookbook = chef_rest.get_rest("/cookbooks/#{name}/#{version}")
-        rescue Net::HTTPServerException => e
-          return ["Could not find cookbook #{name} on the server"]
-        end
-
-        bad_files = []
-
-        Chef::CookbookVersion::COOKBOOK_SEGMENTS.each do |segment|
-          cookbook.manifest[segment].each do |manifest_record|
-            path = cookbook_path("#{name}/#{manifest_record["path"]}")
-
-            if path
-              checksum = checksum_cookbook_file(path)
-              bad_files << "#{manifest_record['path']}" if checksum != manifest_record['checksum']
-            else
-              bad_files << "#{manifest_record['path']} does not exist in the repo"
-            end
-          end
-        end
-
-        bad_files
-      end
-
-      def checksum_cookbook_file(filepath)
-        Chef::CookbookVersion.checksum_cookbook_file(filepath)
-      end
BREAKS HERE
-version '2.2.0'
BREAKS HERE
-  service service_name do
-    action [:stop, :disable]
-    # Defer directory deletion to the end of run list
-    not_if { service_name.to_s.empty? }
BREAKS HERE
-     File.open(file_name, 'w', ) do |file|
BREAKS HERE
-if node[:platform] == 'ubuntu' && node[:platform_version].to_f >= 13.10
-  default[:apache][:mpm] = 'event'
-end
-default[:bamboo][:apache2][:access_log]         = ''
-default[:bamboo][:apache2][:error_log]          = ''
-default[:bamboo][:apache2][:port]               = 80
-default[:bamboo][:apache2][:virtual_host_alias] = node[:fqdn]
-default[:bamboo][:apache2][:virtual_host_name]  = node[:hostname]
-default[:bamboo][:apache2][:error_docs][:e503]  = ''
-default[:bamboo][:apache2][:ssl][:access_log]       = ''
-default[:bamboo][:apache2][:ssl][:chain_file]       = ''
-default[:bamboo][:apache2][:ssl][:error_log]        = ''
-default[:bamboo][:apache2][:ssl][:port]             = 443
-case node[:platform_family]
-  default[:bamboo][:apache2][:ssl][:certificate_file] = '/etc/pki/tls/certs/localhost.crt'
-  default[:bamboo][:apache2][:ssl][:key_file]         = '/etc/pki/tls/private/localhost.key'
-  default[:bamboo][:apache2][:ssl][:certificate_file] = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
-  default[:bamboo][:apache2][:ssl][:key_file]         = '/etc/ssl/private/ssl-cert-snakeoil.key'
BREAKS HERE
-default['openstack']['endpoints']['database-api']['path'] = '/v1'
BREAKS HERE
-depends          "glance"
-depends          "keystone", ">= 2012.2.1"
BREAKS HERE
-sensu_plugin "https://raw.githubusercontent.com/sensu/sensu-community-plugins/master/plugins/http/check-http.rb"
-
-sensu_plugin "example_plugin.rb"
-
-sensu_plugin "another_example.rb" do
-  source "example_plugin.rb"
-end
-
-sensu_plugin "nested_plugin.rb" do
-  source_directory "plugins"
-end
-
-sensu_plugin "another_nested_plugin.rb" do
-  source_directory "plugins/test"
-end
-
BREAKS HERE
-if node['os'] == 'freebsd'
-  directory ::File.dirname(node['nfs']['config']['server_template']) do
-    mode 0755
-    action :create
-  end
BREAKS HERE
-    # @option options [Array<String>, String] cookbooks
-    #
-    def run(options = {})
-      dependencies = lockfile_reduce(berksfile.dependencies)
-      resolver     = Resolver.new(berksfile, dependencies)
-      lock_deps    = []
-      dependencies.each do |dependency|
-        if dependency.scm_location?
-          Berkshelf.formatter.fetch(dependency)
-          downloader.download(dependency)
-        end
-        next if (cookbook = dependency.cached_cookbook).nil?
-        resolver.add_explicit_dependencies(cookbook)
-      Berkshelf.formatter.msg("building universe...")
-      cached_cookbooks = resolver.resolve.collect do |name, version, dependency|
-        lock_deps << dependency
-        dependency.locked_version ||= Solve::Version.new(version)
-        if dependency.downloaded?
-          Berkshelf.formatter.use(dependency.name, dependency.cached_cookbook.version, dependency.location)
-          dependency.cached_cookbook
-        else
-          source = berksfile.sources.find { |source| source.cookbook(name, version) }
-          remote_cookbook = source.cookbook(name, version)
-          Berkshelf.formatter.install(name, version, api_source: source, location_type: remote_cookbook.location_type,
-            location_path: remote_cookbook.location_path)
-          temp_filepath = downloader.download(name, version)
-          CookbookStore.import(name, version, temp_filepath)
-        end
-      verify_licenses!(lock_deps)
-      lockfile.update_graph(cached_cookbooks)
-      lockfile.update_dependencies(berksfile.dependencies)
-      lockfile.save
-      cached_cookbooks
-    # @param [Array<Berkshelf::Dependencies>] dependencies
-    # @raise [Berkshelf::LicenseNotAllowed]
-    def verify_licenses!(dependencies)
-      return if licenses.empty?
-
-      dependencies.each do |dependency|
-        next if dependency.location.is_a?(Berkshelf::PathLocation)
-        cached = dependency.cached_cookbook
-          unless licenses.include?(cached.metadata.license)
-            raise Berkshelf::LicenseNotAllowed.new(cached)
-            FileUtils.rm_rf(cached.path)
BREAKS HERE
-when 'cinder.volume.drivers.storwize_svc.StorwizeSVCDriver'
BREAKS HERE
-directory node['postfixadmin']['map_files']['path'] do
-  mode '00755'
-  owner node['postfixadmin']['map_files']['owner']
-  group node['postfixadmin']['map_files']['group']
-  recursive true
-  not_if { ::File.exist?(node['postfixadmin']['map_files']['path']) }
-  action :create
BREAKS HERE
-            end.to(not_change { get("containers/nodes/_acl") })
-               .and(not_change { get("nodes/x/_acl") })
-            end.to(not_change { get("containers/nodes/_acl") })
-               .and(not_change { get("nodes/x/_acl") })
BREAKS HERE
-default['krb5']['krb5_conf']['libdefaults']['default_realm'] = node['krb5']['default_realm']
BREAKS HERE
-include_attribute 'sysctl'
-if node['sysctl']['params'].key?('net') && node['sysctl']['params']['net'].key?('ipv4') &&
BREAKS HERE
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{new_resource.name}.yml")
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{new_resource.name}.yml")
-    path ::File.join(filebeat_install_resource.prospectors_dir, "#{new_resource.name}.yml")
BREAKS HERE
-    # server. This is needed to be able to install plugins throught the update-center.
BREAKS HERE
-    fail "Unsupported database type #{@db_type}"
BREAKS HERE
-  stack  << "#{perl5lib_stack}; " unless perl5lib_stack.nil?
BREAKS HERE
-  role_name service_role
BREAKS HERE
-directory "#{basedir}/status" do
-  owner "nominatim"
-  group "postgres"
-  mode 0o775
-end
-
BREAKS HERE
-  execute "rabbitmqctl add_vhost #{new_resource.vhost}" do
-    not_if "rabbitmqctl list_vhosts | grep #{new_resource.vhost}"
-    Chef::Log.info "Adding RabbitMQ vhost '#{new_resource.vhost}'."
-    new_resource.updated_by_last_action(true)
-  execute "rabbitmqctl delete_vhost #{new_resource.vhost}" do
-    only_if "rabbitmqctl list_vhosts | grep #{new_resource.vhost}"
-    Chef::Log.info "Deleting RabbitMQ vhost '#{new_resource.vhost}'."
-    new_resource.updated_by_last_action(true)
BREAKS HERE
-            'driver' => 'cinder.volume.drivers.RBDDriver'
BREAKS HERE
-    let(:user) { create(:user, public_key: File.read('spec/support/key_fixtures/valid_public_key.pub')) }
-
BREAKS HERE
-version '1.2.14'
BREAKS HERE
-  execute "gimme_install_#{version}" do
-
-  next if version < '1.5'
-
-  Array(node['travis_build_environment']['golang_libraries']).each do |lib|
-    bash "install #{lib} for go #{version}" do
-      code %{eval "$(gimme #{version})" && go get -u #{lib}}
-      flags '-l'
-      user node['travis_build_environment']['user']
-      group node['travis_build_environment']['group']
-      environment(default_env)
-    end
-  end
BREAKS HERE
-        }
BREAKS HERE
-  :user   => "cassandra",
-  :group  => "cassandra",
-
BREAKS HERE
-        node.set['openstack']['mysql']['data_dir'] = '/other-dir'
-        node.set['openstack']['mysql']['version'] = '5.7'
BREAKS HERE
-cookbook_file '/etc/nginx/sites-available/app.conf' do
-    source 'app_nginx.conf'
-    owner 'root'
-    group 'root'
-    mode '644'
-end
-
-
BREAKS HERE
-    variables({
-      :category => node['sumologic']['syslog_cat']
-    })
-    variables({
-      :category => node['sumologic']['security_cat']
-    })
BREAKS HERE
-version '0.2.0'
BREAKS HERE
-  include_recipe 'yum-epel'
-  case node['platform_version'].to_i
-  when 5
-  else
-    include_recipe 'yum-erlang_solutions'
BREAKS HERE
-          else
-            install_plugin_from_update_center(dep['name'], dep['version'], opts) if dep['optional'] == false
BREAKS HERE
-if Chef::Config[:solo]
-  node.default["eucalyptus"]["topology"]["clusters"][node["eucalyptus"]["local-cluster-name"]]["nodes"] = node["ipaddress"]
-end
-
BREAKS HERE
-      test_versioning_scheme = if Gem::Version.new(v) < Gem::Version.new('17.06.0')
-                   if new_resource.repo_channel == 'stable' && bionic?
-                     '-3'
-                   end
-                 else
-                   ''
-                 end
BREAKS HERE
-          [ "/organizations/*/users", ActorsEndpoint.new(self) ],
-          [ "/organizations/*/users/*", ActorEndpoint.new(self) ],
-          [ "/organizations/*/authenticate_user", OrganizationAuthenticateUserEndpoint.new(self) ],
-      result +
-      [
-          request = RestRequest.new(env, rest_base_prefix)
BREAKS HERE
-  for cert in `#{source_creds} && euare-userlistcerts | grep -v Active`;do
BREAKS HERE
-      cookbook_paths.uniq.map do |cookbook_path|
-        %{cookbook_path "#{File.expand_path(cookbook_path, bash_path)}"}
-      File.expand_path("..", royal_crown.path)
BREAKS HERE
-install_path = "#{node['consul_template']['install_dir']}".tr('/', '\\')
BREAKS HERE
-	default['icinga2']['user'] = 'icinga'
-	default['icinga2']['group'] = 'icinga'
-	default['icinga2']['user'] = 'nagios'
-	default['icinga2']['group'] = 'nagios'
-default['icinga2']['cmdgroup'] = 'icingacmd'
BREAKS HERE
-  file = File.new("#{thp_defrag}")
-  if text =~ /\[never\]/
-    update_thp_defrag = false
-  end
BREAKS HERE
-# Install Jenkins jobs 
-  end  
BREAKS HERE
-        Chef::Log.debug("Default instance ID is #{node[:network]['default_interface']}")
-        node[:network]['default_interface']
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.78.0/}) }
BREAKS HERE
-          expect(subject.text_part.to_s).to include(cookbook_path(cookbook))
-          expect(subject.html_part.to_s).to include(cookbook_path(cookbook))
BREAKS HERE
-      %w[install configure manage].each do |r|
BREAKS HERE
-    chef_major_version = ::Chef::VERSION.split(".").first.to_i
-    if chef_major_version < 13 and new_resource.respond_to?(:params)
BREAKS HERE
-unless(node.platform_family == 'debian')
-  user 'stunnel4' do
-    home '/var/run/stunnel4'
-    system true
-    shell '/bin/false'
-    supports manage_home: true
-  end
-  cookbook_file '/etc/init.d/stunnel4' do
-    source 'stunnel4'
-    mode 0755
-  end
BREAKS HERE
-      backup: false,
-      backup: true,
BREAKS HERE
-      it "chef-client run was successful" do
-        expect(instance).to receive(:load_env)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "Enabling chef-service...")
-        instance.should_receive(:enable_chef)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::READY, 0, "chef-service is enabled.")
-
-        instance.run
-      it "chef-client run failed" do
-        instance.instance_variable_set(:@chef_client_error, "Chef client failed")
-        expect(instance).to receive(:load_env)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "Enabling chef-service...")
-        instance.should_receive(:enable_chef)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::READY, 0, "chef-service is enabled. Chef client run failed with error- Chef client failed")
-        instance.run
-      it "chef-client run was successful" do
-        expect(instance).to receive(:load_env)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "Enabling chef-service...")
-        instance.should_receive(:enable_chef)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "chef-service enable failed.")
-        instance.run
-      it "chef-client run failed" do
-        instance.instance_variable_set(:@chef_client_error, "Chef client failed")
-        expect(instance).to receive(:load_env)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "Enabling chef-service...")
-        instance.should_receive(:enable_chef)
-        expect(instance).to receive(:report_heart_beat_to_azure).with(AzureHeartBeat::NOTREADY, 0, "chef-service enable failed. Chef client run failed with error- Chef client failed")
-        instance.run
BREAKS HERE
-# Cookbook Name:: base-os-hardening
BREAKS HERE
-#
-require 'uri'
-# Register all the tenants specified in the users hash
-# Register all the roles from the users hash
BREAKS HERE
-default['dynatrace']['server']['linux']['installer']['easyTravelProfile'] = 'https://s3.amazonaws.com/downloads.dynasprint/easytravel/easyTravel.profile.xml'
-
BREAKS HERE
-package package_name do
BREAKS HERE
-                                 '-3'
BREAKS HERE
-ceph = ", :aws_signature_version => 2"
-ceph = nil
-  store_with('engine' => 'S3', 'settings' => { 's3.access_key_id' => node[:bamboo][:backup][:s3_access_key_id], 's3.secret_access_key' => node[:bamboo][:backup][:s3_secret_access_key], 's3.bucket' => node[:bamboo][:backup][:s3_bucket], 's3.path' => 'bamboo', 's3.keep' => 5, 's3.fog_options' => {  :host => node[:bamboo][:backup][:s3_host], :scheme => node[:bamboo][:backup][:s3_scheme], :port => node[:bamboo][:backup][:s3_port] } })
BREAKS HERE
-	default['mysql-hardening']['mysql-conf'] = '/etc/my.cnf'
-	default['mysql-hardening']['mysql-conf'] = '/etc/mysql/my.cnf'
BREAKS HERE
-property :cookbook, kind_of: String
-property :path, kind_of: String, default: NomadCookbook::Helpers::JOB_ROOT
-property :source, kind_of: String, required: true
-property :variables, kind_of: Hash
BREAKS HERE
-supported_platforms = %w(
-  mac_os_x
-  ubuntu
-  centos
-  redhat
-)
-
-unless supported_platforms.include?(node['platform'])
-  Chef::Log.warn("** Unsupported version #{node['platform']} **")
-case node['osquery']['options']['logger_plugin']
-when 'filesystem'
BREAKS HERE
-            "keystone_api_ipaddress" => identity_endpoint["host"],
-            "service_port" => identity_endpoint["port"],
-            "admin_port" => identity_admin_endpoint["port"],
-            "admin_token" => keystone["admin_token"]
-            )
BREAKS HERE
-# Chef Ingredient parameter 
BREAKS HERE
-      @chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS do |n|
-        # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-        n.set['cpu']['total'] = 1
-      end
-      # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-      node.set['cpu']['total'] = 1
-      # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-      node.set['cpu']['total'] = 1
-      # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-      node.set['cpu']['total'] = 1
-      # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-      node.set['cpu']['total'] = 1
-        # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-        node.set['cpu']['total'] = 1
BREAKS HERE
-  zk_nodes = discover_zookeepers_with_retry(node['mesos']['zookeeper_exhibitor_url'])
BREAKS HERE
-version          '0.0.2'
BREAKS HERE
-r = resources('template[/etc/mysql/my.cnf]')
BREAKS HERE
-opts = l.reject { |_, o| o.nil? }
BREAKS HERE
-        erb_corsAllowedOrigins: new_resource.origins + [Resolv.getaddress(node['cookbook-openshift3']['openshift_common_public_hostname'])] + node['cookbook-openshift3']['openshift_common_svc_names'],
-        erb_corsAllowedOrigins: new_resource.origins + [node['cookbook-openshift3']['openshift_common_public_ip']] + node['cookbook-openshift3']['openshift_common_svc_names'],
BREAKS HERE
-supports 'rhel'
BREAKS HERE
-# Some plugins have L3 functionality, so we install the plugin
-# Python package and include the plugin-specific recipe here...
-main_plugin = node["openstack"]["network"]["interface_driver"].split('.').last.downcase
-
BREAKS HERE
-# Install a relatively up-to-date version of PhantomJS for app specs
-#########################################################################
-
-remote_file 'Retrieve a pre-built PhantomJS' do
-  source 'http://cnpmjs.org/downloads/phantomjs-2.1.1-linux-x86_64.tar.bz2'
-  path "#{node['delivery']['workspace']['cache']}/phantomjs-2.1.1-linux-x86_64.tar.bz2"
-end
-
-execute 'Place PhantomJS in path' do
-  command <<-CMD
-tar xjvf phantomjs-2.1.1-linux-x86_64.tar.bz2 phantomjs-2.1.1-linux-x86_64/bin/phantomjs && \
-mv phantomjs-2.1.1-linux-x86_64/bin/phantomjs /usr/local/bin && \
-chmod +x /usr/local/bin/phantomjs
-CMD
-  cwd node['delivery']['workspace']['cache']
-end
-
-
-#########################################################################
BREAKS HERE
-        exit(1) unless ans =~ /^[yY](es)?$/
-        if host.in_test?
-          username = host.who_is_testing
-          logger.error("User #{username} is already testing on #{hostname}")
-        else
BREAKS HERE
-log "Found chef-client in #{client_bin}"
BREAKS HERE
-def get_head_nodes
-	results = search(:node, "role:BCPC-Headnode AND chef_environment:#{node.chef_environment}")
-	results.map!{ |x| x['hostname'] == node[:hostname] ? node : x }
-	return (results == []) ? [node] : results
-end
-
BREAKS HERE
-
BREAKS HERE
-  code "mysql -u root <#{mysql_users_passwords_sql}"
BREAKS HERE
-        raise Chef::Exceptions::Validationraiseed, 'restart_policy must be either no, always, unless-stopped, or on-raiseure.'
-        raise Chef::Exceptions::Validationraiseed, 'Conflicting options restart_policy and autoremove.'
-        raise Chef::Exceptions::Validationraiseed, 'Conflicting options detach, attach_stderr, attach_stdin, attach_stdout, stdin_once.'
-        raise Chef::Exceptions::Validationraiseed, 'Cannot specify hostname, dns, dns_search, mac_address, or extra_hosts when network_mode is host.'
-        raise Chef::Exceptions::Validationraiseed, 'Cannot specify hostname, dns, dns_search, mac_address, extra_hosts, exposed_ports, port_bindings, publish_all_ports, port when network_mode is container.'
-          raise Docker::Error::TimeoutError, "Container raiseed to stop, consider adding kill_after to the container #{container_name}"
BREAKS HERE
-          nodes = nodes_list(org)[0]
-        )
BREAKS HERE
-execute 'fix bundler directory permissions' do
-  command "chown -R #{node['omnibus']['build_user']} #{node['omnibus']['build_user_home']}/.bundle"
BREAKS HERE
-admin_api_endpoint = admin_endpoint 'telemetry-api'
-internal_api_endpoint = internal_endpoint 'telemetry-api'
-public_api_endpoint = public_endpoint 'telemetry-api'
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-service_pass = get_password 'service', 'openstack-ceilometer'
-service_user = node['openstack']['telemetry']['service_user']
-service_role = node['openstack']['telemetry']['service_role']
-service_tenant_name = node['openstack']['telemetry']['service_tenant_name']
-
-# Register Service Tenant
-openstack_identity_register 'Register Service Tenant' do
-  auth_uri auth_uri
-  bootstrap_token bootstrap_token
-  tenant_name service_tenant_name
-  tenant_description 'Service Tenant'
-
-  action :create_tenant
-end
-# Register Service User
-openstack_identity_register 'Register Service User' do
-  auth_uri auth_uri
-  bootstrap_token bootstrap_token
-  tenant_name service_tenant_name
-  user_name service_user
-  user_pass service_pass
-  action :create_user
-end
-# Grant Admin role to Service User for Service Tenant
-openstack_identity_register "Grant 'admin' Role to Service User for Service Tenant" do
-  auth_uri auth_uri
-  bootstrap_token bootstrap_token
-  tenant_name service_tenant_name
-  user_name service_user
-  role_name service_role
-  action :grant_role
-end
-openstack_identity_register 'Register Metering Service' do
-  auth_uri auth_uri
-  bootstrap_token bootstrap_token
-  service_name 'ceilometer'
-  service_type 'metering'
-  service_description 'Ceilometer Service'
-  action :create_service
-end
-openstack_identity_register 'Register Metering Endpoint' do
-  auth_uri auth_uri
-  bootstrap_token bootstrap_token
-  service_type 'metering'
-  endpoint_region node['openstack']['telemetry']['region']
-  endpoint_adminurl ::URI.decode admin_api_endpoint.to_s
-  endpoint_internalurl ::URI.decode internal_api_endpoint.to_s
-  endpoint_publicurl ::URI.decode public_api_endpoint.to_s
-  action :create_endpoint
BREAKS HERE
-name             "openstack-metering"
-maintainer       "AT&T Services, Inc."
-maintainer_email "cookbooks@lists.tfoundry.com"
-license          "Apache 2.0"
-description      "The OpenStack Metering service Ceilometer."
-version          "8.0.0"
-recipe "openstack-metering::agent-central", "Installs agent central service."
-recipe "openstack-metering::agent-compute", "Installs agent compute service."
-recipe "openstack-metering::api", "Installs API service."
-recipe "openstack-metering::collector", "Installs nova network service."
-recipe "openstack-metering::common", "Common metering configuration."
-recipe "openstack-metering::identity_registration", "Registers the endpoints with Keystone"
-depends "openstack-common", "~> 8.0"
-depends "openstack-identity", "~> 8.0"
BREAKS HERE
-  only_if "test \'`/usr/local/bin/nsqd --version 2>&1`\' != \'nsqd v#{nsq_version} (built w/#{go_version})\'"
BREAKS HERE
-depends 'apache2'
-depends 'ark'
-depends 'database'
-depends 'php'
-depends 'postgresql', '>= 1.0.0'
-depends 'ssl_certificate'
-depends 'yum-epel'
BREAKS HERE
-        newest_pkg = installed_packages.first
BREAKS HERE
-    else node[:os_version] <= '6.1'
-        if node[:os_version] >= '6.2'
-          cmd_text = "netdom join #{node[:hostname]} /d #{new_resource.name} /ud:#{new_resource.domain_user} /pd:#{new_resource.domain_pass}"
BREAKS HERE
-version '0.0.17'
BREAKS HERE
-        ssh_wrapper: '/tmp/ssh-git-wrapper.sh'
BREAKS HERE
-      url     = new_resource.url     ? " -url #{new_resource.url}" : nil
-      raise 'Could not determine the plugin directory. Please set plugin_dir on this resource.' unless new_resource.plugin_dir
-
-        plugin_exists = Dir.entries(new_resource.plugin_dir).any? do |plugin|
-          next if plugin =~ /^\./
-          name.include? plugin
-        end rescue false
BREAKS HERE
-name              'openstack-ops-messaging'
-maintainer       'openstack-chef'
-license           'Apache 2.0'
-description       'Provides the shared messaging configuration for Chef for OpenStack.'
-version           '11.0.0'
-%w{ fedora ubuntu redhat centos suse }.each do |os|
-depends 'rabbitmq', '~> 3.12'
BREAKS HERE
-    if node.platform_version.to_i >= 7
BREAKS HERE
-if Eucalyptus::Enterprise.is_enterprise?(node)
-  if Eucalyptus::Enterprise.is_vmware?(node)
-    yum_package 'eucalyptus-enterprise-vmware-broker-libs' do
-      action :upgrade
-      options node['eucalyptus']['yum-options']
-      notifies :restart, "service[eucalyptus-cloud]", :immediately
-      flush_cache [:before]
-    end
-  end
-end
-
BREAKS HERE
-package_options = ""
-
-  package_options = '--force-yes -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"'
-
-  # the sensu yum repo uses rhel versioning to segment builds, so we need to map
-  # fedora versions to the closest rhel version here.
-  # based on: http://en.wikipedia.org/wiki/Red_Hat_Enterprise_Linux#Relationship_to_free_and_community_distributions
-  options package_options
BREAKS HERE
-# Copyright 2013, AT&T
BREAKS HERE
-default['openstack']['endpoints']['identity-api']['scheme'] = 'http'
-default['openstack']['endpoints']['identity-internal']['scheme'] = 'http'
-default['openstack']['endpoints']['identity-admin']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-api']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-ec2-api']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-ec2-admin']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-xvpvnc']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-novnc']['scheme'] = 'http'
-default['openstack']['endpoints']['compute-metadata-api']['scheme'] = 'http'
-default['openstack']['endpoints']['network-api']['scheme'] = 'http'
-default['openstack']['endpoints']['image-api']['scheme'] = 'http'
-default['openstack']['endpoints']['image-registry']['scheme'] = 'http'
-default['openstack']['endpoints']['block-storage-api']['scheme'] = 'http'
-default['openstack']['endpoints']['object-storage-api']['scheme'] = 'http'
-default['openstack']['endpoints']['telemetry-api']['scheme'] = 'http'
-default['openstack']['endpoints']['orchestration-api']['scheme'] = 'http'
-default['openstack']['endpoints']['orchestration-api-cfn']['scheme'] = 'http'
-default['openstack']['endpoints']['orchestration-api-cloudwatch']['scheme'] = 'http'
-default['openstack']['endpoints']['database-api']['scheme'] = 'http'
-default['openstack']['endpoints']['bare-metal-api-bind']['bind_interface'] = nil
-default['openstack']['endpoints']['bare-metal-api']['scheme'] = 'http'
BREAKS HERE
-# 208.67.222.222 and 208.67.220.220 are OpenDNS
-default["openstack"]["network"]["dhcp"]["upstream_dns_servers"] = ["208.67.222.222", "208.67.220.220", "8.8.8.8"]
BREAKS HERE
-maintainer       'The Authors'
-license          'apache2'
BREAKS HERE
-default["airflow"]["config"]["webserver"]["load_examples"] = false
BREAKS HERE
-        pw << alphanum_upper[raw_pw.getbyte(pw.length) % alphanum_upper.length]
BREAKS HERE
-# Load all the libraries
-require 'chef'
-Dir['libraries/*.rb'].each { |f| require File.expand_path(f) }
BREAKS HERE
-          Chef::Log.debug("Poise::IncludeRecipe: Adding #{r.to_s} to global collection #{collection.object_id}")
BREAKS HERE
-cookbook_file "#{node['openresty']['dir']}/conf.d/general_security.inc" do
-  source 'general_security.inc'
BREAKS HERE
-# If it is defined as a hash, by default versions for each packages is nil. So it will install the latest one available in repositories.
-# These version information can be overriden in your environment specific attributes so you can intall any version you prefer
BREAKS HERE
-
BREAKS HERE
-    flags: 'IPV4',
-  default['tftp']['pkgs']   = %w(tftpd-hpa)
-    OPTIONS: '-s',
BREAKS HERE
-if node.platform? 'fedora' || (node.platform_family? 'rhel' && node.platform_version.to_i >= 7)
BREAKS HERE
-    Chef::Log.debug("secondary ip (#{ip}) is already attached to the #{interface}")
-    converge_by("assign secondary #{ip} to #{interface}") do
-      Chef::Log.debug("Secondary IP #{ip} assigned to #{interface}")
BREAKS HERE
-default['wix']['home']    = "#{ENV['SYSTEMDRIVE']}\\wix"
BREAKS HERE
-      authdb?('passdb')
-      authdb?('userdb')
BREAKS HERE
-  #for AWS it can be:
-  node_platform = node['platform']              # "amazon"
-  node_platform_version = node['platform_version']      # "2016.03"
-  node_os = node['os']                    # "linux"
-  node_os_version = node['os_version']            # "4.4.5-15.26.amzn1.x86_64"
-  node_kernel_machine = node['kernel']['machine']       # "x86_64"
-  node_ipaddress = node['ipaddress']
-  ec2 = node['ec2']
-  if !ec2.nil?
-    node_public_hostname = node['ec2']['public_hostname']
-    node_public_ipv4 = node['ec2']['public_ipv4']
-    node_local_ipv4 = node['ec2']['local_ipv4']
-  else
-    node_public_hostname = nil
-    node_public_ipv4 = nil
-    node_local_ipv4 = nil
-  end
-  Chef::Log.info '########################################## cookbook: ' + cookbook_name + ' ################################'
-  if node_public_hostname != nil
-    Chef::Log.info 'Node public host name:'+node_public_hostname
-  end
-  if node_public_ipv4 != nil
-    Chef::Log.info 'Node public IP Address:'+node_public_ipv4
-  end
-  if node_local_ipv4 != nil
-    Chef::Log.info 'Node local IP Address:'+node_local_ipv4
-  elsif node_ipaddress != nil
-    Chef::Log.info 'Node IP Address:'+node_ipaddress
-  end
-    
-  if !node_ipaddress.nil? && !node_local_ipv4.nil?
-    if node_local_ipv4 != node_ipaddress
-      if node_ipaddress != nil
-        Chef::Log.info 'Node IP Address:'+node_ipaddress
-      end
-  
-  if !node_platform.nil? && !node_platform_version.nil? && !node_os.nil? && !node_os_version.nil? && !node_kernel_machine.nil?
-    Chef::Log.info 'Platform:' + node_platform + "  version:" + node_platform_version + "  os:" + node_os.to_s + "  os_version:" + node_os_version.to_s + '  machine:' + node_kernel_machine.to_s
-  end
BREAKS HERE
-Given /^a cookbook that contains a LWRP with (no|a) default action$/ do |has_default_action|
-  cookbook_with_lwrp({:default_action => has_default_action == 'no' ? :no_default_action : :ruby_default_action,
-                      :notifies => :does_notify})
-end
-
BREAKS HERE
-# in case symlink is removed we have to create it 
-dynatrace_make_symlink "#{name}" do
-  archive              'jar'
-  installer_path       installer_path
-  installer_prefix_dir installer_prefix_dir
-  dynatrace_owner      dynatrace_owner
-  dynatrace_group      dynatrace_group
-end
-
BREAKS HERE
-    source "sentry.conf.8.0.py.erb"
-    source "conf.yml.erb"
-    email = sentry_config['admin_email']
-    check_user_command = "echo 'from sentry.models import User; import sys; exit_code = 0 if User.objects.filter(email=\"#{email}\").exists() else 1; sys.exit(exit_code)' | #{node['sentry']['install_dir']}/bin/sentry shell"
-    password = sentry_config['admin_password']
-  # per the 8.x docs
-  execute "sentry DB upgrade" do
-    command "SENTRY_CONF=#{node['sentry']['config_dir']} #{node["sentry"]["install_dir"]}/bin/sentry upgrade"
-    user sentry_user
-    group sentry_group
-    action :run
-  end
BREAKS HERE
-if node['kernel']['machine'] =~ /armv6l/
-  arch = 'arm-pi' # assume a raspberry pi
-else
-  arch = node['kernel']['machine'] =~ /x86_64/ ? 'x64' : 'x86'
-end
BREAKS HERE
-    home_dir = (u['home'] ? u['home'] : "#{home_basedir}/#{u['username']}")
BREAKS HERE
-    restart_command "service tftpd-hpa restart"
-    start_command "service tftpd-hpa start"
BREAKS HERE
-attribute :delete_mime_maps, kind_of: Array, default: []
BREAKS HERE
-  :description => "Use contents of local cookbooks/roles/environments/nodes/data_bags directories instead of a manifest to generate knife commands"
-
-  option :extractlocal,
-  :long => "--extractlocal",
BREAKS HERE
-  has_binaries %w( nomad )
BREAKS HERE
-  define_method("disable_systemd_udev_rules") do |resource_name|
BREAKS HERE
-      }.to raise_error
BREAKS HERE
-  fail "Invalid profile name '#{owner_profile}'. "\
BREAKS HERE
-  list = @list.kind_of?(Array) ? @list : [ @list ]
-      eruby = Erubis::Eruby.new(template)
-      eruby.evaluate(list: ary, PostfixAdmin_Conf: PostfixAdmin::Conf)
-  @hash.to_hash.sort.map do |k, v|
-      eruby = Erubis::Eruby.new(template)
-      eruby.evaluate(hash: hs, PostfixAdmin_Conf: PostfixAdmin::Conf)
BREAKS HERE
-        :description => 'Maximum number of days since last checkin before node is marked stale (default: 30)'
-				stale_orgs = []
-				orgs.each do |org|
-					cb_list = cookbook_list(org)
-					version_count = cookbook_count(cb_list).sort_by(&:last).reverse.to_h
-					used_cookbooks = {}
-          nodes = nodes_list(org)
-
-					nodes[0].select{|node| !node['cookbooks'].nil?}.each do |node|
-						node['cookbooks'].each do |name, version_hash|
-							version = Gem::Version.new(version_hash['version']).to_s
-							if used_cookbooks[name] && !used_cookbooks[name].include?(version)
-								used_cookbooks[name].push(version)
-							else
-								used_cookbooks[name] = [version]
-							end
-						end
-					end
-
-					stale_nodes = []
-					nodes[0].each do |n|
-						if (Time.now.to_i - n['ohai_time'].to_i) >= node_threshold * 86400
-							stale_nodes.push(n['name'])
-						end
-					end
-
-					stale_nodes_hash = {'threshold_days': node_threshold, 'count': stale_nodes.count, 'list': stale_nodes}
-					stale_orgs.push(org) if stale_nodes.count == nodes[0].count
BREAKS HERE
-#
-# Cookbook Name:: iis
-# Resource:: config_property
-#
-# Copyright 2018, Calastone Ltd.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# Configures an IIS property (using powershell for idempotence)
-
-property :property, String, name_property: true, required: true
-property :ps_path, String, required: true
-property :location, String
-property :filter, String, required: true
-property :value, [String, Integer], required: true
-
-action :set do
-  location_param = "-location \"#{new_resource.location}\"" if property_is_set?(:location)
-
-  # powershell doesn't like { or } in xpath values (e.g. server variables)
-  escaped_filter = new_resource.filter.gsub('{', '{{').gsub('}', '}}')
-
-  property_value =  if new_resource.value.is_a?(Integer)
-                      new_resource.value.to_s
-                    else
-                      "\"#{new_resource.value}\""
-                    end
-  powershell_script "Set #{new_resource.ps_path}#{new_resource.location}/#{escaped_filter}/#{new_resource.property}" do
-    code <<-EOH
-    Set-WebConfigurationProperty -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}" -name "#{new_resource.property}" -value #{property_value} -ErrorAction Stop
-    EOH
-    only_if <<-EOH
-    (Get-WebConfigurationProperty -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}" -name "#{new_resource.property}" -ErrorAction Stop) -ne #{property_value}
-    EOH
-  end
-end
-
-action :add do
-  location_param = "-location \"#{new_resource.location}\"" if property_is_set?(:location)
-
-  # powershell doesn't like { or } in xpath values (e.g. server variables)
-  escaped_value = new_resource.value.gsub('{', '{{').gsub('}', '}}')
-  escaped_filter = new_resource.filter.gsub('{', '{{').gsub('}', '}}')
-
-  powershell_script "Set #{new_resource.ps_path}#{new_resource.location}/#{escaped_filter}/#{new_resource.property}" do
-    code <<-EOH
-    Add-WebConfigurationProperty -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}" -name "." -value @{ #{new_resource.property} = '#{new_resource.value}'; } -ErrorAction Stop
-    EOH
-    only_if <<-EOH
-    (Get-WebConfiguration -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}/*[@#{new_resource.property}='#{escaped_value}']" -ErrorAction Stop) -eq $null
-    EOH
-  end
-end
-
-action :remove do
-  location_param = "-location \"#{new_resource.location}\"" if property_is_set?(:location)
-
-  # powershell doesn't like { or } in xpath values (e.g. server variables)
-  escaped_value = new_resource.value.gsub('{', '{{').gsub('}', '}}')
-  escaped_filter = filter.gsub('{', '{{').gsub('}', '}}')
-
-  powershell_script "Set #{new_resource.ps_path}#{new_resource.location}/#{escaped_filter}/#{new_resource.property}" do
-    code <<-EOH
-    Remove-WebConfigurationProperty -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}" -name "." -AtElement @{ #{new_resource.property} = '#{new_resource.value}'; } -ErrorAction Stop
-    EOH
-    only_if <<-EOH
-    (Get-WebConfiguration -pspath "#{new_resource.ps_path}" #{location_param} -filter "#{escaped_filter}/*[@#{new_resource.property}='#{escaped_value}']" -ErrorAction Stop) -ne $null
-    EOH
-  end
-end
BREAKS HERE
-      unless Berkshelf::Config.instance.chef.chef_server_url.present?
-        msg = "Could not upload cookbooks: Missing Chef server_url."
-        msg << " Generate or update your Berkshelf configuration that contains a valid Chef Server URL."
-        raise UploadFailure, msg
-      end
-
-      unless Berkshelf::Config.instance.chef.node_name.present?
-        msg = "Could not upload cookbooks: Missing Chef node_name."
-        msg << " Generate or update your Berkshelf configuration that contains a valid Chef node_name."
-        raise UploadFailure, msg
-      end
-
-      upload_options = {
-        server_url: Berkshelf::Config.instance.chef.chef_server_url,
-        client_name: Berkshelf::Config.instance.chef.node_name,
-        client_key: Berkshelf::Config.instance.chef.client_key,
-        ssl: {
-          verify: (options[:ssl_verify].nil? ? Berkshelf::Config.instance.ssl.verify : options[:ssl_verify])
-        },
-        cookbooks: cookbook_names
-      }.merge(options).symbolize_keys
BREAKS HERE
-version '1.0.0'
BREAKS HERE
-defaut['cq-unix-toolkit']['repository']['url'] =
-defaut['cq-unix-toolkit']['repository']['revision'] = 'not-merged-features'
BREAKS HERE
-  raise "Invalid profile name '#{profile_owner}'. "\
-  raise "Invalid path '#{profile_path}'" if profile_path.nil?
BREAKS HERE
-  def test_sets_proxy_settings
-    Chef::Config[:http_proxy] = "http://proxy:3128"
-    Chef::Config[:no_proxy] = nil
-    conf = command.proxy_settings
-    assert_equal({ :http_proxy => "http://proxy:3128" }, conf)
-  end
BREAKS HERE
-extend(Homebrew::Mixin)
-owner = homebrew_owner
-  user owner
BREAKS HERE
-version           '9.0.8'
BREAKS HERE
-yum_repository "eucalyptus-release" do
-  yum_repository "eucalyptus-enterprise-release" do
-yum_repository "euca2ools-release" do
BREAKS HERE
-default['sssd_ldap']['ldap_schema'] = "rfc2307bis"
-default['sssd_ldap']['ldap_uri'] = "ldap://something.yourcompany.com"
-default['sssd_ldap']['ldap_search_base'] = "dc=yourcompany,dc=com"
-default['sssd_ldap']['ldap_user_search_base'] = "ou=People,dc=yourcompany,dc=com"
-default['sssd_ldap']['ldap_group_search_base'] = "ou=Groups,dc=yourcompany,dc=com"
-default['sssd_ldap']['enumerate'] = "true"
-default['sssd_ldap']['cache_credentials'] = "false"
-default['sssd_ldap']['ldap_tls_reqcert'] = "allow"
-default['sssd_ldap']['ldap_tls_cacertdir'] = "/etc/pki/tls/certs"
BREAKS HERE
-  # Base class for errors raised by ChefDK::PolicyfileServices objects. Don't
-  # raise this directly, create a descriptively-named subclass. You can rescue
-  # this to catch all errors from PolicyfileServices objects though.
-  class PolicyfileServiceError < StandardError
-  end
-
-  class PolicyfileNotFound < PolicyfileServiceError
-  end
-
-  class LockfileNotFound < PolicyfileServiceError
-  end
-
-  class PolicyfileInstallError < PolicyfileServiceError
-
-    attr_reader :cause
-
-    def initialize(message, cause)
-      super(message)
-      @cause = cause
-    end
-
-  end
-
-  class PolicyfilePushError < PolicyfileServiceError
-
-    attr_reader :cause
-
-    def initialize(message, cause)
-      super(message)
-      @cause = cause
-    end
-
-  end
-
BREAKS HERE
-version           '9.0.2'
BREAKS HERE
-    'common_client_packages' => ['python-openstackclient'],
-    'common_client_packages' => ['python-openstackclient'],
BREAKS HERE
-        raise CookbookNotFound, "Cookbook '#{name}' not found at site: '#{api_uri}'"
BREAKS HERE
-      type: Hash
BREAKS HERE
-      directory new_resource.plugin_dir do
-        owner new_resource.user
-        group new_resource.group
-        mode 0755
-        recursive true
-      end
-
-      shell_out!("#{new_resource.bindir}/plugin -install #{name}#{version}#{url}".split(' '))
-      shell_out!("chown -R #{new_resource.user}:#{new_resource.group} #{new_resource.plugin_dir}".split(' '))
BREAKS HERE
-        vivified_attribute_access(ast)
-    def vivified_attribute_access(ast)
-            ! chef_dsl_methods.include?(call.xpath("ident/@value").to_s.to_sym))
BREAKS HERE
-        require "pry"; binding.pry
-
-        #graph.artifact(cookbook.name, cookbook.version).tap do |artifact|
-          # I think this is where we can just not add dependencies to the artifact
-          #cookbook.dependencies.each do |dependency|
-            #name, requirements = dependency
-            #artifact.depends(name, requirements)
-          #end
-        #end
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
BREAKS HERE
-World(Berkshelf::RSpec::ChefAPI)
-    purge_cookbook(name, version)
-    cb_path = generate_cookbook(tmp_path, name, version)
-    upload_cookbook(cb_path, freeze: false, force: true)
-    purge_cookbook(name, version)
-    cb_path = generate_cookbook(tmp_path, name, version)
-    upload_cookbook(cb_path, freeze: true, force: true)
- end
-Then /^the Chef Server should have the cookbooks:$/ do |cookbooks|
-  cookbooks.raw.each do |name, version|
-    expect(server_has_cookbook?(name, version)).to be_true
-  end
-Then /^the Chef Server should not have the cookbooks:$/ do |cookbooks|
-  cookbooks.raw.each do |name, version|
-    expect(server_has_cookbook?(name, version)).to be_false
-Then(/^the version locks in the "(.*?)" environment should be:$/) do |environment_name, version_locks|
-  environment_cookbook_versions = environment(environment_name).cookbook_versions
-  version_locks.hashes.each do |hash|
-    expect(environment_cookbook_versions[hash['cookbook']]).to eq(hash['version_lock'])
-Given(/^The Chef Server has an environment named "(.*?)"$/) do |environment_name|
-  delete_environment(environment_name)
-  begin
-    create_environment(environment_name)
-  rescue Ridley::Errors::HTTPConflict; end
-Given(/^The Chef Server does not have an environment named "(.*?)"$/) do |environment_name|
-  if environment_exists?(environment_name)
-    delete_environment(environment_name)
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-  kombu_ssl_version: node['openstack']['mq']['rabbitmq']['kombu_ssl_version']
BREAKS HERE
-    # @param [Array<CookbookSource>, CookbookSource] sources
-    def initialize(downloader, sources = Array.new)
-      Array(sources).each do |source|
-      Array(sources).each do |source|
BREAKS HERE
-# Plugin configuration path
-default['openstack']['network']['lbaas_config_path'] = '/etc/neutron/plugins/services/agent_loadbalancer'
-
BREAKS HERE
-property :addons, Hash
BREAKS HERE
-version          '10.0.1'
BREAKS HERE
-    notifies :restart, 'service[system-probe]', :delayed unless agent_start == false
-service 'system-probe' do
BREAKS HERE
-default['iis']['conf_dir']   = "#{iis['home']}\\config"
-default['iis']['docroot']    = "#{iis['pubroot']}\\wwwroot"
-default['iis']['log_dir']    = "#{iis['pubroot']}\\logs\\LogFiles"
-default['iis']['cache_dir']  = "#{iis['pubroot']}\\temp"
BREAKS HERE
-default['postfixadmin']['map_files']['mode'] = '00644'
-default['postfixadmin']['map_files']['group'] = 'root' # TODO: this should not be root, and mode should be more restritive
BREAKS HERE
-version          '5.0.3'
BREAKS HERE
-
BREAKS HERE
-  include_context "setup git cookbooks"
-
-  def edit_repo
-    with_file(File.join(cookbook_path, "README.md"), "ab+") { |f| f.puts "some unpublished changes" }
-  end
-  context "given a clean repo with no remotes" do
-    it "reports that the repo has no remotes" do
-      expect(git_profiler.remote).to be_nil
-    it "determines the rev of the repo" do
-      expect(git_profiler.revision).to eq(current_rev)
-    end
-    it "reports that the repo is clean" do
-      expect(git_profiler.clean?).to be true
-    end
-    it "reports that the commits are unpublished" do
-      expect(git_profiler.unpublished_commits?).to be true
-    end
-    it "reports that no remotes have the commits" do
-      expect(git_profiler.synchronized_remotes).to eq([])
-    end
-  end
-  context "when the remote is a local branch" do
-    before do
-      allow(git_profiler).to receive(:remote_name).and_return(".")
-    it "reports that the repo doesn't have a remote" do
-      expect(git_profiler.have_remote?).to be(false)
-  end
-  context "with a remote configured" do
-    include_context "setup git cookbook remote"
-    context "given a clean repo with all commits published to the remote" do
-      it "determines the remote for the repo" do
-        expect(git_profiler.remote).to eq(remote_url)
-      end
-      it "determines the rev of the repo" do
-        expect(git_profiler.revision).to eq(current_rev)
-      end
-      it "reports that the repo is clean" do
-        expect(git_profiler.clean?).to be true
-      end
-      it "reports that all commits are published to the upstream" do
-        expect(git_profiler.unpublished_commits?).to be false
-      end
-      it "lists the remotes that commits are published to" do
-        expect(git_profiler.synchronized_remotes).to eq(%w[origin/master])
-    end
-    context "given a clean repo with unpublished changes" do
-      before do
-        edit_repo
-        system_command('git config --local user.name "Alice"', cwd: cookbook_path).error!
-        system_command('git config --local user.email "alice@example.com"', cwd: cookbook_path).error!
-        system_command('git commit -a -m "update readme" --author "Alice <alice@example.com>"', cwd: cookbook_path).error!
-      end
-      it "reports that the repo is clean" do
-        expect(git_profiler.clean?).to be true
-      it "reports that there are unpublished changes" do
-        expect(git_profiler.unpublished_commits?).to be true
-      it "reports that no remotes have the commits" do
-        expect(git_profiler.synchronized_remotes).to eq([])
-  context "given a dirty repo" do
-      edit_repo
-    it "reports that the repo is dirty" do
-      expect(git_profiler.clean?).to be false
BREAKS HERE
-        ui.msg cmd if debug?
BREAKS HERE
-      expect(@chef_run).to upgrade_package "cinder-common"
BREAKS HERE
-      s3_bucket.create(new_resource.name)
BREAKS HERE
-depends          'build-essential'
BREAKS HERE
-property :tarball_base_uri, String, default: 'http://archive.apache.org/dist/tomcat/'
-property :checksum_base_uri, String, default: 'http://archive.apache.org/dist/tomcat/'
-property :verify_checksum, [true, false], default: true
-property :exclude_docs, [true, false], default: true
-property :exclude_examples, [true, false], default: true
-property :exclude_manager, [true, false], default: false
-property :exclude_hostmanager, [true, false], default: false
-property :tarball_uri, String, default: ''
-property :tarball_path, String, default: lazy { |r| "#{Chef::Config['file_cache_path']}/apache-tomcat-#{r.version}.tar.gz" }
-property :tarball_validate_ssl, [true, false], default: true
BREAKS HERE
-  des_version = Mixlib::Versioning.parse(mixlib_install.artifact_info.first.version)
-# cleanup a previous backup of the chef-client on windows
-def cleanup_windows_workaround
-  directory 'c:/opscode/chef.upgrade' do
-    action :delete
-    recursive true
-# Windows does not like having files that are open deleted. We need to workaround that
-def windows_workaround
-  execute 'chef-move' do
-    command 'move c:/opscode/chef c:/opscode/chef.upgrade'
-  cleanup_windows_workaround if platform_family?('windows')
-      windows_workaround if platform_family?('windows')
-      upgrade_command = Mixlib::ShellOut.new(mixlib_install.install_command)
-      upgrade_command.run_command
BREAKS HERE
-  copyright "State Copyright &copy; 1996&ndash;2010 <a href="http://www.ngi.gov.za/">Chief Directorate: National Geo-spatial Information</a>"
-  copyright "State Copyright &copy; 1996&ndash;2013 <a href="http://www.ngi.gov.za/">Chief Directorate: National Geo-spatial Information</a>"
BREAKS HERE
-extjs = 'ext-2.3.0.zip'
-  source "http://dev.sencha.com/deploy/#{extjs}"
BREAKS HERE
-  user_home = rvm_user['home'] ||
-    "#{node['rvm']['user_home_root']}/#{rvm_user['user']}"
-
-  rvm_path          = "#{user_home}/.rvm"
-  rvmrc_template  :rvm_path => rvm_path,
-  install_rvm     :installer_url => installer_url,
-  upgrade_rvm     :upgrade_strategy => upgrade_strategy,
BREAKS HERE
-  version node['chef-server']['version']
BREAKS HERE
-attribute :vhost, :kind_of => String
BREAKS HERE
-                   "rspidel  ^Set-cookie:\ IP="
BREAKS HERE
-
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
BREAKS HERE
-  supports :status => true, :start => true, :stop => true, :restart => true
BREAKS HERE
-node.set.redis.listen_addr = "0.0.0.0"
-node.set.redis.listen_port = node.sensu.redis.port
-include_recipe "redis::server"
BREAKS HERE
-package 'fio'
-package 'bc'
-package 'htop'
-package 'sysstat'
-package 'iperf'
BREAKS HERE
-      expect { subject.cookbooks }.to raise_error
BREAKS HERE
-      ::File.join(local_conf_root, "#{daemon.type.gsub('_', '-')}.conf.d")
-        ::File.join(local_conf_root, "#{daemon.type}.conf")
-    module_function :ini_config, :local_conf_root, :unit_conf_root,
-                    :unit_drop_in_root, :daemon_drop_in_root, :unit_path
BREAKS HERE
-      mode 0700
BREAKS HERE
-          Chef::Log.debug("Node has Chef Server Executable? #{system("which chef-server > /dev/null 2>&1")}")
-          Chef::Log.debug("Node has Chef Server Ctl Executable? #{system("which chef-server-ctl > /dev/null 2>&1")}")
-          node.recipe?('chef-server') || system('which chef-server > /dev/null 2>&1') || system('which chef-server-ctl > /dev/null 2>&1')
-        if ['windows'].include?(node['platform']) 
-        elsif (chef_in_path = %x{#{which} chef-client}.chomp) && ::File.send(existence_check, chef_in_path)
BREAKS HERE
-
-default['ssh-hardening']['ssh']['server']['listen_to']                = ['0.0.0.0']
-
BREAKS HERE
-        result = "sqlite://#{path}"
BREAKS HERE
-        environment_constraints = environment['cookbook_versions']
-          cookbook_obj['metadata']['dependencies'].each_pair do |dep_name, dep_constraint|
BREAKS HERE
-version          '17.0.0'
-depends 'openstack-common', '>= 17.0.0'
-depends 'openstack-identity', '>= 17.0.0'
-depends 'openstack-image', '>= 17.0.0'
-depends 'openstack-compute', '>= 17.0.0'
-depends 'openstack-block-storage', '>= 17.0.0'
BREAKS HERE
-vim_base_pkgs = value_for_platform_family(
-  ["ubuntu", "debian", "arch"] => { "default" => ["vim"] },
-  ["redhat", "centos", "fedora", "scientific"] => { "default" => ["vim-minimal","vim-enhanced"] },
BREAKS HERE
-  auth_host identity_admin_endpoint.host
-  auth_port identity_admin_endpoint.port.to_s
-  auth_protocol identity_admin_endpoint.scheme
-  api_ver identity_admin_endpoint.path
-  auth_token keystone["admin_token"]
BREAKS HERE
-    entries << "# Last updated: #{::Time.now}"
-    entries << "#"
-    contents_sha = Digest::SHA512.hexdigest(entries[3..-1].join("\n"))
-        f.write(entries.join("\n"))
-      @current_sha ||= Digest::SHA512.hexdigest(File.readlines(hostsfile_path)[3..-1].join(""))
BREAKS HERE
-if platform_family?('rhel', 'fedora')
BREAKS HERE
-      not_if { ::File.zero?('/etc/sv/opscode-push-jobs-client/supervise/pid') }
BREAKS HERE
-      shell_out!("#{gem_bin} update --system --no-document #{source}")
BREAKS HERE
-          # List taken from: http://wiki.opscode.com/display/chef/Chef+Configuration+Settings
-          # Listed in order of preferred preference
-          possible_locations = [
-            ENV['BERKSHELF_CHEF_CONFIG'],
-            './.chef/knife.rb',
-            '~/.chef/knife.rb',
-            '/etc/chef/solr.rb',
-            '/etc/chef/solo.rb',
-            '/etc/chef/client.rb'
-          ].compact # compact in case ENV['BERKSHELF_CHEF_CONFIG'] is nil
-          location = possible_locations.find{ |location| File.exists?( File.expand_path(location) ) }
BREAKS HERE
-              shell_out!("#{node['runit']['sv_bin']} down #{service_dir_name}")
-          @sv_dir = Chef::Resource::Directory.new(sv_dir_name)
-          @run_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'run'))
-          @run_script.cookbook(new_resource.cookbook)
-          @log_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log'))
-                                                                    'run' ))
-                                                                        'run' ))
-            @log_run_script.cookbook(new_resource.cookbook)
-          @env_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'))
-            env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', var))
-          @finish_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'finish'))
-          @finish_script.cookbook(new_resource.cookbook)
-          @control_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'control'))
-                                                                            signal))
-            control_signal_file.cookbook(new_resource.cookbook)
-                                                                  new_resource.service_name))
-                                                              new_resource.service_name))
-
-          @service_link = Chef::Resource::Link.new(::File.join(service_dir_name))
BREAKS HERE
-      shell_out!("su - #{@new_resource.os_user} -c 'cd #{@new_resource.middleware_home_dir}/utils/bsu;#{@new_resource.middleware_home_dir}/utils/bsu/bsu.cmd -remove -patchlist=#{@new_resource.patch_id} -prod_dir=#{@new_resource.middleware_home_dir}/wlserver_10.3 -verbose'", :timeout => 1200).stdout.each_line do |line|
BREAKS HERE
-  mysql_virtual_alias_maps.cf
-  mysql_virtual_alias_domain_maps.cf
-  mysql_virtual_alias_domain_catchall_maps.cf
-  mysql_virtual_domains_maps.cf
-  mysql_virtual_mailbox_maps.cf
-  mysql_virtual_alias_domain_mailbox_maps.cf
-  mysql_virtual_mailbox_limit_maps.cf
BREAKS HERE
-default['cookbook-openshift3']['openshift_deployment_type'] = 'enterprise'
BREAKS HERE
-      ENV['FQDN'] = "some_localhost"
-      expect(Universe.protocol_host_port(opts)).to eql('https://some_localhost:6060')
-      expect(Universe.download_url(cookbook, version, 'https://some_localhost:6060')).to eql('https://some_localhost:6060/api/v1/cookbooks/redis/versions/1.3.1/download')
BREAKS HERE
-    @expected_output = <<-OUTPUT
BREAKS HERE
-      DeliverySugar::Cookbook.new(File.join(cookbooks_path, 'frodo/'))
-    let(:sam_cookbook) { DeliverySugar::Cookbook.new(File.join(cookbooks_path, 'sam/')) }
-      expect(books.length).to eql(2)
-      expect(books).to eql([frodo_cookbook, sam_cookbook])
BREAKS HERE
-    apt_prefrence 'cloudera_repo' do
BREAKS HERE
-    expect(ConfigIt.has_key?(:monkey)).to be false
-    expect(ConfigIt.has_key?(:monkey)).to be true
-      expect(@klass.blah.has_key?(:x)).to be false
-      expect(@klass.blah.has_key?(:x)).to be true
-      expect(@klass.has_key?(:blah)).to be true
-      <<-EOH
----
-foo:
-  - bar
-  - baz
-  - matazz
-alpha: beta
-      <<-EOH
-{
-  "foo": [
-    "bar",
-    "baz",
-    "matazz"
-  ],
-  "alpha": "beta"
-}
-      <<-EOH
-foo = ["bar", "baz", "matazz"]
-alpha = "beta"
BREAKS HERE
-        destination = File.join(path, cached_cookbook.cookbook_name)
-        FileUtils.ln_r(cached_cookbook.path, destination, force: true)
BREAKS HERE
-case node['platform']
-when 'freebsd'
-  default['postfix']['aliases'] = {
-    'MAILER-DAEMON' =>  'postmaster',
-    'bin' =>            'root',
-    'daemon' =>         'root',
-    'named' =>          'root',
-    'nobody' =>         'root',
-    'uucp' =>           'root',
-    'www' =>            'root',
-    'ftp-bugs' =>       'root',
-    'postfix' =>        'root',
-    'manager' =>        'root',
-    'dumper' =>         'root',
-    'operator' =>       'root',
-    'abuse' =>          'postmaster'
-  }
-else
-  default['postfix']['aliases'] = {}
-end
BREAKS HERE
-  notifies :run, 'execute[read-sysctl]', :immediately
-execute 'read-sysctl' do
-  not_if { node.container? }
-  command '/sbin/sysctl -p'
-  action :nothing
-end
-# Safety check in case we missed a notification above
-execute 'reread-sysctl' do
-  not_if { node.container? || FB::Sysctl.sysctl_in_sync?(node) }
-  command '/sbin/sysctl -p'
BREAKS HERE
-    it { is_expected.to eq('yum' => '> 3.0.0') }
BREAKS HERE
-      Chef::Log.error("POST payload: #{payload}")
BREAKS HERE
-
BREAKS HERE
-EOF
BREAKS HERE
-default["chef-client"]["log_file"]    = nil
BREAKS HERE
-  if node['platform_version'].to_f >= 6.5
BREAKS HERE
-              "read"   => { "groups" => %w{admins users} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{admins users clients} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{admins users clients} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{admins users} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{admins} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{admins} },
-              "grant"  => { "groups" => %w{admins} },
-              "read"   => { "groups" => %w{billing-admins} },
-              "grant"  => { "groups" => %w{} },
BREAKS HERE
-          expect(chef_run).to render_config_file(file.name)\
-            .with_section_content('DEFAULT', /^rpc_backend=rabbit$/)
-          expect(chef_run).to render_config_file(file.name)\
-            .with_section_content('DEFAULT', /^rpc_backend=qpid$/)
BREAKS HERE
-node[:deploy].each do |application, deploy|
-  default[:deploy][application][:database][:port] = 3306 
-end
-
BREAKS HERE
-template "/etc/quantum/metadata_agent.ini" do
-  notifies :restart, "service[quantum-metadata-agent]", :immediately
-platform_options["quantum_metadata_agent_packages"].each do |pkg|
-service "quantum-metadata-agent" do
-  service_name platform_options["quantum_metadata_agent_service"]
BREAKS HERE
-      return true
-      return false
BREAKS HERE
-      package package_name do
-        version package_version if package_version
-        options package_options if package_options
-      package package_name do
BREAKS HERE
-  :release          => '1',
BREAKS HERE
-  when 'debian', 'rhel', 'suse', 'windows'
BREAKS HERE
-    it 'debian bundler' do
-      expect(chef_run).to install_gem_package(:bundler)
-      expect(chef_run).to create_link('/usr/local/bin/bundle').with(to: '/usr/bin/bundle')
-    it 'rhel bundler' do
-      expect(chef_run_rhel).to install_gem_package(:bundler)
-      expect(chef_run_rhel).to create_link('/usr/local/bin/bundle').with(to: '/usr/local/bin/bundler')
BREAKS HERE
-           restart_policy != 'no' &&
-           restart_policy != 'always' &&
-           restart_policy != 'unless-stopped' &&
-           restart_policy != 'on-failure'
-            !(hostname.nil? || hostname.empty?) ||
-            !(mac_address.nil? || mac_address.empty?)
BREAKS HERE
-                                      :log_level => :debug,
BREAKS HERE
-      "http://packages.treasuredata.com/2/redhat/$releasever/$basearch"
BREAKS HERE
-if node['openstack']['compute']['libvirt']['images_type'] == 'rbd'
-  rbd_secret_uuid = get_secret node['openstack']['compute']['libvirt']['rbd']['rbd_secret_name']
-end
-
-    rbd_secret_uuid: rbd_secret_uuid,
BREAKS HERE
-openstack_user service_user do
-  domain_name service_domain_name
-  role_name service_role
-  user_name service_user
-  connection_params connection_params
-  action :grant_domain
-end
-
BREAKS HERE
-        cookbook_paths.each do |path|
-          upload(path, provisioning_path)
-      # TODO should watch for name collision here
BREAKS HERE
-require 'uri'
-require 'net/http'
-begin
-  require 'chef/http/http_request' # Chef >= 11.8
-rescue LoadError
-  require 'chef/rest/rest_request' # Chef <= 11.6.2
-end
-
BREAKS HERE
-        echo "1" > /proc/sys/net/ipv4/tcp_keepalive_time
BREAKS HERE
-          converge_by("configure service without enabling #{@new_resource}") do
-            configure_service # Do this every run, even if service is already enabled and running
-            Chef::Log.info("#{@new_resource} configured")
-          end
-          converge_by("configure service #{@new_resource}") do
-            configure_service # Do this every run, even if service is already enabled and running
-            Chef::Log.info("#{@new_resource} configured")
-          end
-            converge_by("enable service #{@new_resource}") do
-              enable_service
-              Chef::Log.info("#{@new_resource} enabled")
-            end
-              env_files.each do |file| 
-         
-          unless inside_docker?  
-              Chef::Log.debug("skipping */supervise/ok check inside docker")
-            new_resource.updated_by_last_action(true)
-              )
-              )
-              )
BREAKS HERE
-  service_name ((service_name).gsub(/v2/, ''))
-  service_type ((service_type).gsub(/v2/, ''))
-  endpoint_adminurl ((::URI.decode admin_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
-  endpoint_internalurl ((::URI.decode internal_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
-  endpoint_publicurl ((::URI.decode public_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
-  service_name ((service_name).gsub(/v2/, ''))
-  service_type ((service_type).gsub(/v2/, ''))
-  endpoint_adminurl ((::URI.decode admin_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
-  endpoint_internalurl ((::URI.decode internal_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
-  endpoint_publicurl ((::URI.decode public_cinder_api_endpoint.to_s).gsub(/v2/, 'v1'))
BREAKS HERE
-  Chef::Application.fatal!('Acme requires that a contact is specified') if node['letsencrypt']['contact'].size == 0
-  if node['letsencrypt']['private_key'].nil?
-    private_key = OpenSSL::PKey::RSA.new(2048)
-  else
-    private_key = OpenSSL::PKey::RSA.new(node['letsencrypt']['private_key'])
-  end
-  cert.subject = cert.issuer = OpenSSL::X509::Name.new([
-    ['CN', cn, OpenSSL::ASN1::UTF8STRING]
-  ])
BREAKS HERE
-Then /^the service resource warning 006 should be (valid|invalid)$/ do |valid|
BREAKS HERE
-# rather than the hostname for the agent or nodename for chef-handler.
BREAKS HERE
-default["keystone"]["db_server_chef_role"] = "nova-db"
-
-default["keystone"]["bind_interface"] = "lo"
-
-
BREAKS HERE
-    supports :manage_home => true
-template "/etc/stunnel/stunnel.conf" do
-  source "stunnel.conf.erb"
-template "/etc/default/stunnel4" do
-  source "stunnel.default.erb"
-service "stunnel" do
-  supports :restart => true, :reload => true
BREAKS HERE
-      xml_str = http_get(
-      ).body
-      xml = xmlify(xml_str)
BREAKS HERE
-  storwize_pass = get_password 'user', node['openstack']['block-storage']['storwize']['san_login']
BREAKS HERE
-  command "#{source_directory}/utils/cron_banip.sh"
BREAKS HERE
-                                     end
BREAKS HERE
-  it 'node[\'applications\']' do
-                                                       aws_opsworks_app.merge(shortname: 'a2')
-      solo_node.set['applications'] = ['a1']
BREAKS HERE
-      node['platform_version'].to_i >= 7 ? 'compat-db47' : 'db4-utils'
BREAKS HERE
-  execute "rabbitmqctl delete_user #{new_resource.user}" do
-    Chef::Log.info "Deleting RabbitMQ user '#{new_resource.user}'."
-    new_resource.updated_by_last_action(true)
-end
BREAKS HERE
-      not_if { ::File == 0('/etc/sv/opscode-push-jobs-client/supervise/pid') }
BREAKS HERE
-    '*.emerg' => '*'
BREAKS HERE
-        :cpuvendor => cpuVendor
BREAKS HERE
-when "Debian", "Ubuntu"
BREAKS HERE
-      (@new_resource.ttl > 0 && @new_resource.ttl != @current_resource.ttl) ||
-      (@new_resource.target.is_a?(String) && @new_resource.target != @current_resource.target) ||
-      (@new_resource.target.is_a?(Array) && !(@new_resource.target - @current_resource.target).empty?)
-      converge_by("Changing #{ @new_resource.host_name }") do
-    converge_by("Creating #{ @new_resource.host_name }") do
-
-  if @current_resource.exists 
-    converge_by("Deleting #{ @current_resource.host_name }") do
-    raise "target property must be an array for record_type A"
-  
-  
-  @command = locate_sysnative_cmd("dnscmd.exe")
-  
-    
-    if m.length == 0
-      if m.length == 0
-        @current_resource.exists = false    
-      m.each do | match |
-  if (@current_resource.record_type != @new_resource.record_type)
-  
-    (@current_resource.target - @new_resource.target).each do | address |
-    
-    if (@current_resource.ttl == @new_resource.ttl)
-      addresses = (@new_resource.target - @current_resource.target)
-    else
-      addresses = @new_resource.target
-    end
-    addresses.each do | address |
-def executeCommand! (mode, options)
BREAKS HERE
-unless Gem::Requirement.new(">= 12.0").satisfied_by?(Gem::Version.new(Chef::VERSION))
-  raise "The compat_resources cookbook does not support chef versions older than Chef 12.0.0"
-end
-
BREAKS HERE
-      @dependenciesz.delete(dependency.to_s)
-    #   a hash containing group names as keys and an array of Berkshelf::Dependencys
BREAKS HERE
-# compute host address libvirt/QEMU VNC consoles should listen on
-vnc_bind_ip = address_for node['openstack']['compute']['libvirt']['bind_interface']
-
-    vncserver_listen: vnc_bind_ip,
-    vncserver_proxyclient_address: vnc_bind_ip,
BREAKS HERE
-default['openstack']['endpoints']['mq']['host'] = '127.0.0.1'
-default['openstack']['endpoints']['mq']['port'] = '5672'
-  default['openstack']['mq'][svc]['notification_topic'] = 'notifications'
-
-###################################################################
-# Overrides and additional attributes for individual services
-###################################################################
-# bare-metal
-default['openstack']['mq']['bare-metal']['rabbit']['notification_topic'] =
-  node['openstack']['mq']['bare-metal']['notification_topic']
-default['openstack']['mq']['bare-metal']['control_exchange'] = 'ironic'
-
-# block-storage
-default['openstack']['mq']['block-storage']['rabbit']['notification_topic'] =
-  node['openstack']['mq']['block-storage']['notification_topic']
-default['openstack']['mq']['block-storage']['control_exchange'] = 'cinder'
-
-# image
-default['openstack']['mq']['image']['notifier_strategy'] = 'noop'
-default['openstack']['mq']['image']['notification_topic'] = 'glance_notifications'
-default['openstack']['mq']['image']['rabbit']['notification_topic'] =
-  node['openstack']['mq']['image']['notification_topic']
-default['openstack']['mq']['image']['control_exchange'] = 'glance'
-
-# identity
-# AMQP topics used for openstack notifications, can be comma-separated values
-default['openstack']['mq']['identity']['notification_topics'] = 'notifications'
-default['openstack']['mq']['identity']['control_exchange'] = 'identity'
-
-# network
-# AMQP topics used for openstack notifications, can be comma-separated values
-default['openstack']['mq']['network']['notification_topics'] = 'notifications'
-default['openstack']['mq']['network']['control_exchange'] = 'neutron'
-
-# compute
-default['openstack']['mq']['compute']['control_exchange'] = 'nova'
-
-# orchestration
-default['openstack']['mq']['orchestration']['control_exchange'] = 'heat'
-
-# telemetry
-default['openstack']['mq']['telemetry']['control_exchange'] = 'ceilometer'
BREAKS HERE
-default["openstack"]["cinder"]["services"]["volume"]["scheme"] = "http"
-default["openstack"]["cinder"]["services"]["volume"]["network"] = "public"
-default["openstack"]["cinder"]["services"]["volume"]["port"] = 8776
-default["openstack"]["cinder"]["services"]["volume"]["path"] = "/v1"
-default["cinder"]["services"]["volume"]["scheme"] = "http"
-default["cinder"]["services"]["volume"]["network"] = "public"
-default["cinder"]["services"]["volume"]["port"] = 8776
-default["cinder"]["services"]["volume"]["path"] = "/v1"
-default["openstack"]["cinder"]["db"]["name"] = "cinder"
-default["openstack"]["cinder"]["db"]["username"] = "cinder"
-# TODO: These may need to be glance-registry specific.. and looked up by glance-api
-default["openstack"]["cinder"]["service_tenant_name"] = "service"
-default["openstack"]["cinder"]["service_user"] = "cinder"
-default["openstack"]["cinder"]["service_role"] = "admin"
-default["openstack"]["cinder"]["syslog"]["use"] = false
-default["openstack"]["cinder"]["syslog"]["facility"] = "LOG_LOCAL2"
-default["openstack"]["cinder"]["syslog"]["config_facility"] = "local2"
-# platform-specific settings
-  default["openstack"]["cinder"]["platform"] = {
-    "mysql_python_packages" => [ "MySQL-python" ],
-    "cinder_packages" => [ "openstack-cinder", "openstack-swift" ],
-  default["openstack"]["cinder"]["platform"] = {
-    "mysql_python_packages" => [ "python-mysqldb" ],
-    "cinder_packages" => [ "cinder-scheduler", "python-swift", "python-keystoneclient", "cinder-volume", "cinder-api" ],
-    "package_overrides" => "-o Dpkg::Options::='--force-confold' -o Dpkg::Options::='--force-confdef'",
-    "cinder_volume_service" => "cinder-volume"
BREAKS HERE
-  mode 0o640
BREAKS HERE
-  spec.split(/\/|-|,/).each do |x|
BREAKS HERE
-  type node['kibana']['webserver']
-  not_if { node['kibana']['webserver'].empty? }
BREAKS HERE
-property :options_file, String, default: lazy { default_property_for(:options_file) }
-property :conf_file, String, default: lazy { default_property_for(:conf_file) }
-property :query_log, String
-  cookbook_file "#{bind_service.sysconfdir}/named.rfc1912.zones" do
-    cookbook_file "#{bind_service.vardir}/#{var_file}" do
-  rndc_key = default_property_for(:rndc_key_file)
-    command "rndc-confgen -a -c #{rndc_key} -r /dev/urandom; chown #{bind_service.run_user}:#{bind_service.run_group} #{rndc_key}"
-    creates rndc_key
-      mode 0o644
-        vardir: bind_service.vardir,
-        query_log: new_resource.query_log,
-      notifies :restart, 'bind_service[default]', :immediately
-        sysconfdir: bind_service.sysconfdir,
-      notifies :restart, 'bind_service[default]', :immediately
BREAKS HERE
-        "0fde3dd65385e87cf7caaa5ef459613c", 
BREAKS HERE
-if node[:stig][:network][:ipv6] == "no"
BREAKS HERE
-default['kibana']['rubyversion'] = '1.9.1'
BREAKS HERE
-  compile_time true
BREAKS HERE
-    [resource.collaborator_users, resource.owner].flatten
BREAKS HERE
-        return is_new_value?(document, xpath, value_to_check) || value_to_check == '' ? false : true
BREAKS HERE
-  "#{node['platform'].capitalize} #{codename}"
BREAKS HERE
-# ruby
BREAKS HERE
-# must be available on the __PATH__. 
-#<> Base installation directory of the extras archive. 
-#  Accept license terms when doing archive-based installation. 
-#  Must be set to `true` or the installation fails. 
BREAKS HERE
-attribute :config_path, kind_of: String, default: lazy { "#{home_path}\\#{instance}.config" }
-attribute :cert_file, kind_of: String, default: lazy { "#{home_path}\\tentacle_cert.txt" }
BREAKS HERE
-  'IPTABLES_STATUS_LINENUMBERS' => 'yes'
-  'IP6TABLES_STATUS_LINENUMBERS' => 'yes'
BREAKS HERE
-      Chef::Config.from_file(example_knife_rb)
-      config = Chef::Config.save
-      Chef::Config.reset
-      config
-    let(:results) { double("decrypted hash") }
-        expect(subject).to receive(:load_server_config)
-        expect(subject).to receive(:unload_server_config)
-        allow(Chef::EncryptedDataBagItem).to receive(:load_secret).and_raise("ERROR")
-        expect { subject.encrypted_data_bag_item(bag_name, item_id) }.to raise_error("ERROR")
-      before_config = Chef::Config.save
BREAKS HERE
-          @default_log_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(::File.join("/var/log/#{new_resource.service_name}"), run_context)
-              d.recursive(true)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-  case node['sql_server']['version'] 
-    
BREAKS HERE
-      mechanism_drivers: mechanism_drivers
BREAKS HERE
-  mode   00640
-  only_if { platform_family? %w{fedora rhel} }
-    platform_family?(%w{debian})
BREAKS HERE
-  list = [ @list ].flatten
BREAKS HERE
-    if es_install.type == 'package'
BREAKS HERE
-    action :upgrade
-    action :upgrade
-  mode 00600
BREAKS HERE
-          node['platform_version'].to_i == 6
-          node['platform_version'].to_i == 7
BREAKS HERE
-    :aem55 => 'curl -f --user <%= admin_user %>:<%= admin_password %> -F rep:password="<%= password %>" http://localhost:<%= port %><%= path %>/<%= user %>.rw.html'
BREAKS HERE
-    bind_mq = node['openstack']['bind_service']['mq']
-    bind_mq_address = bind_address bind_mq
-    url = "rabbit://#{mq_user}:#{mq_password}@#{bind_mq_address}:#{mq_port}"
-    url += "/#{vhost}" unless vhost == '/'
BREAKS HERE
-version IO.read(File.join(File.dirname(__FILE__), 'VERSION')) rescue '0.0.1'
BREAKS HERE
-Chef::Log.debug("Found chef-client in #{client_bin}")
BREAKS HERE
-    
-
BREAKS HERE
-    node['datadog']['agent_verison']
BREAKS HERE
-def join_cluster(cluster_name)
-  cmd = "rabbitmqctl join_cluster --ram #{cluster_name}"
-    join_cluster(var_node_name_to_join)
-    Chef::Log.info("[rabbitmq_cluster] Node #{var_node_name} joined in #{var_node_name_to_join}")
BREAKS HERE
-default['couch_db']['config']['log']['level'] = "info"
BREAKS HERE
-# rabbitmq-server is not well-behaved as far as managed services goes
-# we'll need to add a LWRP for calling rabbitmqctl stop
-# while still using /etc/init.d/rabbitmq-server start
-# because of this we just put the rabbitmq-env.conf in place and let it rip
-
-include_recipe "erlang::default"
-if node['rabbitmq']['cluster']
-    # If this already exists, don't do anything
-    # Changing the cookie will stil have to be a manual process
-    template "/var/lib/rabbitmq/.erlang.cookie" do
-      source "doterlang.cookie.erb"
-      owner "rabbitmq"
-      group "rabbitmq"
-      mode 0400
-      not_if { File.exists? "/var/lib/rabbitmq/.erlang.cookie" }
-    end
-  stop_command "/usr/sbin/rabbitmqctl stop"
-  supports :status => true, :restart => true
BREAKS HERE
-  timing = [:delayed, :immediately].include?(new_resource.timing) ? new_resource.timing : :delayed
-  a = execute "nxensite #{new_resource.name}" do
-    notifies :reload, node['openresty']['service']['resource'], timing
-
-  new_resource.updated_by_last_action(a.updated_by_last_action?)
-  timing = [:delayed, :immediately].include?(new_resource.timing) ? new_resource.timing : :delayed
-  a = execute "nxdissite #{new_resource.name}" do
-    notifies :reload, node['openresty']['service']['resource'], timing
-
-  new_resource.updated_by_last_action(a.updated_by_last_action?)    
BREAKS HERE
-            klass = Chef::Resource.resource_for_node(name, node)
BREAKS HERE
-default['ntp']['statsdir'] = "/var/log/ntpstats"
BREAKS HERE
-property :path, kind_of: String, name_attribute: true
BREAKS HERE
-  # leave this on by default
BREAKS HERE
-include_recipe "apache2"
-gem_package "builder" do
-  source "gem_server.conf.erb"
-    :virtual_host_name => node['gem_server']['virtual_host_name'],
-    :virtual_host_alias => node['gem_server']['virtual_host_alias'],
-    :gem_directory => node['gem_server']['directory']
-  owner "root"
-apache_site "gem_server.conf"
-execute "index-gem-repository" do
-  owner "root"
-  group "root"
-  source "packages"
-  owner "root"
-  group "root"
-  mode "755"
-  notifies :run, "execute[index-gem-arepository]"
BREAKS HERE
-            "Berksfile contains multiple dependencies named '#{name}'. Use only one, or put them in different groups."
-            "Could not find cookbooks #{missing.collect{ |c| "'#{c}'" }.join(', ')} " +
-            "in any of the dependencies. #{missing.size == 1 ? 'Is it' : 'Are they' } in your Berksfile?"
BREAKS HERE
-version          '0.4.1'
BREAKS HERE
-  "default" => ["jetty"]
BREAKS HERE
-  if node['platform_version'].to_f < 7
BREAKS HERE
-include_recipe 'bamboo::crowd_sso' unless node[:bamboo][:crowd] == false
BREAKS HERE
-keyring = "/etc/ceph/#{node['ceph']['cluster']}.mon.keyring"
BREAKS HERE
-default[:gradle][:checksum] = '11f8bfd1551c9a9c6cef3cc148d685570e7782a5a0980e839451ebc89d89339f'
BREAKS HERE
-
-template '/etc/init.d/nginx' do
-  source 'nginx.init.erb'
-  owner 'root'
-  group 'root'
-  mode 00755
-  variables(
-    :src_binary => node['openresty']['binary'],
-    :pid => node['openresty']['pid']
-  )
-end
-
-defaults_path = case node['platform_family']
-  when 'debian'
-    '/etc/default/nginx'
-  else
-    '/etc/sysconfig/nginx'
-end
-
-template defaults_path do
-  source 'nginx.sysconfig.erb'
-  owner 'root'
-  group 'root'
-  mode 00644
-end
-
-
-service 'nginx' do
-  supports :status => true, :restart => true, :reload => true
-  action [ :enable, :start ]
-end
BREAKS HERE
-      @current_resource ||= Resource::JenkinsCredentialsUser.new(new_resource.name)
BREAKS HERE
-version          '15.0.0'
BREAKS HERE
-  describe '.unpack' do
-    let(:target) { '/foo/bar' }
-    let(:destination) { '/destination/bar' }
-    let(:file) { double('file') }
-    let(:gzip_reader) { double('gzip_reader') }
-    before do
-      File.stub(:open).with(target, 'rb').and_return(file)
-      Zlib::GzipReader.stub(:new).with(file).and_return(gzip_reader)
-      Archive::Tar::Minitar.stub(:unpack).with(gzip_reader, destination)
-    end
-    it 'unpacks the tar' do
-      File.should_receive(:open).with(target, 'rb')
-      ::IO.should_receive(:binread).with(target, 2).and_return([0x1F, 0x8B].pack("C*"))
-      Zlib::GzipReader.should_receive(:new).with(file)
-      Archive::Tar::Minitar.should_receive(:unpack).with(gzip_reader, destination)
-      expect(Berkshelf::CommunityREST.unpack(target, destination)).to eq(destination)
-  end
-  describe '.uri_escape_version' do
-    it 'returns a string' do
-      expect(Berkshelf::CommunityREST.uri_escape_version(nil)).to be_a(String)
-    end
-    it 'converts a version to it\'s underscored version' do
-      expect(Berkshelf::CommunityREST.uri_escape_version('1.1.2')).to eq('1_1_2')
-    end
-    it 'works when the version has more than three points' do
-      expect(Berkshelf::CommunityREST.uri_escape_version('1.1.1.2')).to eq('1_1_1_2')
-    end
-    it 'works when the version has less than three points' do
-      expect(Berkshelf::CommunityREST.uri_escape_version('1.2')).to eq('1_2')
-  end
-  describe '.version_from_uri' do
-    it 'returns a string' do
-      expect(Berkshelf::CommunityREST.version_from_uri(nil)).to be_a(String)
-    end
-    it 'extracts the version from the URL' do
-      expect(Berkshelf::CommunityREST.version_from_uri('/api/v1/cookbooks/nginx/versions/1_1_2')).to eq('1.1.2')
-    end
-    it 'works when the version has more than three points' do
-      expect(Berkshelf::CommunityREST.version_from_uri('/api/v1/cookbooks/nginx/versions/1_1_1_2')).to eq('1.1.1.2')
-    end
-    it 'works when the version has less than three points' do
-      expect(Berkshelf::CommunityREST.version_from_uri('/api/v1/cookbooks/nginx/versions/1_2')).to eq('1.2')
-
-
-
-  subject do
-    Berkshelf::CommunityREST.new(api_uri)
-  end
-      Berkshelf::CommunityREST.should_receive(:unpack).with('/foo/bar').once
BREAKS HERE
-version          '2.1.1'
BREAKS HERE
-BOOLEAN = [TrueClass, FalseClass]
BREAKS HERE
-    action :Create
BREAKS HERE
-if Gem::Requirement.new("< #{ChefCompat.CHEF_UPSTREAM_VERSION}").satisfied_by?(Gem::Version.new(Chef::VERSION))
BREAKS HERE
-      base_uri_string = Config.artifactory.strip
-      base_uri_string << '/' unless base_uri_string.end_with?('/')
-      base_uri = URI(base_uri_string)
-      # Open the HTTP connection to artifactory.
-      connection = Net::HTTP.new(base_uri.host, base_uri.port)
-      if base_uri.scheme == 'https'
-        connection.use_ssl = true
-        # Mimic the behavior of the Cookbook uploader for SSL verification.
-        if ENV['STOVE_NO_SSL_VERIFY'] || !Config.ssl_verify
-          connection.verify_mode = OpenSSL::SSL::VERIFY_NONE
-        end
-      connection.start do |http|
-        # Artifactory doesn't prevent uploading over an existing release in
-        # some cases so let's check for that. Seriously never do this, go delete
-        # and then re-upload if you have to.
-        check_uri = URI("#{base_uri}api/v1/cookbooks/#{cookbook.name}/versions/#{cookbook.version}")
-        check_request = Net::HTTP::Get.new(check_uri)
-        check_request['X-Jfrog-Art-Api'] = Config.artifactory_key.strip
-        response = http.request(check_request)
-        # Artifactory's version of the cookbook_version endpoint returns an
-        # empty 200 on an unknown version.
-        if response.code != '200' || !response.body.empty?
-          raise Error::CookbookAlreadyExists.new(cookbook: cookbook)
-        end
-        upload_uri = URI("#{base_uri}api/v1/cookbooks/#{cookbook.name}.tgz")
-        upload_request = Net::HTTP::Post.new(upload_uri)
-        upload_request.body_stream = cookbook.tarball(extended_metadata)
-        upload_request.content_length = upload_request.body_stream.size
-        upload_request['Content-Type'] = 'application/x-binary'
-        upload_request['X-Jfrog-Art-Api'] = Config.artifactory_key.strip
-        response = http.request(upload_request)
-        if response.code != '201'
-          response.error!
BREAKS HERE
-version          "2.7.1"
BREAKS HERE
-                                  when 'rhel', 'fedora', 'suse'
-                                  when 'rhel', 'fedora'
BREAKS HERE
-    property :security_opts, [String, ArrayType]
BREAKS HERE
-      path = File.expand_path(path)
BREAKS HERE
-default['kibana']['nginx']['source'] = node['kibana']['version'] == '4' ? 'nginx4.conf.erb' : 'nginx.conf.erb' 
BREAKS HERE
-      @locations = options[:locations] || Array.new
-      attr_reader :locations
BREAKS HERE
-    file "#{node['nginx']['directories']['conf_dir']}/conf.d/#{f}.conf"
BREAKS HERE
-alias_method :action_add, :action_create
-alias_method :action_remove, :action_delete
BREAKS HERE
-version          '1.7.4'
BREAKS HERE
-    when "redhat", "fedora"
-      %w{gcc gcc-c++ kernel-evel make}
BREAKS HERE
-  mode 0755
-  mode 00600
BREAKS HERE
-      property :record_name,   kind_of: String, name_property: true
-      property :domain,        kind_of: String
-      property :name,          kind_of: String, required: true
-      property :type,          kind_of: String, equal_to: %w(A CNAME ALIAS MX SPF URL TXT NS SRV NAPTR PTR AAAA SSHFP HFINO), required: true
-      property :content,       kind_of: [String, Array]
-      property :ttl,           kind_of: Integer, default: 3600
-      property :priority,      kind_of: Integer
-      property :regions,       kind_of: [NilClass, Array], default: nil
BREAKS HERE
-    it 'assigns @recently_updated_cookbook_versions' do
-      expect(assigns[:recently_updated_cookbook_versions]).to_not be_nil
-    it 'orders cookbooks by @recently_updated_cookbook_versions' do 
-      expect(assigns[:recently_updated_cookbook_versions].first).to eq(cookbook2_versionA)
-      expect(assigns[:recently_updated_cookbook_versions].last).to eq(cookbook1_versionA)
-    it "returns unique cookbooks when ordered by @recently_updated_cookbook_versions" do 
-      
-      expect(assigns[:recently_updated_cookbook_versions]).to include(cookbook1_versionA)
-      expect(assigns[:recently_updated_cookbook_versions].count).to eq 2
BREAKS HERE
-      expect(chef_run).to run_execute('find /etc/apache2/sites-enabled -maxdepth 1 -mindepth 1 -exec rm -rf {} \;')
-        expect(chef_run_rhel).to run_execute('find /etc/httpd/sites-enabled -maxdepth 1 -mindepth 1 -exec rm -rf {} \;')
BREAKS HERE
-name              'openstack-ops-database'
-maintainer       'openstack-chef'
-license           'Apache 2.0'
-description       'Provides the shared database configuration for Chef for OpenStack.'
-version           '11.0.0'
-%w{ fedora ubuntu redhat centos suse }.each do |os|
BREAKS HERE
-      Chef::DataBagItem.load(bag, id)
BREAKS HERE
-    describe "Policyfile.rb" do
-      let(:file) { File.join(tempdir, "new_cookbook", "Policyfile.rb") }
-      let(:expected_content) do
-        <<-POLICYFILE_RB
-      end
-
-      before do
-        Dir.chdir(tempdir) do
-          allow(cookbook_generator.chef_runner).to receive(:stdout).and_return(stdout_io)
-          cookbook_generator.run
-      end
-
-      it "has a run_list and cookbook path that will work out of the box" do
-        expect(IO.read(file)).to eq(expected_content)
-      end
-    end
-
-    describe ".kitchen.yml" do
-      before do
-        Dir.chdir(tempdir) do
-          allow(cookbook_generator.chef_runner).to receive(:stdout).and_return(stdout_io)
-          cookbook_generator.run
-      let(:file) { File.join(tempdir, "new_cookbook", ".kitchen.yml") }
-      let(:expected_content) do
-        <<-KITCHEN_YML
-      end
-
-      it "uses the policyfile_zero provisioner" do
-        expect(IO.read(file)).to eq(expected_content)
-    end
-
-    describe "test/integration/default/serverspec/default_spec.rb" do
-      let(:file) { File.join(tempdir, "new_cookbook", "test", "integration", "default", "serverspec", "default_spec.rb") }
-      include_examples "a generated file", :cookbook_name do
-        let(:line) { "describe 'new_cookbook::default' do" }
-      end
BREAKS HERE
-        cmd << %Q{ #{adjust_rsync_path_on_client(source_path)} :#{adjust_rsync_path_on_node(target_path)}}
BREAKS HERE
-version          '17.0.0'
BREAKS HERE
-      @files         = Array.new
-      @manifest      = Hashie::Mash.new(
-        recipes: Array.new,
-        definitions: Array.new,
-        libraries: Array.new,
-        attributes: Array.new,
-        files: Array.new,
-        templates: Array.new,
-        resources: Array.new,
-        providers: Array.new,
-        root_files: Array.new
-      )
BREAKS HERE
-      banner "knife tidy server_report (options)"
BREAKS HERE
-  # For enabling HTTPS transport in dsc recipe
-  default['powershell']['winrm']['thumbprint'] = '75A3C92D9D86BB721C3AFED6A86F56C464213E9F'	# change this
BREAKS HERE
-    if @overlay
-    if @overlay
BREAKS HERE
-  locations = node.send(new_resource.precedence)[:nginx_conf][:locations].to_hash.merge(new_resource.locations)
-  options = node.send(new_resource.precedence)[:nginx_conf][:options].to_hash.merge(new_resource.options)
-  upstream = node.send(new_resource.precedence)[:nginx_conf][:upstream].to_hash.merge(new_resource.upstream)
-    if new_resource.socket && locations.has_key?('/')
-      locations['/']['proxy_pass'] = node[:nginx_conf][:pre_socket].to_s + new_resource.socket
BREAKS HERE
-      Chef::Log.warn('current resource was nil so we will create')
-      Chef::Log.warn('current resource was not nil so we will update')
-    Chef::Log.warn("Checking if the path of #{new_resource.share_name} differs")
-    Chef::Log.warn("Running 'Remove-SmbShare -Name #{new_resource.share_name} -Force' to remove the share")
-    Chef::Log.warn("Updating the share #{new_resource.share_name}")
-    Chef::Log.warn("Running '#{update_command}' to update the share")
-    Chef::Log.warn("Creating #{new_resource.share_name}")
-    Chef::Log.warn("Running '#{share_cmd}' to create the share")
-        Chef::Log.warn("Running 'Grant-SmbShareAccess -Name \"#{new_resource.share_name}\" -AccountName \"#{new_resource.send("#{perm_type}_users").join(',')}\" -Force -AccessRight #{perm_type}' to update the permissions")
-    Chef::Log.warn("Revoking users: #{users.join(',')}")
BREAKS HERE
-%w( vim git libxml2-dev libxslt1-dev zlib1g-dev liblzma-dev ).each do |pkg|
BREAKS HERE
-        ip_addresses = open("http://169.254.169.254/latest/meta-data/network/interfaces/macs/#{mac}/local-ipv4s", options = { proxy: false }) { |f| f.read.split("\n") }
-        eni_id = open("http://169.254.169.254/latest/meta-data/network/interfaces/macs/#{mac}/interface-id", options = { proxy: false }, &:gets)
BREAKS HERE
-  only_if { wildfly['mode'] == 'domain' && (!::File.exist?(::File.join(wildfly['base'], '.chef_deployed')) ||  wildfly['enforce_config']) }
BREAKS HERE
-    #{node['eucalyptus']['enterprise']['clientcert']}
-    #{node['eucalyptus']['enterprise']['clientkey']}
BREAKS HERE
-CREATE USER 'root'@'%' IDENTIFIED BY '#{new_resource.initial_root_password}' ;
BREAKS HERE
-if node['postfix']['use_relay_restirictions_maps']
BREAKS HERE
-        expect(chef_run).to checkout_git("#{Chef::Config[:file_cache_path]}/prometheus-0.12.0").with(
BREAKS HERE
-        role_name: role_name,
BREAKS HERE
-default[:sysctl][:params][:net][:ipv6][:conf][:all][:forwarding] = 0
BREAKS HERE
-        it "runs chef-client for the first time on windows" do
-        it "runs chef-client for the first time on windows" do
BREAKS HERE
-      @solution ||= Solve.it!(graph, graph_demands)
-      cookbooks_in_run_list.inject({}) do |local_artifacts, cookbook_name|
-        if cookbook_version_fixed?(cookbook_name)
-          local_artifacts[cookbook_name] = cache_manager.cookbook_dependencies(cookbook_name)
-      if cookbook_version_fixed?(cookbook_name)
-        version = cache_manager.cookbook_version(cookbook_name)
-      if source_options = cookbook_source_overrides[cookbook_name]
-        SOURCE_TYPES_WITH_FIXED_VERSIONS.any? { |type| source_options.key?(type) }
-      raise "TODO"
BREAKS HERE
-
BREAKS HERE
-  Chef::Log.debug("Found gem version #{rubygems_version}. Desired version is #{compatible_rubygems_version}")
BREAKS HERE
-      @config ||= begin
-        Chef::Config.from_file(config_path)
-        Chef::Config
-      end
BREAKS HERE
-# Resource:: cpe_crypt_authdb
-# TODO: This entire resource needs to be re-written with via the following
-# method https://github.com/macadmins/puppet-authpluginmech
BREAKS HERE
-
-# Grant default domain to user with role of Service Tenant ##
-openstack_user service_user do
-  domain_name service_domain_name
-  role_name service_role
-  user_name service_user
-  connection_params connection_params
-  action :grant_domain
-end
BREAKS HERE
-    if ENV['FIERI_KEY'] == params['fieri_key']
-      cookbook_version = Cookbook.with_name(
-        params[:cookbook_name]
-      ).first!.get_version!(params[:cookbook_version])
-
-      create_metric(
-        cookbook_version,
-        QualityMetric.foodcritic_metric,
-        params[:foodcritic_failure],
-        params[:foodcritic_feedback]
-      )
-      head 200
-    else
-      render_not_authorized([t('api.error_messages.unauthorized_post_error')])
-    end
-    if ENV['FIERI_KEY'] == params['fieri_key']
-      cookbook_version = Cookbook.with_name(params[:cookbook_name]).first.cookbook_versions.last
-
-      create_metric(
-        cookbook_version,
-        QualityMetric.collaborator_num_metric,
-        params[:collaborator_failure],
-        params[:collaborator_feedback]
-      )
-      head 200
-    else
-      render_not_authorized([t('api.error_messages.unauthorized_post_error')])
-    end
BREAKS HERE
-default[:ssh][:client_alive_interval] = 6000    # sshd, 10min
BREAKS HERE
-ip_address = address_for node["openstack"]["identity"]["bind_interface"]
BREAKS HERE
-    cwd     ::File.dirname(new_resource.installer_path)
BREAKS HERE
-        node.set['openstack']['image']['notification_driver'] = 'rabbit'
-        node.set['openstack']['image']['notification_driver'] = 'qpid'
BREAKS HERE
-    :architectures => node['ubuntu']['architectures'],
-    :code_name => node['ubuntu']['codename'],
-    :security_url => node['ubuntu']['security_url'],
-    :archive_url => node['ubuntu']['archive_url'],
-    :include_source_packages => node['ubuntu']['include_source_packages'],
-    :components => node['ubuntu']['components']
-    )
-  %w{ LC_ALL LANG }.each do |envvar|
BREAKS HERE
-if node['chef_client']['handler']['slack']['webhooks'].nil?
BREAKS HERE
-  end
-  it 'creates sidekiq.conf.yml' do
-    expect(chef_run)
-      .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/sidekiq_1.yml")
-      .with_content("---\nconcurency: 5\nverbose: false\nqueues:\n- default")
-    expect(chef_run)
-      .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/sidekiq_2.yml")
-      .with_content("---\nconcurency: 5\nverbose: false\nqueues:\n- default")
-  end
-  it 'creates sidekiq.monitrc conf' do
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content('check process sidekiq_dummy_project-1')
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid')
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content(
-        'start program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-        'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
-        '-C /srv/www/dummy_project/shared/config/sidekiq_1.yml ' \
-        '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid ' \
-        '-r /srv/www/dummy_project/current/lorem_ipsum.rb 2>&1 ' \
-        '| logger -t sidekiq-dummy_project-1\'" with timeout 90 seconds'
-      )
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content(
-        'stop  program = "/bin/su - deploy -c ' \
-        '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-1.pid`\'' \
-        '" with timeout 90 seconds'
-      )
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content('check process sidekiq_dummy_project-2')
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content('with pidfile /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid')
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content(
-        'start program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-        'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
-        '-C /srv/www/dummy_project/shared/config/sidekiq_2.yml ' \
-        '-P /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid ' \
-        '-r /srv/www/dummy_project/current/lorem_ipsum.rb 2>&1 ' \
-        '| logger -t sidekiq-dummy_project-2\'" with timeout 90 seconds'
-      )
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content(
-        'stop  program = "/bin/su - deploy -c ' \
-        '\'kill -s TERM `cat /srv/www/dummy_project/shared/pids/sidekiq_dummy_project-2.pid`\'' \
-        '" with timeout 90 seconds'
-      )
-    expect(chef_run)
-      .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-      .with_content('group sidekiq_dummy_project_group')
BREAKS HERE
-recipe           "opentack-common", "Installs/Configures common recipes"
-recipe           "opentack-common::logging", "Installs/Configures common logging"
BREAKS HERE
-            raise Berkshelf::FrozenCookbook.new(ex.to_s)
BREAKS HERE
-default['defaults']['appserver']['accept_filter'] = 'httpready'
BREAKS HERE
-      Chef::Log.fatal "rabbitmq_vhost_add: rabbitmqctl add_vhost #{new_resource.vhost}"
-      Chef::Log.fatal "rabbitmq_vhost_delete: rabbitmqctl delete_vhost #{new_resource.vhost}"
BREAKS HERE
-      # The use the existing knife command to tarball & share.
-      # This could possibly done in a more elegant fashion than shelling out again.
-      knife_ckbk_path = "-o #{config[:cookbook_path].join(':')}" if !config[:cookbook_path].nil?
-      shellout("knife cookbook site share #{@cb_name} #{category} #{knife_ckbk_path}")
BREAKS HERE
-    CookbookVersion.all.each do |cookbook_version|
BREAKS HERE
-default['kibana']['git']['url'] = 'https://github.com/elasticsearch/kibana.git'
BREAKS HERE
-  default['cassandra']['jamm']['sha256sum'] = 'b1ecba5d930572875467b341e7bf8e8e7e8cf134'
BREAKS HERE
-  variables :database_password => database_password
-  variables :database_password => database_password
BREAKS HERE
-        # let(:cookbook_store) { double("cookbook_store") }
-        # context "given no option for :locations" do
-        #   it "adds the default Opscode Community Site to the array of locations" do
-        #     downloader = subject.new(cookbook_store)
-
-        #     downloader.locations.should have(1).item
-        #     downloader.locations[0][:type].should eql(:site)
-        #     downloader.locations[0][:value].should eql(:opscode)
-        #   end
-        # end
-
-        # context "given a value for :locations" do
-        #   it "does not contain the default location" do
-        #     downloader = subject.new(cookbook_store, locations: [{ type: :path, value: "/Users/reset/cookbooks/nginx", options: Hash.new }])
-        #     downloader.locations.should have(1).item
-        #   end
-        #   it "adds the value for locations to the array of locations" do
-        #     downloader = subject.new(cookbook_store, locations: [{ type: :path, value: "/Users/reset/cookbooks/nginx", options: Hash.new }])
-        #     downloader.locations[0][:type].should eql(:path)
-        #     downloader.locations[0][:value].should eql("/Users/reset/cookbooks/nginx")
-        #   end
-        # end
-        before(:each) { source.stub(:location).and_return(nil) }
-        context "and there are no default locations set" do
-          before(:each) { subject.stub(:locations).and_return(Array.new) }
-          it "creates a default location with the given source and sends it 'download'" do
-            CookbookSource::Location.should_receive(:init).with(source.name, source.version_constraint, site: :opscode).and_return(location)
-            location.should_receive(:download).with(subject.storage_path).and_return(cached_cookbook)
-            source.should_receive(:cached_cookbook=).with(cached_cookbook)
-            subject.download(source)
-          end
-        context "and there is at least one default location set" do
-          before(:each) do
-            subject.stub(:locations).and_return([{type: :chef_api, value: :knife, options: Hash.new}])
-          end
-          it "sends the 'download' message to the default location" do
-            CookbookSource::Location.should_receive(:init).with(source.name, source.version_constraint, chef_api: :knife).and_return(location)
-            location.should_receive(:download).with(subject.storage_path).and_return(cached_cookbook)
-            source.should_receive(:cached_cookbook=).with(cached_cookbook)
-            subject.download(source)
-          end
-        subject.stub(:locations) { [ { type: type, value: value, options: Hash.new } ] }
BREAKS HERE
-    protocol: new_resource.protocol
BREAKS HERE
-    "rhel" => "/usr/lib#{RUBY_PLATFORM.match[/64/]}/ganglia/python_modules/apache.py",
BREAKS HERE
-# library:: address
-  def address_for(interface, family = node['openstack']['endpoints']['family'])
-    interface_node = node['network']['interfaces'][interface]['addresses']
-    fail "Interface #{interface} has no addresses assigned" if interface_node.to_a.empty?
-    address = interface_node.find { |addr, data| data['family'] == family }
-    fail "Interface #{interface} has no address for family #{family}" if address.nil?
-    address[0]
BREAKS HERE
-version '1.9.0'
BREAKS HERE
-    not_if { ::File.exists?("/tmp/spark-#{node['spark']['release']['version']}-bin-#{node['spark']['release']['package_type']}.tgz") }
BREAKS HERE
-      expect(chef_run).to run_execute('ironic db sync').with(user: 'ironic', group: 'ironic')
BREAKS HERE
-    es_install = find_es_resource(run_context, :elasticsearch_install, new_resource)
-  def assert_state_is_valid(es_user, es_install, es_conf)
BREAKS HERE
-if(RUBY_VERSION < '1.9.0')
BREAKS HERE
-    shredcycles    start          tabooext
BREAKS HERE
-          dest = File.join(scratch, cb.cookbook_name, "/")
-          files = Dir.glob(File.join(src, "*"))
-    #   chef_api "https://api.opscode.com/organizations/vialstudios", node_name: "reset",
-    #     client_key: "/Users/reset/.chef/knife.rb"
-        raise Berkshelf::ArgumentError, "Cannot specify both :except and :only"
-          Berkshelf.ui.warn "Cookbooks were specified, ignoring :except and :only"
-    #         #<Berkshelf::CookbookSource @name="nginx">,
-    #         #<Berkshelf::CookbookSource @name="mysql">,
-    #         #<Berkshelf::CookbookSource @name="nginx">
-    #     <#CachedCookbook name="artifact"> => "0.11.2"
-          raise ChefConnectionError, "Missing required attribute in your Berkshelf configuration: chef.server_url"
-          raise ChefConnectionError, "Missing required attribute in your Berkshelf configuration: chef.node_name"
-          raise ChefConnectionError, "Missing required attribute in your Berkshelf configuration: chef.client_key"
BREAKS HERE
-default['icinga2']['web2_version'] = '2.3.4-1'
BREAKS HERE
-
-# Ruby 1.8.6 doesn't have tap...thx CentOS
-class Object
-  def tap
-    yield self
-    self
-  end
-end
BREAKS HERE
-  settings["sources"]["download"] = ""
-  settings["sources"]["create"] = "db languages josm potlatch wiki"
BREAKS HERE
-        next if has_source?(name)
-
-        add_source(CookbookSource.new(name, constraint: constraint))
BREAKS HERE
-  default[:ruby][:patch] = 'p545'  # this attribute will disapier in favor of the sematic versioning schema
BREAKS HERE
-      return true
BREAKS HERE
-# acceptable values 'encrypted', 'standard'
BREAKS HERE
-when "fedora", "redhat", "centos"                                 # :pragma-foodcritic: ~FC024 - won't fix this
BREAKS HERE
-
-    it "uploads qcow image when one does not exist" do
-      opts = {
-        :step_into => ["openstack_image_image"]
-      }
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS.merge(opts) do |n|
-        n.set["openstack"]["image"] = {
-          "image_upload" => true,
-          "upload_images" => [
-            "image1"
-          ],
-          "upload_image" => {
-            "image1" => "http://example.com/image.qcow2"
-          }
-        }
-      end
-      list_cmd = "glance --insecure " \
-                 "--os-username glance " \
-                 "--os-password glance-pass " \
-                 "--os-tenant-name service "\
-                 "--os-image-url http://127.0.0.1:9292 " \
-                 "--os-auth-url http://127.0.0.1:5000/v2.0 " \
-                 "image-list | grep image1"
-      stub_command(list_cmd).and_return(false)
-      chef_run.converge("openstack-image::api")
-
-      expect(chef_run).to run_execute("Uploading QCOW2 image image1")
-    end
-
-    it "does not upload qcow image if it already exists" do
-      opts = {
-        :step_into => ["openstack_image_image"]
-      }
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS.merge(opts) do |n|
-        n.set["openstack"]["image"] = {
-          "image_upload" => true,
-          "upload_images" => [
-            "image1"
-          ],
-          "upload_image" => {
-            "image1" => "http://example.com/image.qcow2"
-          }
-        }
-      end
-      list_cmd = "glance --insecure " \
-                 "--os-username glance " \
-                 "--os-password glance-pass " \
-                 "--os-tenant-name service "\
-                 "--os-image-url http://127.0.0.1:9292 " \
-                 "--os-auth-url http://127.0.0.1:5000/v2.0 " \
-                 "image-list | grep image1"
-      stub_command(list_cmd).and_return(true)
-      chef_run.converge("openstack-image::api")
-
-      expect(chef_run).to_not run_execute("Uploading QCOW2 image image1")
-    end
BREAKS HERE
-cookbook_file File.join(dot_delivery_dir, 'config.json') do
-cookbook_file File.join(dot_delivery_dir, 'project.toml') do
-    only_if 'git status --porcelain |grep "."'
-    only_if 'git status --porcelain |grep "."'
-    only_if 'git status --porcelain |grep "."'
-    only_if 'git status --porcelain |grep "."'
-    only_if 'git status --porcelain |grep "."'
BREAKS HERE
-# 
-# 
BREAKS HERE
-    if rgw_inst['ceph']["radosgw-secret-#{inst}"]
BREAKS HERE
-            EOS
BREAKS HERE
-        @iis_version
BREAKS HERE
-    if node['push_jobs']['service_name']
-      node['push_jobs']['service_name']
-    else
-      names_by_version(version, :windows)[:service_name]
-    end
BREAKS HERE
-
-
-
BREAKS HERE
-default['ntp']['orphan']['stratum'] = 5 #ntp recommends 2 more than the worst-case externally-reachable source of time
BREAKS HERE
-db_endpoint = endpoint 'db'
BREAKS HERE
-      ['db2-odbc', 'python-ibm-db', 'python-ibm-db-sa'].each do |pkg|
BREAKS HERE
-version          "1.0.1"
BREAKS HERE
-    owner node["rsyslog"]["group"]
BREAKS HERE
-  'default' => ["tomcat#{node['tomcat']['base_version']}"],
-    },
BREAKS HERE
-license 'Apache 2.0'
BREAKS HERE
-version '2.1.0'
BREAKS HERE
-  compile_time true if respond_to?(:compile_time)
BREAKS HERE
-            Chef::Log.debug("#{self} Checking for an inversion provider for #{val}: #{provider_class && provider_class.name}")
BREAKS HERE
-        raise Berkshelf::CookbookNotFound,
-          "'#{cookbook_name(source)}' does not exist in this lockfile!"
-
BREAKS HERE
-
-  # 2. Compare to the size set for the gluster volume 
-  
-          Chef::Log.info("Size is the same, doing nothing")
-
BREAKS HERE
-      return if File.exist?(json_file)
-      File.open(json_file, "w") do |f|
-        f.write(Chef::JSONCompat.to_json_pretty(md))
-      end
BREAKS HERE
-            "evaltype" => 1, "status" => status, "esc_period" => 120,
-              "operationtype" => 1,
-            "actionid" => action_id, "evaltype" => 1, "status" => status,
-            "esc_period" => 120,
-              "operationtype" => 1,
-  command  "/usr/local/bin/run_zabbix_sender.sh"
BREAKS HERE
-rabbit_info = get_settings_by_role("rabbitmq-server", "rabbitmq")
-    "rabbit_ipaddress" => rabbit_info["ipaddress"],
BREAKS HERE
-default['config_disclaimer']                         = '**Note:** This file was automatically created by Pinerolo configuration. If you use its automated setup, do not edit this file directly, but adjust the automation instead.'
-default['network']['forwarding']                      = false
-default['network']['ipv6']['enable']                   = false
-default['network']['arp']['restricted']                = true
BREAKS HERE
-    if File.exists?("file/infranodes-info.json")
-      current_state = JSON(File.read('files/infranodes-info.json'))
-    File.open("files/infranodes-info.json", 'w') do |f|
BREAKS HERE
-    let(:runner) { ChefSpec::Runner.new(UBUNTU_OPTS) }
BREAKS HERE
-  rhel_version_equivalent = case platform_family
-  when "rhel"
-    platform?("amazon") ? 6 : platform_version
-  else
-    raise "Unsupported Linux platform family #{platform_family}"
-  end
-
-    url File.join(repository_url, repo, "el", rhel_version_equivalent, "$basearch")
BREAKS HERE
-      if node.respond_to?(:run_context)
BREAKS HERE
-        elsif Gem::Version.new(docker_major_version) <= Gem::Version.new('1.12')
BREAKS HERE
-  template '/etc/apt/apt.conf.d/01proxy' do
-  end.run_action(:create)
BREAKS HERE
-# Copyright © 2015-2016 Cask Data, Inc.
-    # Given an HDP version (2.6.1.0), return the corresponding build number (129)
-      repo_os_path = value_for_platform_family(
-        %w(rhel amazon) => "centos#{node['platform_version'].to_i}",
-        'debian' => "#{node['platform']}#{node['platform_version'].to_i}"
-      )
-      base_url = "http://public-repo-1.hortonworks.com/HDP/#{repo_os_path}/2.x/updates"
-      build_id_url = File.join([base_url, version, 'build.id'])
-        build_hash = Hash[response.body.split("\n").map { |str| str.split(': ') }]
-        build_hash['BUILD_NUMBER'] if build_hash.key?('BUILD_NUMBER')
-        if build_number.nil?
-          node['hadoop']['distribution_version']
-        else
-          [node['hadoop']['distribution_version'], build_number].join('-')
-        end
BREAKS HERE
-describe "glance::api" do
-      glance_stubs
-      @node.set["glance"]["syslog"]["use"] = true
-      @chef_run.converge "glance::api"
-      chef_run.converge "glance::api"
-        expect(@file).to notify "service[glance-api]", :restart
-        expect(@file).to notify "service[glance-api]", :restart
-        expect(@file).to notify "service[glance-api]", :restart
-        expect(@file).to notify "service[glance-api]", :restart
-        expect(@file).to notify "service[glance-api]", :restart
-      glance_stubs
-        :step_into => ["glance_image"]
-      node.set["glance"] = {
-      chef_run.converge "glance::api"
BREAKS HERE
-          "cookbook 'bluepill', :locked_version => '1.0.4'",
-          "cookbook 'build-essential', :locked_version => '1.0.2'",
BREAKS HERE
-  every_enabled_rds(application) do |rds|
-    databases.push(Drivers::Db::Factory.build(application, node, rds: rds))
-  scm = Drivers::Scm::Factory.build(application, node)
-  framework = Drivers::Framework::Factory.build(application, node, databases: databases)
-  appserver = Drivers::Appserver::Factory.build(application, node)
-  worker = Drivers::Worker::Factory.build(application, node, databases: databases)
-  webserver = Drivers::Webserver::Factory.build(application, node)
-  fire_hook(:shutdown, context: self, items: databases + [scm, framework, appserver, worker, webserver])
BREAKS HERE
-depends 'apt', '~> 2.7.0'
BREAKS HERE
-module PushJobsHelper
-  def self.linux_install_path(node, version)
-  def self.linux_exec_name(node, version)
-
-    json_path = File.join(path, "version-manifest.json")
-    txt_path = File.join(path, "version-manifest.txt")
-
-    version = if File.exists?(json_path)
-              elsif File.exists?(txt_path)
-                version = File.readlines(txt_path, 100).first.split(' ')[1]
-              else
-                nil
-     version
-  def self.find_installed_version(node, url)
-    version = parse_version(node,url)
-    possible_versions =  names.map {|d| version_from_manifest(d) }
-    version = possible_versions.select {|v| v }.first
-    if File.exists?('/opt/opscode-push-jobs-client')
-      return '1.0.0'
-    else
-      return nil
-    end
-    if url =~ /[\-_](\d+\.\d+\.\d+(\-alpha)?)[\-_]/
-      Regexp.last_match(1)
-    else
-      nil
-    end
-
-
BREAKS HERE
-      print "#{dry_run == true ? 'DRYRUN' : 'REAL' } install #{install_type} #{installed_module} via cpan #{cpan_client_flags} "
-      print "cpan_client_stack : #{cpan_client_stack} "
-def cpan_client_stack
-  cpan_client_stack = 'eval $(perl -Mlocal::lib=--deactivate-all); '  
-
-   cpan_client_stack << "eval $(perl -Mlocal::lib=#{real_install_base}); "
-
-  cpan_client_stack << "PERL5LIB=$PERL5LIB:#{perl5lib.join(':')}; " unless perl5lib.empty?
-  return cpan_client_stack
-  
-  text << "WOULD cpan #{cpan_client_flags} ."
-  cmd << cpan_client_stack
-  bash "install_dry_run_application" do
-  cmd << cpan_client_stack
-      cmd << 'unless(CPAN::Shell->expand("Module",$ARGV[0])->uptodate){ exit(2) }'
-      cmd << "' #{@installer.name} 2>&1 > #{install_log_file} || "  
-      cmd << 'unless(CPAN::Shell->expand("Module",$ARGV[0])->inst_version){ exit(2) }'
-      cmd << "' #{@installer.name} 2>&1 > #{install_log_file} || "  
-      cmd << 'unless ( CPAN::Version->vcmp($inst_v, $ARGV[1]) >=0 ) { exit(2) }'
-      cmd << "' #{@installer.name} #{@installer.version} 2>&1 > #{install_log_file} || "  
-
-  cmd << " cpan #{cpan_client_flags} #{@installer.name} 2>&1 > #{install_log_file}"
-
-
-  file "#{install_log_file}" do
-    action :touch
-    owner user
-    group group
-  end
-
-  bash "install_cpan_module" do
-    code cmd.join("\n")
-    environment my_env
-  cmd << cpan_client_stack
-  cmd << "export PERL_MB_OPT=$PERL_MB_OPT' #{get_install_path}'" unless get_install_path.empty?
-  cmd << 'exit(2);'
-  cmd << "\' /tmp/local-lib/install/#{@installer.name} 2>&1 > #{install_log_file} ||"
-  cmd << "cpan #{cpan_client_flags} . 2>&1 >> #{install_log_file}"
-
-  bash "install_tarball" do
-    code cmd.join("\n")
-    environment my_env
-  cmd << cpan_client_stack
-  cmd << "cpan #{cpan_client_flags} .  2>&1 > #{install_log_file}"
-  #cmd << "cpan #{cpan_client_flags} . "
-  
-  bash "install_application" do
-    code cmd.join("\n")
-    environment my_env
-def my_env
-  my_env = @installer.environment
-  my_env['HOME'] = get_home
-  my_env['MODULEBUILDRC'] = '/tmp/local-lib/.modulebuildrc'        
-  my_env
-def cpan_client_flags 
-  flags = Array.new
-  if @test_mode.nil? 
-   flags << '-i'
-   flags << '-t'
-  end
-  flags << '-f' if @installer.force == true
-  flags << ''
-  flags.join(' ')
BREAKS HERE
-        Chef::Config.cookbook_path + [KnifeSolo.resource('patch_cookbooks')]
BREAKS HERE
-  only_if { File.readlines("/etc/init/nova-vncproxy.conf").grep(/exec.*nova$/).size > 0 }
BREAKS HERE
-  keystone = search(:node, "recipe:keystone\\:\\:server and chef_environment:#{node.chef_environment}")
-  if keystone[0].length > 0
BREAKS HERE
-version          '10.0.0'
BREAKS HERE
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-identity_api_endpoint   = public_endpoint 'identity-api'
BREAKS HERE
-default[:passenger][:version] = '4.0.39'
BREAKS HERE
-      expect(subject.cookbooks).to have(2).items
-        expect(subject.cookbooks('mysql')).to have(1).item
BREAKS HERE
-															#for AWS it can be:
-node_platform = node['platform']							#	"amazon"
-node_platform_version = node['platform_version']			#	"2016.03"
-node_os = node['os']										#	"linux"
-node_os_version = node['os_version']						#	"4.4.5-15.26.amzn1.x86_64"
-node_kernel_machine = node['kernel']['machine']				#	"x86_64"
-node_kernel_processor = node['kernel']['processor']			#	"x86_64"
-
-log 'Platform:' + node_platform + "  version:" + node_platform_version + "  os:" + node_os.to_s + "  os_version:" + node_os_version.to_s + '  machine:' + node_kernel_machine.to_s
BREAKS HERE
-version          '1.2.3'
BREAKS HERE
-          node['cq']['http_read_timeout'] = current_timeout
BREAKS HERE
-  default[:deploy][application][:shallow_clone] = true
BREAKS HERE
-attribute :record_type, :kind_of => String
-attribute :rdata, :kind_of => Hash
-attribute :ttl, :kind_of => Integer
-attribute :fqdn, :kind_of => String
-attribute :username, :kind_of => String
-attribute :password, :kind_of => String
-attribute :customer, :kind_of => String
-attribute :zone, :kind_of => String
BREAKS HERE
-default['rabbitmq']['rpm_package'] = "rabbitmq-server-#{node['rabbitmq']['version']}-1.noarch.rpm"
BREAKS HERE
-          :endpoint, arg,
BREAKS HERE
-  command "/bin/sleep #{sleep_time}; #{client_bin} &> #{log_file}"
BREAKS HERE
-  fail "WebpiCmd.exe can't be found"
BREAKS HERE
-      if new_resource.config.nil? # rubocop: disable Style/GuardClause
BREAKS HERE
-          [store.cookbook(name, version)]
BREAKS HERE
-      DATACENTER_SERVER   = 0x0C unless constants.include?(DATACENTER_SERVER)
-      DATACENTER_SERVER_V = 0x27 unless constants.include?(DATACENTER_SERVER_V)
-      ENTERPRISE_SERVER   = 0x0E unless constants.include?(ENTERPRISE_SERVER)
-      ENTERPRISE_SERVER_V = 0x29 unless constants.include?(ENTERPRISE_SERVER_V)
-      STANDARD_SERVER     = 0x0D unless constants.include?(STANDARD_SERVER)
-      STANDARD_SERVER_V   = 0x28 unless constants.include?(STANDARD_SERVER_V)
-      WORKSTATION         = 0x1 unless constants.include?(WORKSTATION)
-      DOMAIN_CONTROLLER   = 0x2 unless constants.include?(DOMAIN_CONTROLLER)
-      SERVER              = 0x3 unless constants.include?(SERVER)
BREAKS HERE
-          @finish_script ||=
-            begin
-              t = Chef::Resource::Template.new(::File.join(sv_dir_name, 'finish'), run_context)
-              t.owner(new_resource.owner)
-              t.group(new_resource.group)
-              t.mode(00755)
-              t.source("sv-#{new_resource.finish_script_template_name}-finish.erb")
-              t.cookbook(template_cookbook)
-              t.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-              t
-            end
BREAKS HERE
-# Author:: George Miranda (<gmiranda@opscode.com>)
-# Copyright 2011, Cramer Development, Inc.
-# Copyright 2012, Opscode, Inc.
-# Copyright 2013, TAQTIQA LLC.
-attribute :source,         :kind_of => String, :name_attribute => true
-attribute :checksum,       :kind_of => String
-attribute :download_dir,   :kind_of => String, :default => Chef::Config[:file_cache_path]
-attribute :group,          :kind_of => String, :default => 'root'
-attribute :mode,           :kind_of => String, :default => '0755'
-attribute :target_dir,     :kind_of => String
-attribute :creates,        :kind_of => String
-attribute :compress_char,  :kind_of => String, :default => 'z'
-attribute :tar_flags,      :kind_of => [String, Array], :default => Array.new
-attribute :user,           :kind_of => String, :default => 'root'
-  attribute :headers, :kind_of => Hash, :default => nil
-  attribute :use_etag, :kind_of => [TrueClass, FalseClass], :default => true
-  attribute :use_last_modified, :kind_of => [TrueClass, FalseClass], :default => true
-  attribute :atomic_update, :kind_of => [TrueClass, FalseClass], :default => true
-  attribute :force_unlink, :kind_of => [TrueClass, FalseClass], :default => false
-  attribute :manage_symlink_source, :kind_of => [TrueClass, FalseClass], :default => nil
BREAKS HERE
-      super(Celluloid::Registry.new)
-      connection.terminate if connection.alive?
-      registry[:connection_pool]
-      attr_reader :registry
-
BREAKS HERE
-case platform
BREAKS HERE
-  execute "test-nginx-conf-#{conf_name}-#{new_resource.action}" do
-    notifies :run, 'execute[test-nginx-conf]', new_resource.reload
-    notifies :run, 'execute[test-nginx-conf]', new_resource.reload
-  execute "test-nginx-conf-#{conf_name}-#{new_resource.action}" do
-    notifies :run, 'execute[test-nginx-conf]', new_resource.reload
-end
BREAKS HERE
-# Copyright:: Copyright (c) 2014 Onddo Labs, SL. (www.onddo.com)
-default['dovecot']['conf']['ldap']['pass_attrs'] = nil
BREAKS HERE
-  node['kafka-cluster']['service']['environment']['KAFKA_LOG4J_OPTS'] = "-Dlog4j.configuration=file:#{log4j_config}"
BREAKS HERE
-default_package_url = "https://github.com/rabbitmq/rabbitmq-server/releases/download/v#{version}/"
BREAKS HERE
-  code "find #{node['bcpc']['graphite']['local_data_dir']} -name *.wsp -mtime +#{node['bcpc']['graphite']['']['retention']} -type f -exec rm {} \\;"
-  code "find #{node['bcpc']['graphite']['local_log_dir']} -name *.wsp -mtime +#{node['bcpc']['graphite']['log']['retention']} -type f -exec rm {} \\;"
BREAKS HERE
-  action :add
-  version "#{node['osquery']['version']}-1.ubuntu#{os_version}"
-service 'osqueryd' do
-  action [:enable, :start]
-end
-
BREAKS HERE
-default['bcpc']['repos']['ceph-apache'] = "http://gitbuilder.ceph.com/apache2-deb-precise-x86_64-basic/"
-default['bcpc']['repos']['ceph-fcgi'] = "http://gitbuilder.ceph.com/libapache-mod-fastcgi-deb-precise-x86_64-basic/"
BREAKS HERE
-      if File.exist? dir
-        if File.stat(dir).uid.eql?(0)
-          FileUtils.chown_R(myuser, myuser, splunk_dir)
-        end
BREAKS HERE
-    # @param [String] path
-    #   the path to get, relative to {Defaults.endpoint}
-    #   the list of key-value parameters
-      uri = urify(path)
-      uri.query = URI.encode_www_form(params) unless params.empty?
-
-      request = Net::HTTP::Get.new(uri)
-
-      perform(request)
-    # @param [String] path
-    #   the path to post, relative to {Defaults.endpoint}
-    # @param [String] body
-    #   the body of the request
-    def post(path, body)
-      uri = urify(path)
-
-      request = Net::HTTP::Post.new(uri)
-      request.body = body
-
-      perform(request)
-    # @param [String] path
-    #   the path to put, relative to {Defaults.endpoint}
-    # @param [String] body
-    #   the body of the request
-    def put(path, body)
-      uri = urify(path)
-
-      request = Net::HTTP::Put.new(uri)
-      request.body = body
-
-      perform(request)
-    # @param [String] path
-    #   the path to patch, relative to {Defaults.endpoint}
-    # @param [String] body
-    #   the body of the request
-    def patch(path, body)
-      uri = urify(path)
-
-      request = Net::HTTP::Patch.new(uri)
-      request.body = body
-
-      perform(request)
-    # @param [String] path
-    #   the path to delete, relative to {Defaults.endpoint}
-    def delete(path)
-      uri = urify(path)
-
-      request = Net::HTTP::Delete.new(uri)
-      perform(request)
-    # Make a HTTP HEAD request
-    #   the path to head, relative to {Defaults.endpoint}
-    def head(path)
-      uri = urify(path)
-      request = Net::HTTP::Head.new(uri)
-      perform(request)
-    end
-    #
-    # Perform the HTTP request, handling responses.
-    #
-    # @param [Net::HTTP::Request] request
-    #   the HTTP request object to make the request with
-    #
-    # @return [String]
-    #
-    def perform(request)
-      url = request.uri.to_s
-      response = http.request(request)
-      puts
-      puts response.body
-      puts
-      case response.code.to_i
-      when 200..399
-        parse_response(response)
-      when 400
-        raise Error::HTTPBadRequest.new(url: url)
-      when 401
-        raise Error::HTTPUnauthorizedRequest.new(url: url)
-      when 403
-        raise Error::HTTPForbiddenRequest.new(url: url)
-      when 404
-        raise Error::HTTPNotFound.new(url: url)
-      when 405
-        raise Error::HTTPMethodNotAllowed.new(verb: verb, url: url)
-      when 500..600
-        raise Error::HTTPServerUnavailable.new(url: url)
-      else
-        raise Error::HTTPServerUnavailable.new(url: url)
-    private
-
-    # The HTTP request object.
-    # @return [Net::HTTP]
-    def http
-      return @http if @http
-      uri = URI.parse(endpoint)
-      @http = Net::HTTP.new(uri.host, uri.port)
-      @http.use_ssl = true if uri.scheme == 'https'
-      @http
-    # Helper method to merge the given URL attribute with the endpoint.
-    # @param [String, URI] path
-    #   the path to make the URI from
-    # @return [URI]
-    def urify(path)
-      uri = URI.parse(path)
-      if uri.absolute?
-        uri
-      else
-        URI.parse(File.join(endpoint, path))
-      end
-    # @param [String, OpenSSL::PKey::RSA] key
-    #   the RSA private key
-    #
-    def parse_key(key)
-      raise 'No private key given' if key.nil?
-      return key if key.is_a?(OpenSSL::PKey::RSA)
-        contents = key
-      OpenSSL::PKey::RSA.new(contents)
-    def parse_response(response)
-      }.merge(signed_header_auth(request))
-        request.add_field(key, value)
-    def signed_header_auth(request)
-      verb = request.class.name.split('::').last.downcase
-      url  = URI.parse(endpoint)
-      private_key = parse_key(key)
-
-      Mixlib::Authentication::SignedHeaderAuth.signing_object(
-        :host        => "#{url.host}:#{url.port}",
-      ).sign(private_key)
BREAKS HERE
-    plugin_path '/etc/taste-tester-plugin.rb'
-    chef_zero_path '/opt/chef/embedded/bin/chef-zero'
BREAKS HERE
-
-  openstack_user service_user do
-    domain_name service_domain_name
-    role_name service_role
-    user_name service_user
-    connection_params connection_params
-    action :grant_domain
-  end
BREAKS HERE
-actions :create
-attribute :password, :kind_of => String, :required => true
BREAKS HERE
-version          '17.0.0'
-depends 'openstack-common', '>= 17.0.0'
-depends 'openstack-identity', '>= 17.0.0'
BREAKS HERE
-      .with(group: 'wheel', user: 'root')
BREAKS HERE
-# Copyright:: Copyright (c) 2012 Chef Software, Inc.
-default['chef-server']['version'] = :latest
-default['chef-server']['prereleases'] = false
-default['chef-server']['nightlies'] = false
-default['chef-server']['package_file'] = nil
-default['chef-server']['package_checksum'] = nil
-default['chef-server']['package_options'] = nil
-# https://github.com/chef/omnibus-chef-server/blob/master/files/chef-server-cookbooks/chef-server/attributes/default.rb
-#     override_attributes(
BREAKS HERE
-
-  source "send_to_graphite_sh.erb"
-  variables ({
-execute "upload send_to_graphite.sh" do
-  not_if "hdfs dfs -test -f #{workflow_path}/hive_smoke_test.hql",
-         :user => test_user
-
-      test_user, "jobs -jobtype coordinator")
-      "#{cache_dir}/smoke_test_coordinator.properties")
BREAKS HERE
-include_recipe "stig::mount_disable"
BREAKS HERE
-        b.response :gzip
BREAKS HERE
-web_app node['confluence']['apache2']['virtual_host_name']
BREAKS HERE
-    'db2_python_packages' => ['db2-odbc', 'python-ibm-db', 'python-ibm-db-sa'],
BREAKS HERE
-  directory path do
-  windows_zipfile path do
-    not_if { ::File.exist?(::File.join(path, 'Octo.exe')) }
BREAKS HERE
-    uuid = node['filesystem2']['by_device'][swap_device]['uuid']
-    "swapoff #{swap_device} && mkswap -U #{uuid} #{swap_device} #{size} && " +
-    "swapon #{swap_device}"
BREAKS HERE
-# Copyright:: Copyright (c) 2014-2018 Chef Software Inc.
-      allow(::Dir).to receive(:exists?).and_call_original
BREAKS HERE
-        url = 'https://app.datadoghq.com'
-        url = 'https://app.' + @config[:site] unless @config[:site].nil?
-        url = @config[:url] unless @config[:url].nil?
-        endpoints = [[url, @config[:api_key], @config[:application_key]]]
-          url = endpoint[:url] || @config[:url]
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
BREAKS HERE
-        the_role['env_run_lists'].each_pair do |key, value|
-          new_role['env_run_lists'][key] = []
-          value.each do |item|
-            begin
-              rl << item
-              new_role['env_run_lists'][key].push(item)
-            rescue ArgumentError
-              puts "REPAIRING: Invalid Recipe Item: #{item} in env_run_lists #{key} from #{role_path}"
BREAKS HERE
-# 
BREAKS HERE
-              super
BREAKS HERE
-default['openresty']['pcre']['url']      = "http://sourceforge.net/projects/pcre/files/pcre/#{node['openresty']['pcre']['version']}/pcre-#{node['openresty']['pcre']['version']}.tar.bz2/download"
BREAKS HERE
-        node.default['graylog2']['password_secret'] = 'password_hash'
-        node.default['graylog2']['root_password_sha2'] = 'salt'
-        node.default['graylog2']['password_secret'] = 'password_hash'
-        node.default['graylog2']['root_password_sha2'] = 'salt'
BREAKS HERE
-version          '1.1.0'
BREAKS HERE
-      name: { { kind_of: String },
-      import: Nomad::Helpers.conf_keys_include_opts(%w[path args]),
-      disable_tagged_metrics: { kind_of: [TrueClass, FalseClass] }
BREAKS HERE
-  "/usr/bin/find #{instance['directory']}"
-  commands postfix_commands.uniq
BREAKS HERE
-  if Chef::Config[:solo]
BREAKS HERE
-when 'ubuntu'
-when 'debian'
-  default['memcached']['user'] = 'nobody'
-  default['memcached']['group'] = 'nogroup'
-  default['memcached']['user'] = 'nogroup'
BREAKS HERE
-    # @param [String] filter
-      cookbooks = []
-      storage_path.each_child.map do |path|
-        Celluloid::Future.new do
-          cached_cookbook = CachedCookbook.from_store_path(path)
-          next unless cached_cookbook
-          next if filter && cached_cookbook.cookbook_name != filter
-
-          cookbooks << cached_cookbook
-        end
-      end.each(&:value)
-
-      cookbooks
BREAKS HERE
-    def self.to_cli_arg(arg, val)
-      if val.nil? || (val.respond_to?(:empty?) && val.empty?)
-        "-#{arg}"
-      else
-        "-#{arg}=#{val}"
-      end
BREAKS HERE
-packagecloud_repo 'computology/packagecloud-cookbook-test-private' do
BREAKS HERE
-  require 'wmi-lite'
BREAKS HERE
-        # Replicated can be anything from a single node to X nodes. Replica_count should equal number of bricks.
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
BREAKS HERE
-version          '5.0.2'
BREAKS HERE
-                mysql -uroot -p#{get_config('mysql-root-password')} -e "GRANT ALL ON #{node['bcpc']['graphite_dbname']}.* TO '#{get_config('mysql-graphite-user')}'@'%' IDENTIFIED BY '#{get_config('mysql-graphite-password')}';"
-                mysql -uroot -p#{get_config('mysql-root-password')} -e "GRANT ALL ON #{node['bcpc']['graphite_dbname']}.* TO '#{get_config('mysql-graphite-user')}'@'localhost' IDENTIFIED BY '#{get_config('mysql-graphite-password')}';"
BREAKS HERE
-# The packaged erlang in 12.04 (and below) is vulnerable to 
-# the poodly exploit which stops rabbitmq starting its SSL listener
-node.override.erlang.install_method = 'esl' if ubuntu_before_trusty?
-rabbitmq = node.sensu.rabbitmq.to_hash
-config = Sensu::Helpers.data_bag_item("config", true)
-if config && config["rabbitmq"].is_a?(Hash)
-  rabbitmq = Chef::Mixin::DeepMerge.merge(rabbitmq, config["rabbitmq"])
-end
-rabbitmq_vhost rabbitmq["vhost"] do
-  action :add
-end
-rabbitmq_user rabbitmq["user"] do
-  password rabbitmq["password"]
-  action :add
-end
-rabbitmq_user rabbitmq["user"] do
-  vhost rabbitmq["vhost"]
-  permissions ".* .* .*"
-  action :set_permissions
BREAKS HERE
-"/usr/lib/eject/dmcrypt-get-device"
BREAKS HERE
-#include_recipe 'sysctl::default'
-#sysctl_param 'vm.swappiness' do
-#  value 0
-#end
-# Do not assume file exists, Ubuntu 14 in AWS does not have thp_defrag file
-update_thp_defrag = true
-if ::File.exist?(thp_defrag)
-  file = File.new(thp_defrag)
-  text = file.read
-  update_thp_defrag = false if text =~ /\[never\]/
-else
-  update_thp_defrag = false
-end
-
-  only_if { update_thp_defrag }
-  action :run
BREAKS HERE
-resolvers.push resolvers.shift
-resolvers.unshift node[:bcpc][:management][:vip]
BREAKS HERE
-        # resolve correct hostname
-        hostname = select_hostname(run_status.node, config)
-        emit_metrics_to_datadog(hostname, run_status)
-
-        # Build the correct event
-        event_data = build_event_data(hostname, run_status)
-          # Collect tags
-          new_host_tags = get_combined_tags(node)
-
-          # Send the Event data
-          emit_event_to_datadog(hostname, event_data, new_host_tags)
-
-          # Update tags
-          if config[:application_key].nil?
-            Chef::Log.warn('You need an application key to let Chef tag your nodes ' \
-              'in Datadog. Visit https://app.datadoghq.com/account/settings#api to ' \
-                'create one and update your datadog attributes in the datadog cookbook.'
-            )
-            fail ArgumentError, 'Missing Datadog Application Key'
-          else
-
-            # Replace all Chef tags with the found Chef tags
-            rc = @dog.update_tags(hostname, new_host_tags, 'chef')
-            begin
-              # See FIXME above about why I feel dirty repeating this code here
-              if rc.length < 2
-                Chef::Log.warn("Unexpected response from Datadog Event API: #{rc}")
-              else
-                if rc[0].to_i / 100 != 2
-                  Chef::Log.warn("Could not submit #{new_host_tags} tags for #{hostname} to Datadog: #{rc}")
-                else
-                  Chef::Log.debug("Successfully updated #{hostname}'s tags to #{new_host_tags.join(', ')}")
-                end
-              end
-            rescue
-              Chef::Log.warn("Could not determine whether #{hostname}'s tags were successfully submitted to Datadog: #{rc}")
-            end
-          end
-          Chef::Log.error(event_title)
-          Chef::Log.error(event_body)
-          Chef::Log.error(new_host_tags)
-      # Build the Event data for submission
-      #
-      # @param hostname [String] resolved hostname to attach to Event
-      # @param run_status [Chef::RunStatus] current run status
-      # @return [Array] alert_type, event_priority, event_title, event_body
-      def build_event_data(hostname, run_status)
-        # bail early in case of a compiletime failure
-        # OPTIMIZE: Use better inspectors to handle failure scenarios, refactor needed.
-        if run_status.elapsed_time.nil?
-
-          alert_type = 'error'
-          event_title = "Chef failed during compile phase on #{hostname} "
-          event_priority = 'normal'
-          event_body = 'Chef was unable to complete a run, an error during compilation may have occurred.'
-
-          return [alert_type, event_priority, event_title, event_body]
-        end
-
-        run_time = pluralize(run_status.elapsed_time, 'second')
-
-        # This is the first line of the Event body, the rest is appended here.
-        event_body = "Chef updated #{run_status.updated_resources.length} resources out of #{run_status.all_resources.length} resources total."
-
-        # Show the updated resource list, truncated when failed to 5
-        event_body << updated_resource_list(run_status)
-
-        if run_status.success?
-          alert_type = 'success'
-          event_priority = 'low'
-          event_title = "Chef completed in #{run_time} on #{hostname} "
-        else
-          alert_type = 'error'
-          event_priority = 'normal'
-          event_title = "Chef failed in #{run_time} on #{hostname} "
-
-          if @config[:notify_on_failure]
-            handles = @config[:notify_on_failure]
-            # convert the notification handle array to a string
-            event_body << "\nAlerting: #{handles.join(' ')}\n"
-          end
-
-          event_body << "\n$$$\n#{run_status.formatted_exception}\n$$$\n"
-          event_body << "\n$$$\n#{run_status.backtrace.join("\n")}\n$$$\n"
-        end
-
-        # Return resolved data
-        [alert_type, event_priority, event_title, event_body]
-      end
-
-      # Compose a list of resources updated during a run.
-      # Shorten the list when there is a failure for stacktrace debugging
-      #
-      # @param run_status [Chef::RunStatus] current run status
-      # @return [String] formatted list of resources updated, truncated on failure
-      def updated_resource_list(run_status)
-        # No resources updated? Go away.
-        return '' unless run_status.updated_resources.length.to_i > 0
-
-        if run_status.failed?
-          report_resources = run_status.updated_resources.last(5)
-        else
-          report_resources = run_status.updated_resources
-        end
-
-        event_body = "\n$$$\n"
-        report_resources.each do |r|
-          event_body << "- #{r} (#{r.defined_at})\n"
-        end
-        event_body << "\n$$$\n"
-      end
-
-      # Emit Event to Datadog Event Stream
-      #
-      # @param hostname [String] resolved hostname to attach to Event
-      # @param event_params [Array] all the configurables to build a valid Event
-      # @param tags [Array] Chef env/roles/tags to be set as Datadog tags
-      def emit_event_to_datadog(hostname, event_data, tags)
-        alert_type, event_priority, event_title, event_body = event_data
-
-        evt = @dog.emit_event(Dogapi::Event.new(event_body,
-                                                msg_title: event_title,
-                                                event_type: 'config_management.run',
-                                                event_object: hostname,
-                                                alert_type: alert_type,
-                                                priority: event_priority,
-                                                source_type_name: 'chef',
-                                                tags: tags
-        ), host: hostname)
-
-        begin
-          # FIXME: nice-to-have: abstract format of return value away a bit
-          # in dogapi directly. See https://github.com/DataDog/dogapi-rb/issues/18
-          if evt.length < 2
-            Chef::Log.warn("Unexpected response from Datadog Event API: #{evt}")
-          else
-            # [http_response_code, {"event" => {"url" => "...", ...}}]
-            # 2xx means ok
-            if evt[0].to_i / 100 != 2
-              Chef::Log.warn("Could not submit event to Datadog (HTTP call failed): #{evt[0]}")
-            else
-              Chef::Log.debug("Successfully submitted Chef event to Datadog for #{hostname} at #{evt[1]['event']['url']}")
-            end
-          end
-        rescue
-          Chef::Log.warn("Could not determine whether chef run was successfully submitted to Datadog: #{evt}")
-        end
-      end
-
-      # Emit Chef metrics to Datadog
-      #
-      # @param hostname [String] resolved hostname to attach to series
-      # @param run_status [Chef::RunStatus] current run status
-      def emit_metrics_to_datadog(hostname, run_status)
-        # If there is a failure during compile phase, a large portion of
-        # run_status may be unavailable. Bail out here
-        warn_msg = 'Error during compile phase, no Datadog metrics available.'
-        return Chef::Log.warn(warn_msg) if run_status.elapsed_time.nil?
-
-        @dog.emit_point('chef.resources.total', run_status.all_resources.length, host: hostname)
-        @dog.emit_point('chef.resources.updated', run_status.updated_resources.length, host: hostname)
-        @dog.emit_point('chef.resources.elapsed_time', run_status.elapsed_time, host: hostname)
-        Chef::Log.debug('Submitted Chef metrics back to Datadog')
-      rescue Errno::ECONNREFUSED, Errno::ETIMEDOUT => e
-        Chef::Log.error("Could not send metrics to Datadog. Connection error:\n" + e)
-      end
-
-      # Build up an array of Chef tags to send back
-      #
-      # Selects all [env, roles, tags] from the Node's object and reformats
-      # them to `key:value` e.g. `role:database-master`.
-      #
-      # @param node [Chef::Node]
-      # @return [Array] current Chef env, roles, tags
-      def get_combined_tags(node)
-        chef_env = get_node_env(node).split # converts a string into an array
-
-        chef_roles = get_node_roles(node)
-        chef_tags = get_node_tags(node)
-
-        # Combine (union) all arrays. Removes duplicates if found.
-        chef_env | chef_roles | chef_tags
-      end
-
-      def get_node_roles(node)
-        node.run_list.roles.map! { |role| 'role:' + role }
-      end
-
-      def get_node_env(node)
-        'env:' + node.chef_environment if node.respond_to?('chef_environment')
-      end
-
-      def get_node_tags(node)
-        node.tags.map! { |tag| 'tag:' + tag } if node.tags
-      end
-
-      def pluralize(number, noun)
-        case number
-        when 0..1
-          "less than 1 #{noun}"
-        else
-          "#{number.round} #{noun}s"
-        end
-      rescue
-        Chef::Log.warn("Cannot make #{number} more legible")
-        "#{number} #{noun}s"
-      end
-
-      def select_hostname(node, config)
-      # env vars.  However, original env var settings need to be 
-        Chef::Log.info("Using agent proxy settings")
BREAKS HERE
-maintainer       "Simple"
BREAKS HERE
-  role_name service_role
BREAKS HERE
-%w(public internal admin).each do |ep_type|
BREAKS HERE
-depends 'ohai'
BREAKS HERE
-default[:bamboo][:tomcat][:keystoreFile] = "#{node['stash']['home_path']}/.keystore"
BREAKS HERE
-  migrate_command = "neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file #{plugin_config_file}"
-#{migrate_command} upgrade head
-#{migrate_command} upgrade head
-#{migrate_command} upgrade head
-#{migrate_command} upgrade head
BREAKS HERE
-      expect(chef_run).to run_execute('stop unicorn')
-      expect(chef_run).to run_execute('start unicorn')
BREAKS HERE
-  def create_systemd_automount(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_automount, :create, resource_name)
-  end
-
-  def delete_systemd_automount(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_automount, :delete, resource_name)
-  end
-
-  def create_systemd_timer(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_timer, :create, resource_name)
-  end
-
-  def delete_systemd_timer(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_timer, :delete, resource_name)
-  end
-
-  def create_systemd_target(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_target, :create, resource_name)
-  end
-
-  def delete_systemd_target(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_target, :delete, resource_name)
-  end
-
-  def create_systemd_swap(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_swap, :create, resource_name)
-  end
-
-  def delete_systemd_swap(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_swap, :delete, resource_name)
-  end
-
-  def create_systemd_socket(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_socket, :create, resource_name)
-  end
-
-  def delete_systemd_socket(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_socket, :delete, resource_name)
-  end
-
-  def create_systemd_slice(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_slice, :create, resource_name)
-  end
-
-  def delete_systemd_slice(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_slice, :delete, resource_name)
-  end
-
-  def create_systemd_service(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_service, :create, resource_name)
-  end
-
-  def delete_systemd_service(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_service, :delete, resource_name)
-  end
-
-  def create_systemd_path(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_path, :create, resource_name)
-  end
-
-  def delete_systemd_path(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_path, :delete, resource_name)
-  end
-
-  def create_systemd_mount(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_mount, :create, resource_name)
-  end
-
-  def delete_systemd_mount(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_mount, :delete, resource_name)
-  end
-
-  def create_systemd_device(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_device, :create, resource_name)
-  end
-
-  def delete_systemd_device(resource_name)
-    ChefSpec::Matchers::ResourceMatcher.new(:systemd_device, :delete, resource_name)
BREAKS HERE
-  version = node.platform_version.to_f
-  
-  case version
-  when 5.1..6.0
-    # TODO: move this to a library and create value_for_version_and_arch method
-    value_for_version_and_arch = {5.1 => { # Windows XP
-                                      'i386' => ["http://download.microsoft.com/download/E/C/E/ECE99583-2003-455D-B681-68DB610B44A4/WindowsXP-KB968930-x86-ENG.exe", "0ef2a9b4f500b66f418660e54e18f5f525ed8d0a4d7c50ce01c5d1d39767c00c"]
-                                    },
-                                  5.2 => { # Windows Server 2003
-                                      'i386' => ["http://download.microsoft.com/download/1/1/7/117FB25C-BB2D-41E1-B01E-0FEB0BC72C30/WindowsServer2003-KB968930-x86-ENG.exe", "71b180e0affd9e005d7151a656414176e727b6dc80a9350e7b2b23bcac0cc98a"],
-                                      'x86_64' => ["http://download.microsoft.com/download/B/D/9/BD9BB1FF-6609-4B10-9334-6D0C58066AA7/WindowsServer2003-KB968930-x64-ENG.exe", "9f5d24517f860837daaac062e5bf7e6978ceb94e4e9e8567798df6777b56e4c8"]
-                                    },
-                                  6.0 => { # Windows Server 2008 & Windows Vista
-                                      'i386' => ["http://download.microsoft.com/download/F/9/E/F9EF6ACB-2BA8-4845-9C10-85FC4A69B207/Windows6.0-KB968930-x86.msu", "1c1fee616014da6e52aa7a117b9bcc3a79ac3d838d686b8afe4f723630225fa2"],
-                                      'x86_64' => ["http://download.microsoft.com/download/2/8/6/28686477-3242-4E96-9009-30B16BED89AF/Windows6.0-KB968930-x64.msu", "19bd295d354538873afccc7c9a090ae6ba87beb968b20e8280bf5312826de9e3"]
-                                    }
-                                  }
-
-    download_url = value_for_version_and_arch[version][node['kernel']['machine']]
-    base_name = download_url[0].split(/\//)[-1]
-    unless installed?
-      # start ocsetup MicrosoftWindowsPowerShell
-      remote_file "#{Chef::Config[:file_cache_path]}/#{base_name}" do
-        source download_url[0]
-        checksum download_url[1]
-        mode "0644"
-        notifies :run, 'execute[install-powershell-2]', :immediately
-      execute "install-powershell-2" do
-        command "#{File.join(Chef::Config[:file_cache_path], base_name).gsub!(File::SEPARATOR, File::ALT_SEPARATOR)} /quiet /norestart"
-        returns [0,1,nil]
-        action :nothing
-        notifies :create, 'ruby_block[log-restart-message]', :immediately
-      ruby_block "log-restart-message" do
-        block do
-          Chef::Log.warn("Powershell 2.0 was successfully installed.  The node may need to be restarted for changes to take effect.")
-        end
-        action :nothing
-    else
-      Chef::Log.info("PowerShell 2.0 is already installed and enabled on this node.")
-    end
-  when 6.1 # Windows Server 2008 R2 & Windows 7
-    # Windows Server 2008 R2 Core does not come
-    # with .NET or Powershell 2.0 enabled
-    unless installed?
-      # TODO create a .NET cookbook
-      execute "enable-dot-net" do
-        command "start /w ocsetup NetFx2-ServerCore"
-        action :run
-      execute "enable-powershell-2" do
-        command "start /w ocsetup MicrosoftWindowsPowerShell"
-        action :run
-      Chef::Log.info("PowerShell 2.0 is already enabled on this version of Windows: #{node.platform_version}")
-    Chef::Log.warn("PowerShell 2.0 is not supported on this version of Windows: #{node.platform_version}")
BREAKS HERE
-require_relative 'dependency'
-require_relative 'locations/git_location'
-require_relative 'locations/path_location'
-
-    # @return [Solve::Graph]
-    # @param [Berkshelf::Berksfile] berksfile
-    # @param [Hash] options
-    #
-    # @option options [Array<Berkshelf::Dependency>, Berkshelf::Dependency] dependencies
-    def initialize(berksfile, options = {})
-      @berksfile    = berksfile
-      @downloader   = berksfile.downloader
-      @graph        = Solve::Graph.new
-      @dependencies = Hash.new
-
-      # Dependencies need to be added AFTER the dependencies. If they are
-      # not, then one of the dependencies of a dependency that is added
-      # may take precedence over an explicitly set dependency that appears
-      # later in the iterator.
-      Array(options[:dependencies]).each do |dependency|
-        add_dependency(dependency, false)
-      end
-      unless options[:skip_dependencies]
-        Array(options[:dependencies]).each do |dependency|
-          add_recursive_dependencies(dependency)
-        end
-      end
-    # Add the given dependency to the collection of dependencies for this instance
-    # of Resolver. By default the dependencies of the given dependency will also
-    # be added as dependencies to the collection.
-    # @param [Berkshelf::Dependency] dependency
-    #   dependency to add
-    # @param [Boolean] include_dependencies
-    #   adds the dependencies of the given dependency as dependencies to the collection of
-    #   if true. Dependencies will be ignored if false.
-    def add_dependency(dependency, include_dependencies = true)
-      if has_dependency?(dependency)
-        raise DuplicateDependencyDefined, "A dependency named '#{dependency.name}' is already present."
-      end
-
-      @dependencies[dependency.name] = dependency
-      use_dependency(dependency) || install_dependency(dependency)
-
-      graph.artifacts(dependency.name, dependency.cached_cookbook.version)
-
-      if include_dependencies
-        add_recursive_dependencies(dependency)
-      dependencies
-    # Add the dependencies of the given dependency as dependencies in the collection of dependencies
-    # on this instance of Resolver. Any dependencies which already have a dependency in the
-    # collection of dependencies of the same name will not be added to the collection a second
-    # time.
-    # @param [Berkshelf::Dependency] dependency
-    #   dependency to convert dependencies into dependencies
-    # @return [Array<Berkshelf::Dependency>]
-    def add_recursive_dependencies(dependency)
-      dependency.cached_cookbook.dependencies.each do |name, constraint|
-        next if has_dependency?(name)
-
-        add_dependency(Berkshelf::Dependency.new(berksfile, name, constraint: constraint))
-      end
-    end
-
-    # @return [Array<Berkshelf::Dependency>]
-    #   an array of Berkshelf::Dependencys that are currently added to this resolver
-    def dependencies
-      @dependencies.values
-      demands = [].tap do |l_demands|
-        graph.artifacts.each do |artifact|
-          l_demands << [ artifact.name, artifact.version ]
-        end
-      end
-
-      solution = Solve.it!(graph, demands)
-
-      [].tap do |cached_cookbooks|
-        solution.each do |name, version|
-          cached_cookbooks << get_dependency(name).cached_cookbook
-        end
-      end
-    # @param [Berkshelf::Dependency, #to_s] dependency
-    def [](dependency)
-      if dependency.is_a?(Berkshelf::Dependency)
-        dependency = dependency.name
-      end
-      @dependencies[dependency.to_s]
-    alias_method :get_dependency, :[]
-    # @param [CoobookSource, #to_s] dependency
-    #   the dependency to test if the resolver has added
-    def has_dependency?(dependency)
-      !get_dependency(dependency).nil?
-
-    private
-
-      attr_reader :downloader
-
-      # @param [Berkshelf::Dependency] dependency
-      #
-      # @return [Boolean]
-      def install_dependency(dependency)
-        cached_cookbook, location = downloader.download(dependency)
-        Berkshelf.formatter.install(dependency.name, cached_cookbook.version, location)
-      end
-
-      # Use the given dependency to create a constraint solution if the dependency has been downloaded or can
-      # be satisfied by a cached cookbook that is already present in the cookbook store.
-      #
-      # @note Git location dependencies which have not yet been downloaded will not be satisfied by a
-      #   cached cookbook from the cookbook store.
-      #
-      # @param [Berkshelf::Dependency] dependency
-      #
-      # @raise [ConstraintNotSatisfied] if the CachedCookbook does not satisfy the version constraint of
-      #   this instance of Location.
-      #   contain a cookbook that satisfies the given version constraint of this instance of
-      #   Berkshelf::Dependency.
-      #
-      # @return [Boolean]
-      def use_dependency(dependency)
-        name       = dependency.name
-        constraint = dependency.version_constraint
-        location   = dependency.location
-
-        if dependency.downloaded?
-          cached = dependency.cached_cookbook
-          location.validate_cached(cached)
-          Berkshelf.formatter.use(name, cached.version, location)
-          true
-        elsif location.is_a?(GitLocation)
-          false
-        else
-          cached = downloader.cookbook_store.satisfy(name, constraint)
-
-          if cached
-            get_dependency(dependency).cached_cookbook = cached
-            Berkshelf.formatter.use(name, cached.version)
-            true
-          else
-            false
-          end
-        end
-      end
BREAKS HERE
-    mode 00755
-    mode 00644
BREAKS HERE
-    VERSION=`apt-cache policy libmysqlclient18 | grep -B1 percona | head -1 | awk '{print $1}'`
BREAKS HERE
-      action node['auth']['pam']['passwdqc']['enable'] ? :install : :remove
BREAKS HERE
-        local_conf_root, "#{daemon.daemon_type.to_s.gsub('_', '-')}.conf.d"
-          "#{daemon.daemon_type.to_s.gsub('_', '-')}.conf"
BREAKS HERE
-  compile_time true
BREAKS HERE
-    version node["sensu"]["version"]
BREAKS HERE
-name 'mycompany-ad-join-windows'
BREAKS HERE
-default['maven']['2']['url'] = "http://apache.mirrors.tds.net/maven/binaries/apache-maven-2.2.1-bin.tar.gz"
-default['maven']['3']['url'] = 'http://apache.mirrors.tds.net/maven/binaries/apache-maven-3.0.4-bin.tar.gz'
BREAKS HERE
-    it 'honors the package options platform overrides for kvm' do
-      node.set['openstack']['compute']['conf']['libvirt']['virt_type'] = 'kvm'
-      node.set['openstack']['compute']['platform']['package_overrides'] = '-o Dpkg::Options::=\'--force-confold\' -o Dpkg::Options::=\'--force-confdef\' --force-yes'
-
-      expect(chef_run).to upgrade_package('nova-compute-kvm').with(options: '-o Dpkg::Options::=\'--force-confold\' -o Dpkg::Options::=\'--force-confdef\' --force-yes')
-    end
-
-    it 'honors the package options platform overrides for qemu' do
-      node.set['openstack']['compute']['conf']['libvirt']['virt_type'] = 'qemu'
-      node.set['openstack']['compute']['platform']['package_overrides'] = '-o Dpkg::Options::=\'--force-confold\' -o Dpkg::Options::=\'--force-confdef\' --force-yes'
-
-      expect(chef_run).to upgrade_package('nova-compute-qemu').with(options: '-o Dpkg::Options::=\'--force-confold\' -o Dpkg::Options::=\'--force-confdef\' --force-yes')
-    end
-
BREAKS HERE
-                                 :"quantum-l3agent"=>"/var/log/quantum/l3-agent.log"}
BREAKS HERE
-  'f10a0b51f45c4f64c1fe69ef713abf9eb9571bc7385a82da892e83bb6c965e90'
BREAKS HERE
-        msg << " at #{cached.path}" if source.location.is_a?(CookbookSource::PathLocation)
BREAKS HERE
-default[:exhibitor][:version] = "1.4.3"
-default[:exhibitor][:mirror] = "https://github.com/Netflix/exhibitor/archive/exhibitor-#{default[:exhibitor][:version]}.tar.gz"
BREAKS HERE
-recipe 'openstack-network::client', 'Install packages required for network client'
-recipe 'openstack-network::server', 'Installs packages required for a OpenStack Network server'
-recipe 'openstack-network::openvswitch', 'Installs packages required for OVS'
-recipe 'openstack-network::metadata_agent', 'Installs packages required for a OpenStack Network Metadata Agent'
-recipe 'openstack-network::identity_registration', 'Registers OpenStack Network endpoints and service user with Keystone'
-recipe 'openstack-network::vpn_agent', 'Installs packages required for Network VPN Agent'
-recipe 'openstack-network::hyperv', 'Installs packages required for OpenStack Network Hyperv drivers'
BREAKS HERE
-'<% confs = [ @conf ].flatten
-  <% if @conf["listeners"].kind_of?(Array)
-      @conf["listeners"].each do |listener|
BREAKS HERE
-      property :sv_bin, String, default: lazy { node['runit']['sv_bin'] || ( platform_family?('debian') ? '/usr/bin/sv' : '/sbin/sv' ) }
BREAKS HERE
-depends 'openstack-common', '>= 11.0.0'
BREAKS HERE
-              telemetry network orchestration}
BREAKS HERE
-          Chef::Log.debug("[#{self.name}] Checking cookbook name for #{file}")
-            Chef::Log.debug("[#{self.name}] found cookbook #{cookbook.inspect}")
BREAKS HERE
-  command "postmap #{node['postfix']['conf_dir']}/sasl_passwd"
-  environment :PATH => "#{ENV['PATH']}:/opt/omni/bin:/opt/omni/sbin" if platform_family?('omnios')
-  action :nothing
-end
-
-template "#{node['postfix']['conf_dir']}/sasl_passwd" do
BREAKS HERE
-      uri_from_hash(node['openstack']['endpoints'][service][ep_type])
BREAKS HERE
-              "LowercaseMetricNames"=>"true",
-              "DifferentiateCountersOverTime" => true
BREAKS HERE
-    recent_upstart: (node['platform_family'] != 'rhel'),
BREAKS HERE
-        return Every.new(value)
-          return "0/#{@value}:0:0"
-          return "*:0/#{@value}:0"
-          return 'Mon..Fri'
-          return 'weekly'
-          return 'daily'
-          return 'monthly'
BREAKS HERE
-version '0.4.3'
-depends 'windows', '~> 1.37'
BREAKS HERE
-default[:cassandra][:conf_dir] = '/etc/cassandra/'
BREAKS HERE
-  pm2_command("reload #{new_resource.name}")
BREAKS HERE
-  module Systemd
BREAKS HERE
-
-remote_file "/opt/atlassian-bamboo-#{node['bamboo']['version']}.tar.gz" do
-  source "#{node['bamboo']['download_url']}"
-  mode "0644"
-  owner  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  not_if { ::File.exists?("/opt/atlassian-bamboo-#{node['bamboo']['version']}.tar.gz") }
-# create dir releases
-execute "tar -xvzf /opt/atlassian-bamboo-#{node['bamboo']['version']}.tar.gz -C /opt/" do
-  user  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  notifies :stop, resources(:service => "bamboo")
-  not_if { ::File.directory?("/opt/atlassian-bamboo-#{node['bamboo']['version']}/") }
-end
-
-# symlink from deployed release to current
-# create dir bamboo/current
-link "/opt/bamboo" do
-  to "/opt/atlassian-bamboo-#{node['bamboo']['version']}"
-end
-# insert jdbc mysql database_mysql.rb
-#if (node[:bamboo][:mysql])
-#   remote_file "/opt/bamboo/wrapper/lib/mysql_connector_java-#{node['bamboo']['mysql_connector_version']}.jar" do
-#     source "http://repo1.maven.org/maven2/mysql/mysql-connector-java/#{node['bamboo']['mysql_connector_version']}/mysql-connector-java-#{node['bamboo']['mysql_connector_version']}.jar"
-#     mode "0644"
-#     not_if { ::File.exists?("/opt/bamboo/wrapper/lib/mysql-connector-java-#{node['bamboo']['mysql_connector_version']}.jar") }
-#   end
-#end
-
-  directory "/opt/bamboo/lib" do
-  remote_file "/opt/bamboo/lib/mysql_connector_java-#{node['bamboo']['mysql_connector_version']}.jar" do
-    source "http://repo1.maven.org/maven2/mysql/mysql-connector-java/#{node['bamboo']['mysql_connector_version']}/mysql-connector-java-#{node['bamboo']['mysql_connector_version']}.jar"
-    mode "0644"
-    owner  node[:bamboo][:user]
-    group  node[:bamboo][:group]
-    not_if { ::File.exists?("/opt/bamboo/wrapper/lib/mysql-connector-java-#{node['bamboo']['mysql_connector_version']}.jar") }
-  end
-end
-template "bamboo.upstart.conf" do
-  path "/etc/init/bamboo.conf"
-  source "bamboo.upstart.conf.erb"
-  owner  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  mode "0644"
-  notifies :restart, resources(:service => "bamboo")
-  path "/opt/bamboo/webapp/WEB-INF/classes/bamboo-init.properties"
-  notifies :restart, resources(:service => "bamboo")
-  path "/opt/bamboo/webapp/WEB-INF/classes/seraph-config.xml"
-  notifies :restart, resources(:service => "bamboo")
-template "wrapper.conf" do
-  path "/opt/bamboo/conf/wrapper.conf"
-  source "wrapper.conf.erb"
-  owner  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  mode 0644
-  variables({
-         "port" => node['bamboo']['port'],
-         "xms" => node['bamboo']['xms'],
-         "xmx" => node['bamboo']['xmx'],
-         "permsize" => node['bamboo']['permsize']
-            })
-  notifies :restart, resources(:service => "bamboo")
-# link logs to logical location
-# this is because we use upstart + console option
-link "/opt/bamboo/logs/bamboo.log" do
-  to "/var/log/upstart/bamboo.log"
-end
-
BREAKS HERE
-default['build-essential']['msys']['path'] = "#{ENV['SYSTEMDRIVE']}\\msys"
BREAKS HERE
-    property :memory, Integer, default: 0
-    property :memory_swap, Integer, default: 0
BREAKS HERE
-
-  # aws-flow-ruby
-  default[:deploy][application][:aws_flow_ruby][:restart_command] = "#{deploy[:deploy_to]}/current/runner.initrc restart"
BREAKS HERE
-require 'uri'
-require 'net/http'
-begin
-  require 'chef/http/http_request' # Chef >= 11.8
-rescue LoadError
-  require 'chef/rest/rest_request' # Chef <= 11.6.2
-end
-
BREAKS HERE
-service_pass = get_password 'service', 'openstack-image'
-service_tenant_name = node['openstack']['image']['service_tenant_name']
-service_user = node['openstack']['image']['service_user']
-    identity_user service_user
-    identity_pass service_pass
-    identity_tenant service_tenant_name
BREAKS HERE
-default['logwatch']['email']  = 'root@localhost'
-default['logwatch']['sender']  = 'Logwatch'
BREAKS HERE
-    let(:other_config) { Soloist::Config.new("/yo/beans", other_rc) }
BREAKS HERE
-service 'apache2' do
-  action :start
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
-depends 'openstack-image', '>= 14.0.0'
BREAKS HERE
-  action node[:nominatim][:state] == :off ? :delete : :create
BREAKS HERE
-    attr_accessor :base
-    attr_accessor :version
-
-    def initialize
-      @base = URI.parse(node['terraform']['url_base'])
-      @version = node['terraform']['version']
-    end
-
-      "#{@base}/#{@version}/#{node['terraform']['zipfile']}"
BREAKS HERE
-source_url		   'https://github.com/jmadureira/netdata-cookbook'
-issues_url		   'https://github.com/jmadureira/netdata-cookbook/issues'
BREAKS HERE
-          %w(nas_ip nas_login nas_ssh_port).each do |attr|
-          it 'has a nas_password attribute' do
-            expect(chef_run).to render_file(file.name).with_content(/^nas_password=#{test_pass}$/)
BREAKS HERE
-pkgs += %w(xz-lzma-compat bzip2 tar) if platform_family?('rhel', 'fedora')
BREAKS HERE
-    expected_output = <<-OUTPUT
BREAKS HERE
-    unless new_resource.version =~ /\d+.\d+.\d+/
-      Chef::Log.fatal("The version must be in X.Y.Z format. Passed value: #{new_resource.version}")
-      raise
-    end
BREAKS HERE
-      Mixlib::Versioning.parse(Array.new(mixlib_install.artifact_info).first.version)
BREAKS HERE
-  default[:opsworks][:deploy_user][:group] = 'apache'
BREAKS HERE
-  start_time = new_resource.frequency == 'minute' ? (Time.now + 60 * new_resource.frequency_modifier.to_f).strftime('%H:%M') : nil
-    start_time         new_resource.start_time || start_time
BREAKS HERE
-    it 'uses the fqdn environmental variable' do
-      expect(ENV['HOST']).to be_nil
-      ENV['FQDN'] = "localhost"
-      expect(Universe.protocol_host_port(opts)).to eql("https://#{ENV['FQDN']}:6060")
-      expect(Universe.download_url(cookbook, version, "https://#{ENV['FQDN']}:6060")).to eql("https://#{ENV['FQDN']}:6060/api/v1/cookbooks/redis/versions/1.3.1/download")
BREAKS HERE
-  action       [:restart, :enable]
-ruby_block "Wait to set memory sizing=#{sizing} in ini file" do
-    Chef::Log.info 'Wait to update ini files on clean installation'
-    for i in 0..60
-      Chef::Log.debug "Waiting for file #{server_config_xml_file}..."
-      break if ::File.exists? server_config_xml_file
-      sleep(1)
-    end
-dynatrace_configure_ini_files "#{name} sizing=#{sizing}" do
-  installer_prefix_dir installer_prefix_dir
-  ini_files            ini_files
-  dynatrace_owner      dynatrace_owner
-  dynatrace_group      dynatrace_group
-  variables({ :memory => sizing })
-end
-
-
BREAKS HERE
-      expect(instance).to receive(:handler_settings_file).exactly(4).times
-      expect(instance).to receive(:value_from_json_file).exactly(4).times
BREAKS HERE
-default['dovecot']['conf']['password_file'] = (
-)
BREAKS HERE
-# create bamboo home_dir
-service "bamboo" do
-  provider Chef::Provider::Service::Upstart
-  supports :status => true, :restart => true, :start => true, :stop => true
-end
BREAKS HERE
-# Copyright 2011, Opscode, Inc.
-  if vhost.exists?(new_resource.vhost)
BREAKS HERE
-execute 'Wait 10s for nodes registration' do
-  command 'sleep 10s'
-  cwd Chef::Config[:file_cache_path]
-  only_if '[[ `oc get node --no-headers --config=admin.kubeconfig | grep -wc "Ready"` -eq 0 ]]'
-end
-
-  next if Mixlib::ShellOut.new("oc get node | egrep \"#{nodes['fqdn']}[[:space:]]\+Ready\"").run_command.error?
-openshift_deploy_registry 'Deploy Registry' do
-  number_instances Mixlib::ShellOut.new("oc get node --selector=#{node['cookbook-openshift3']['openshift_hosted_registry_selector']} --no-headers | wc -l").run_command.stdout
-  persistent_registry node['cookbook-openshift3']['registry_persistent_volume'].empty? ? false : true
-  only_if do
-    node['cookbook-openshift3']['openshift_hosted_manage_registry']
BREAKS HERE
-      directory "#{name}-#{version}" do
-        file "metadata.rb" do
-          contains version
-        end
-      end
BREAKS HERE
-default['haproxy']['defaults_options'] = ["tcpka", "httpchk", "tcplog"]
-default['haproxy']['defaults_timeouts']['client'] = "50s"
-default['haproxy']['defaults_timeouts']['server'] = "50s"
BREAKS HERE
-  default['openldap']['packages']['client_pkg'] = 'ldap-utils'
-  default['openldap']['packages']['bdb'] = 'db4-utils'
-  default['openldap']['packages']['client_pkg'] = 'openldap-clients'
-  default['openldap']['packages']['client_pkg'] = 'openldap-client'
-  default['openldap']['packages']['client_pkg'] = 'ldap-utils'
BREAKS HERE
-property :copyright, String, :default =>  "Copyright"
-property :resample, String, :default =>  "average"
-property :max_zoom, Fixnum, :default =>  23
BREAKS HERE
-  unless defined?(Chef::Compat::Resource) && defined?(ChefCompat::Mixin::Properties)
BREAKS HERE
-canonical_configure_args = node.automatic_attrs['nginx']['configure_arguments'].
-  reject{ |f| f =~ /(--add-module=\.\.\/)/ }.
-  map{ |f| f =~ /luajit/ ? '--with-luajit' : f }.
-  sort
BREAKS HERE
-recipe 'openstack-image::api', 'Installs packages required for a glance api server'
-recipe 'openstack-image::client', 'Install packages required for glance client'
-recipe 'openstack-image::registry', 'Installs packages required for a glance registry server'
-recipe 'openstack-image::identity_registration', 'Registers Glance endpoints and service with Keystone'
-recipe 'openstack-image::image_upload', 'Upload image using glance image-create command'
BREAKS HERE
-# Copyright 2013, Bloomberg Finance L.P.
-# mkoni need to set local_address to mgmt and floating VIPs
BREAKS HERE
-alias_method :sha1_base_path, :checksum_base_path
-alias :tarball_base_path :tarball_base_uri
-alias :checksum_base_path :checksum_base_uri
BREAKS HERE
-      "-r #{cache_dir}/splunk-response"
BREAKS HERE
-            description "Docker #{new_resource.repo_channel.capitalize} Respository"
BREAKS HERE
-        .with('/var/opt/delivery/workspace/.chef/knife.rb')
BREAKS HERE
-  default[:ruby][:patch] = platform?('ubuntu') && node[:platform_version] == '14.04' ? 'p481' : 'p451' # this attribute will disapier in favor of the sematic versioning schema
-  default[:ruby][:patch] = ''  # this attribute will disapier in favor of the sematic versioning schema
BREAKS HERE
-  '/dev/loop7'
BREAKS HERE
-    not_if { ["nicira", "plumgrid", "bigswitch"].include?(main_plugin)
-if not ["nicira", "plumgrid", "bigswitch"].include?(main_plugin) do
BREAKS HERE
-# Create an appliaction key on the Account Settings page
BREAKS HERE
-            Berkshelf.log.debug "  Uploading #{cookbook}"
BREAKS HERE
-       '7.2.4' => {
-              'x32' => '4b21768c1a04eb6c46fb29b50491c0c50bfbaee0f37d8bb849131fe1264d2140',
-              'x64' => 'b7428584ea394855686a5e5fdb7bc1f636dd2ad133c8a4de39ba6b06c77edd34',
-              'tar' => 'c5927ef75eec40b61e59b0fe4139ef0a2e38765d611cd8458c7b478060eeef52'
-              'x32' => '785052efba8d410fba9d694e94e453879a56643ecd7bdbc299e813a8160f2555',
-              'x64' => '4221c95932f4fa14394526a2ae03e4424f8a0e86979b7c92a8e8c4a020801521',
-              'tar' => '0a57714dc5cf8d136a5ecf9156c6875f5547ce6c2b7aac9acc94695ea2d4b529'
-       },
-        #7.2.5 Cancelled
-            'core' => {
-                'x32' => 'd3f9c7bdcc6cf0bd9c68f654b12d1d65e2d45b69e71868c219c300571adcc5ca',
-                'x64' => 'e6afc6aed46b85ee799fd077bf94c2fc7e70ae5d2630580e630aaf97c4cc8d48',
-                'tar' => '4136ffa64c44c84dca33032b1f0fc05b2316fa6beb54cddf0b922084378908e3'
-            },
-            'software' => {
-                'x32' => 'b37882cdadbc98a19bdb833c68a6ee95c8de58d39cf1e14189888b034c676a08',
-                'x64' => 'fb8e1a17f17676373c99bb00df717a148e69897106a66d6f4be3cabfd9af4626',
-                'tar' => '9369a8ce67ff200aa098a14690fd65a023f6ea7c5dbddf300462456cd35bea84'
-            }
-            'core' => {
-                'x32' => '89759f647b1bd2ebb77915e0dd52609f3adf3ce5af911ceb37fb66a0b9555956',
-                'x64' => '01d8a4edf45817aeff6bee3ec750c6b365bc009dffa3df56f300558b0e433c37',
-                'tar' => 'e27f2d6979beea214775e024989e6ab8de0184d47bda49be076c7b54da1b37e3'
-            },
-            'software' => {
-                'x32' => '16faa31f87bb876bb856bdace1cca3c5d4f4e25a49cc96a9b8c5ffc5953f59a2',
-                'x64' => '2564e47e924155f417706eafacdd089c69c1dfeab03a480946aeb41e8867b58e',
-                'tar' => '40c675eb1f35ca8003c3dfd952d9283bc2a69591bc641f3b40f44acacd02916c'
-            }
-            'core' => {
-                'x32' => '4e75caced513bf8561e9a03209de9ccf300a8a63523e4963f58b74488af2e7ba',
-                'x64' => '1560cb10a2394e3bf24b3eb51b3313fbf6e97305d5dabb60da961133c168bf4a',
-                'tar' => '07b47225be858eb7ad09f3b434d4865096ab10df92b0499fb234ef270500caac'
-            },
-            'software' => {
-                'x32' => '0d5df8e9001ee5d6d7d20fa678d762de35ff22f6aaadd6f206927ed286ca5498',
-                'x64' => '4e8ed1a8f480a083ad8025e0998795e6613e90cf1e67c7b1e2ab65facf327701',
-                'tar' => '20231b9e3e19b9b52a69e31c9921c9b6876624309da59c9689020dfd1f305944'
-            }
BREAKS HERE
-    :long => "--log_level LEVEL",
-      berksfile = Berksfile.new(manifest['berksfile']) if manifest.include?('berksfile')
-      if berksfile
-        cookbooks = Cookbooks.new(manifest['cookbooks'], berksfile.cookbook_list)
-        create = berksfile.create + cookbooks.create
-        delete = berksfile.delete + cookbooks.delete
-      else
-        cookbooks = Cookbooks.new(manifest['cookbooks'])
-        create = cookbooks.create
-        delete = cookbooks.delete
-      end
-      environments = Environments.new(manifest['environments'], cookbooks)
-      roles = Roles.new(manifest['roles'], environments, cookbooks)
-      data_bags = DataBags.new(manifest['data bags'])
-      nodes = Nodes.new(manifest['nodes'], cookbooks, environments, roles)
-      clusters = Clusters.new(manifest['clusters'], cookbooks, environments, roles)
-
-      create += environments.create + roles.create + data_bags.create + nodes.create + clusters.create
-      delete += environments.delete + roles.delete + data_bags.delete + nodes.delete + clusters.delete
-        puts opt_parser.to_s
BREAKS HERE
-  database_user "create database user #{user}"  do
BREAKS HERE
-        location.download
-      if scm_location?
BREAKS HERE
-if platform_family?("rhel")
BREAKS HERE
-          @lsb_init ||=
-            begin
-              initfile = ::File.join(new_resource.lsb_init_dir, new_resource.service_name)
-              if node['platform'] == 'debian'
-                ::File.unlink(initfile) if ::File.symlink?(initfile)
-                t = Chef::Resource::Template.new(initfile, run_context)
-                t.owner('root')
-                t.group('root')
-                t.mode(00755)
-                t.cookbook('runit')
-                t.source('init.d.erb')
-                t.variables(:name => new_resource.service_name)
-                t
-              else
-                l = Chef::Resource::Link.new(initfile, run_context)
-                l.to(new_resource.sv_bin)
-                l
-              end
BREAKS HERE
-node.set['postfix']['relayhost'] = "[#{relayhost}]"
BREAKS HERE
-    'cinder_volume_packages' => [],
-    'cinder_volume_packages' => ['openstack-cinder-volume'],
-    'cinder_volume_packages' => ['cinder-volume'],
BREAKS HERE
-          puts "found hostname #{config[:hostname]} in config object"
BREAKS HERE
-attribute :destination, :kind_of => String, :default => "/Applications"
-attribute :type, :kind_of => String, :default => "app"
BREAKS HERE
-      desc: "Skip uploading dependant cookbook(s).",
BREAKS HERE
-default['rabbitmq']['deb_package'] = lazy { "rabbitmq-server_#{node['rabbitmq']['version']}-1_all.deb" }
-default['rabbitmq']['deb_package_url'] = lazy { "https://www.rabbitmq.com/releases/rabbitmq-server/v#{node['rabbitmq']['version']}/" }
-                                         lazy { "rabbitmq-server-#{node['rabbitmq']['version']}-1.el7.noarch.rpm" }
-                                         lazy { "rabbitmq-server-#{node['rabbitmq']['version']}-1.el6.noarch.rpm" }
-  default['rabbitmq']['rpm_package'] = lazy { "rabbitmq-server-#{node['rabbitmq']['version']}-1.suse.noarch.rpm" }
-default['rabbitmq']['rpm_package_url'] = lazy { "https://www.rabbitmq.com/releases/rabbitmq-server/v#{node['rabbitmq']['version']}/" }
-default['rabbitmq']['config'] = lazy { "#{node['rabbitmq']['config_root']}/rabbitmq" }
BREAKS HERE
-  validate_repo_key =  bigtop_release.downcase == 'develop' ? false : true
BREAKS HERE
-# This attribute is now DEPRECATED and will be removed. Use the default
-# attributes below instead.
-default['openstack']['developer_mode'] = false
-default['openstack']['release'] = 'juno'
-default['openstack']['yum']['uri'] = 'http://repos.fedorapeople.org/repos/openstack/openstack-juno/epel-7'
-default['openstack']['yum']['repo-key'] = 'https://raw.githubusercontent.com/redhat-openstack/rdo-release/master/RPM-GPG-KEY-RDO-Juno'
-# logging.conf list keypairs module_name => log level to write
-# DEPRECATED, use new loggers attributes below.
-# TODO(MRV) remove in Juno
-# The old defaults have been incorporated below:
-# { 'nova.api.openstack.wsgi' => 'WARNING',
-#   'nova.osapi_compute.wsgi.server' => 'WARNING' }
-default['openstack']['logging']['ignore'] = {}
-
BREAKS HERE
-          JSON.parse({ development: db_config, production: db_config }.to_json).to_yaml
-        .with_content('unicorn_rails --env production')
-          JSON.parse({ development: db_config, production: db_config }.to_json).to_yaml
-      node(deploy: { dummy_project: { database: { adapter: 'sqlite3' } } })
-          JSON.parse({ development: db_config, production: db_config }.to_json).to_yaml
-          JSON.parse({ development: db_config, production: db_config }.to_json).to_yaml
BREAKS HERE
-  service_name platform_options["nova_os_compute_service"]
BREAKS HERE
-      mode '0700'
BREAKS HERE
-    source "#{node['platform']}/prometheus.erb"
BREAKS HERE
-service node['bind']['service_name'] do
-  supports :reload => true, :status => true
-  action [ :enable, :start ]
-end
-
-template "#{node['bind']['sysconfdir']}/named.options" do
-  notifies :reload, "service[#{node['bind']['service_name']}]"
-template "#{node['bind']['sysconfdir']}/named.conf" do
-  notifies :reload, "service[#{node['bind']['service_name']}]"
BREAKS HERE
-attr_accessor :path, :release_file, :prefix_bin, :prefix_root, :home_dir, :extension, :version
BREAKS HERE
-        resize_logical_volume
BREAKS HERE
-if node['ntp']['servers'].empty?
-  node.default['ntp']['servers'] = [
-    '0.pool.ntp.org',
-    '1.pool.ntp.org',
-    '2.pool.ntp.org',
-    '3.pool.ntp.org',
-  ]
-  Chef::Log.debug 'No NTP servers specified, using default ntp.org server pools'
-end
-
BREAKS HERE
-  
BREAKS HERE
-version '1.0.1'
BREAKS HERE
-prospector_prefix = node['filebeat']['prospector']['prefix']
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{prospector_prefix}#{new_resource.name}.yml")
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{prospector_prefix}#{new_resource.name}.yml")
-    path ::File.join(filebeat_install_resource.prospectors_dir, "#{prospector_prefix}#{new_resource.name}.yml")
BREAKS HERE
-default['openstack']['network']['service_role'] = 'service'
BREAKS HERE
-    options [ 'missingok', 'delaycompress', 'notifempty', 'compress', 'copytruncate' ]
BREAKS HERE
-  system node['cassandra']['system_user']
-  system node['cassandra']['system_user']
BREAKS HERE
-  if node[:platform_version] <= "8.04" && node[:platform] =~ /ubuntu/i
BREAKS HERE
-version           "7.0.0"
BREAKS HERE
-install_path = "#{node['consul_template']['install_dir']}\
-/#{ConsulTemplateHelpers.install_version(node)}".tr('/', '\\')
BREAKS HERE
-# require 'spiceweasel/directory_extractor'
-# require 'spiceweasel/cookbook_data'
-      parse_and_validate_input
-
-      cookbooks = Cookbooks.new(manifest['cookbooks'], options)
-      environments = Environments.new(manifest['environments'], cookbooks, options)
-      roles = Roles.new(manifest['roles'], environments, cookbooks, options)
-      data_bags = DataBags.new(manifest['data bags'], options)
-      nodes = Nodes.new(manifest['nodes'], cookbooks, environments, roles, options)
-      clusters = Clusters.new(manifest['clusters'], cookbooks, environments, roles, options)
-
-      # require 'pry'
-      # binding.pry
-
-      puts cookbooks.create
-      puts environments.create
-      puts roles.create
-      puts data_bags.create
-      puts nodes.create
-      puts clusters.create
-          STDERR.puts "ERROR: Invalid manifest .json or .yml file provided."
-      Spiceweasel::Log.debug("file manifest: #{@manifest}")
BREAKS HERE
-  command "cmd /c \"#{node['chef_client']['ruby_bin']} #{node['chef_client']['bin']} \
-  -c #{File.join(node['chef_client']['conf_dir'], 'client.rb')} -s #{node['chef_client']['splay']} > NUL 2>&1\""
BREAKS HERE
-      @cookbooks = @cookbooks.search(params[:q])
BREAKS HERE
-        "cookbook 'build-essential', :locked_version => '1.1.0'", 
-        "cookbook 'nginx', :locked_version => '0.101.0'", 
-        "cookbook 'ohai', :locked_version => '1.0.2'", 
-      ] 
BREAKS HERE
-      return true if attrs.has_key?('mail_plugins') and attrs['mail_plugins'].include?(plugin)
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-      :stage
-      _change = node['delivery']['change']
-      @enterprise = _change['enterprise']
-      @organization = _change['organization']
-      @project = _change['project']
-      @pipeline = _change['pipeline']
-      @stage = _change['stage']
BREAKS HERE
-      tempfile.write(DEPENDENCIES)
-      tempfile.write("\n")
-      dependencies.sort.each do |dependency|
-        tempfile.write(dependency.to_lock)
-      end
-
-      tempfile.write("\n")
-      tempfile.write(graph.to_lock)
BREAKS HERE
-if ENV['BERKS_TEST_KITCHEN'] == "1"
-  require 'kitchen/cli'
-end
-
-    if ENV['BERKS_TEST_KITCHEN'] == "1"
-      register(Kitchen::CLI, 'test', 'test [COMMAND]', 'Testing tasks for your cookbook')
-    end
-
BREAKS HERE
-
-
BREAKS HERE
-  new_resource.prevent_downgrade ? (des_version > cur_version) : (des_version != cur_version)
BREAKS HERE
-        ot = template ::File.join(node['icinga2']['objects_dir'], "#{resource_name}.conf") do
-        te = template ::File.join(node['icinga2']['objects_dir'], "#{resource_name}_template.conf") do
-          zone_dir = directory "zone_#{zone}" do
-          zoned_ot = template ::File.join(node['icinga2']['zones_dir'], zone, "#{resource_name}.conf") do
-          zoned_te = template ::File.join(node['icinga2']['zones_dir'], zone, "#{resource_name}_template.conf") do
BREAKS HERE
-keyring = "/etc/ceph/#{node['ceph']['cluster']}.mon.keyring"
-  command <<-EOH
-    ceph-authtool #{keyring} --import-keyring /etc/ceph/#{node['ceph']['cluster']}.client.admin.keyring
-  EOH
BREAKS HERE
-# Copyright:: 2008-2017, Chef Software, Inc.
-  # We should be able to switch emulate_cron.d on for Solaris, but I don't have a Solaris box to verify
-  raise 'Solaris does not support cron jobs in /etc/cron.d' if node['platform_family'] == 'solaris2'
-    notifies :create, 'template[/etc/crontab]', :delayed if node['cron']['emulate_cron.d']
-    notifies :create, 'template[/etc/crontab]', :delayed if node['cron']['emulate_cron.d']
-      notifies :create, 'template[/etc/crontab]', :delayed if node['cron']['emulate_cron.d']
-      notifies :create, 'template[/etc/crontab]', :delayed if node['cron']['emulate_cron.d']
BREAKS HERE
-      Chef::Log.debug(
-        "Compiled version exists? #{File.exist?(decryptor_path + '.class')}"
-      )
-
BREAKS HERE
-        File.rename(scratch, path)
BREAKS HERE
-  service "unmask, start #{type} swap" do
-    action [:unmask, :start]
BREAKS HERE
-  compile_time true if respond_to?(:compile_time)
BREAKS HERE
-  bbox [[-35.12, 16.23], [-22.1, 33.18]]
BREAKS HERE
-      @worker     = Worker.pool(size: [(Celluloid.cores - 1), 2].max, args: [berksfile])
BREAKS HERE
-default[:zookeeper][:checksum]    = '01b3938547cd620dc4c93efe07c0360411f4a66962a70500b163b59014046994'
-default[:zookeeper][:java_opts] = "-Xms128M -Xmx512M"
-default[:zookeeper][:log_dir]     = "/var/log/zookeeper"
BREAKS HERE
-define :psgi_application, :cookbook => 'psgi', :operator => 'Catalyst', :environment => {}, :plackup_environment => 'development', :proc_manager => 'FCGI::ProcManager',  :perl5lib => [], :nproc => '1',  :debug => '1', :install_dir => '/etc/init.d/', :enable_service => 'on', :ignore_failure => true do 
BREAKS HERE
-      'cookbook_name' => cookbook_version.name,
-      'cookbook_version' => cookbook_version.version,
-      'cookbook_artifact_url' => cookbook_version.cookbook_artifact_url
-    Net::HTTP.post_form(uri, data)
BREAKS HERE
-# 
-# * **0**  - do not accept router advertisements.
BREAKS HERE
-Given "a cookbook recipe that contains a group resource that uses the 'system' attribute" do
BREAKS HERE
-  compile_time true if respond_to?(:compile_time)
BREAKS HERE
-default["openstack"]["dashboard"]["use_ssl"] = true
BREAKS HERE
-        name = name.to_s unless name.is_a? String
-        @name = name
BREAKS HERE
-  if (node['hadoop'].has_key 'core_site' and node['hadoop']['core_site'].has_key? 'hadoop.tmp.dir')
BREAKS HERE
-        STDOUT.puts "DEBUG: node: '#{node[name]}'" if Spiceweasel::DEBUG
-          STDOUT.puts "DEBUG: node: '#{node[name]}' run_list: '#{run_list}'" if Spiceweasel::DEBUG
-          STDOUT.puts "DEBUG: node: '#{node[name]}' options: '#{noptions}'" if Spiceweasel::DEBUG
BREAKS HERE
-  when 'runit'
-    include_recipe 'runit::default'
-
-    consul_template_user = node['consul_template']['service_user']
-    consul_template_group = node['consul_template']['service_group']
-    consul_template_directories << '/var/log/consul-template'
-  when 'systemd'
-    consul_template_user = node['consul_template']['service_user']
-    consul_template_group = node['consul_template']['service_group']
-  else
-    consul_template_user = 'root'
-    consul_template_group = 'root'
-  when 'init', 'upstart'
-    is_upstart = node['consul_template']['init_style'] == 'upstart'
-    if platform?("ubuntu") || is_upstart
-      is_upstart = true
-      init_file = '/etc/init/consul-template.conf'
-      init_tmpl = 'consul-template-conf.erb'
-    else
-      init_file = '/etc/init.d/consul-template'
-      init_tmpl = 'consul-template-init.erb'
-    end
-
-    template init_file do
-      source init_tmpl
-      mode 0755
-      variables(
-          command: command,
-          options: options,
-          loglevel: node['consul_template']['log_level']
-      )
-      notifies :restart, 'service[consul-template]', :immediately
-    end
-
-    service 'consul-template' do
-      provider Chef::Provider::Service::Upstart if is_upstart
-      supports status: true, restart: true, reload: true
-      action [:enable, :start]
-    end
-
-  when 'runit'
-    runit_service 'consul-template' do
-      supports status: true, restart: true, reload: true
-      action [:enable, :start]
-      log true
-      options(
-          command: command,
-          options: options
-      )
-      env 'CONSUL_TEMPLATE_LOG' => node['consul_template']['log_level']
-    end
-
-  when 'systemd'
-    template '/etc/systemd/system/consul-template.service' do
-      source 'consul-template-systemd.erb'
-      mode 0755
-      variables(
-          command: command,
-          options: options
-      )
-      notifies :restart, 'service[consul-template]', :immediately
-    end
-
-    service 'consul-template' do
-      supports status: true, restart: true, reload: true
-      action [:enable, :start]
-    end
BREAKS HERE
-    cmd << "\""
-    cmd << "\""
BREAKS HERE
-FactoryGirl.define do
BREAKS HERE
-        Dir[::File.join(tidy.reports_dir, '**')]
-          org = ::File.basename(file).match(/^(.*?)_/).captures[0]
BREAKS HERE
-  context 'Sqlite3 + Thin' do
-            webserver: node['deploy']['dummy_project']['webserver']
BREAKS HERE
-        expected_metadata = <<-METADATA
-name             'my_cool_generator'
-description      'Custom code generator cookbook for use with ChefDK'
-long_description 'Custom code generator cookbook for use with ChefDK'
-version          '0.1.0'
BREAKS HERE
-default['graylog2']['server']['version']          = '2.1.1-1'
BREAKS HERE
-version          "7.2.1"
BREAKS HERE
-    mode "755"
-    mode "644"
BREAKS HERE
-        #{credential_lookup_groovy('credentials_id')}
-            credentials_id,
-        map[:credentials] = 'hudson.plugins.sshslaves.SSHLauncher.lookupSystemCredentials(slave.launcher.credentialsId).username'
-        "#{groovy_variable_name} = #{convert_to_groovy(new_resource.parsed_credentials)}"
-          #{credentials_for_username_groovy(new_resource.parsed_credentials, 'user_credentials')}
-          #{groovy_variable_name} = user_credentials.id
BREAKS HERE
-      port = node['openstack']['mq']['port']
-        port = n['openstack']['mq']['port']
BREAKS HERE
-# chef version 11
-if VERSION.start_with? '11.'
-  ruby_block "loading for chef 11 install webcenter extract" do
-    block do
-      if node['os'].include?('windows')
-        res = Chef::Resource::Chef::Resource::FmwInstFmwExtractWindows.new('webcenter', run_context )
-      else
-        res = Chef::Resource::Chef::Resource::FmwInstFmwExtract.new('webcenter', run_context )
-      end
-      res.source_file         node['fmw_inst']['webcenter_source_file']
-      res.source_2_file       node['fmw_inst']['webcenter_source_2_file'] if node['fmw_inst'].attribute?('webcenter_source_2_file')
-      res.os_user             node['fmw']['os_user']                      if unix
-      res.os_group            node['fmw']['os_group']                     if unix
-      res.tmp_dir             node['fmw']['tmp_dir']
-      res.version             node['fmw']['version']                      unless unix
-      res.middleware_home_dir node['fmw']['middleware_home_dir']          unless unix
-      res.run_action          :extract
-    end
-  end
-else
-  fmw_inst_fmw_extract 'webcenter' do
-    action              :extract
-    source_file         node['fmw_inst']['webcenter_source_file']
-    source_2_file       node['fmw_inst']['webcenter_source_2_file']   if node['fmw_inst'].attribute?('webcenter_source_2_file')
-    os_user             node['fmw']['os_user']                        if unix
-    os_group            node['fmw']['os_group']                       if unix
-    tmp_dir             node['fmw']['tmp_dir']
-    version             node['fmw']['version']                        unless unix
-    middleware_home_dir node['fmw']['middleware_home_dir']            unless unix
-  end
-# chef version 11
-if VERSION.start_with? '11.'
-  ruby_block "loading for chef 11 install webcenter" do
-    block do
-      if node['os'].include?('windows')
-        res2 = Chef::Resource::Chef::Resource::FmwInstFmwInstallWindows.new('webcenter', run_context )
-      elsif node['os'].include?('solaris2')
-        res2 = Chef::Resource::Chef::Resource::FmwInstFmwInstallSolaris.new('webcenter', run_context )
-      else
-        res2 = Chef::Resource::Chef::Resource::FmwInstFmwInstallLinux.new('webcenter', run_context )
-      end
-      res2.java_home_dir       node['fmw']['java_home_dir']
-      res2.installer_file      fmw_installer_file
-      res2.rsp_file            node['fmw']['tmp_dir'] + '/wc_' + fmw_template
-      res2.version             node['fmw']['version']
-      res2.oracle_home_dir     fmw_oracle_home
-      res2.orainst_dir         node['fmw']['orainst_dir']                      if unix
-      res2.os_user             node['fmw']['os_user']                          if unix
-      res2.os_group            node['fmw']['os_group']                         if unix
-      res2.tmp_dir             node['fmw']['tmp_dir']
-      res2.run_action          :install
-    end
-  end
-else
-  fmw_inst_fmw_install 'webcenter' do
-    action              :install
-    java_home_dir       node['fmw']['java_home_dir']
-    installer_file      fmw_installer_file
-    rsp_file            node['fmw']['tmp_dir'] + '/wc_' + fmw_template
-    version             node['fmw']['version']
-    oracle_home_dir     fmw_oracle_home
-    orainst_dir         node['fmw']['orainst_dir']                     if unix
-    os_user             node['fmw']['os_user']                         if unix
-    os_group            node['fmw']['os_group']                        if unix
-    tmp_dir             node['fmw']['tmp_dir']
-  end
BREAKS HERE
-  'initial_captain' => false,
-  'shcluster_members' => []
BREAKS HERE
-      context "when there are no revisions of the policy on the server" do
-        allow(http_client).to receive(:get).with("policy_groups/dev/policies/appserver").and_raise(http_exception)
BREAKS HERE
-db_type = node['openstack']['db']['compute']['db_type']
-db_user = node["openstack"]["compute"]["db"]["username"]
-if node["openstack"]["compute"]["mq"]["service_type"] == "rabbitmq"
-  if node["openstack"]["compute"]["rabbit"]["ha"]
-  rabbit_pass = get_password "user", node["openstack"]["compute"]["rabbit"]["username"]
BREAKS HERE
-  'verify_api_cert' => true
-  'mailto' => nil
BREAKS HERE
-service "eucalyptus-cloud" do
BREAKS HERE
-  cmd2exec = "rm -rf /opt/dynatrace/init.d/dynaTraceHostagent"
-	cmd2exec = "rm -rf /opt/dynatrace/agent/conf/dthostagent.ini"
-  cmd2exec = "rm -rf /opt/dynatrace/agent/conf/dthostagent.ini.old"
-  cmd2exec = "rm -rf /opt/dynatrace/agent/conf/dthostagent.ini_backup"
BREAKS HERE
-    'collector_service' => 'openstack-ceilometer-collector'
-    'collector_service' => 'openstack-ceilometer-collector'
-    'collector_service' => 'ceilometer-collector'
BREAKS HERE
-Given /a(nother)? cookbook with a single recipe that (reads|updates|ignores)(nested)? node attributes via ([a-z,]*)(?:(?: and calls node\.)?([a-z_]+)?| with (.*)?)(?: only)?$/ do |more_than_one,op,nested,types,method,expr|
-    recipe_content += {:run_list => "log 'hello' if node.run_list.roles.include?(node[:foo][:bar])",
-     :run_state => "node.run_state[:reboot_requested] = true",
-     :set => "node.set['foo']['bar']['baz'] = 'secret'"}[method.to_sym]
BREAKS HERE
-                'package_name' => 'mysql-community-server',
BREAKS HERE
-package 'perl-devel'
-
-
BREAKS HERE
-		options.merge!({ ssl_verify_mode: (Berkshelf::Config.instance.ssl.verify.nil? || Berkshelf::Config.instance.ssl.verify) ? OpenSSL::SSL::VERIFY_PEER : OpenSSL::SSL::VERIFY_NONE) })
BREAKS HERE
-  ["ubuntu", "debian", "arch"] => {"default" => ["vim"]},
-  ["redhat", "centos", "fedora", "scientific"] => {"default" => ["vim-minimal","vim-enhanced"]},
-  "default" => ["vim"]
BREAKS HERE
-package 'git' do
-  action :install
-  options '--no-install-recommends'
BREAKS HERE
-    # @return [Logger]
-    def logger
-      Celluloid.logger
-    end
-
BREAKS HERE
-class ::Chef::Recipe # rubocop:disable Documentation
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-api_internal_endpoint = internal_endpoint 'image-api'
-api_public_endpoint = public_endpoint 'image-api'
-api_admin_endpoint = admin_endpoint 'image-api'
-service_tenant_name = node['openstack']['image']['service_tenant_name']
-service_user = node['openstack']['image']['service_user']
-region = node['openstack']['image']['region']
-
-
-
-
-
BREAKS HERE
-          parallel = "seq #{count} | parallel -u -j 0 -v \""
-          parallel += "\""
BREAKS HERE
-    mode '0750'
BREAKS HERE
-      context "extended_logs set to false" do
-          expect(instance).to receive(:load_cloud_attributes_in_hints)
-          expect(instance).to receive(:load_cloud_attributes_in_hints)
-      context "extended_logs set to true" do
BREAKS HERE
-default['ubuntu']['archive_url']  = "http://us.archive.ubuntu.com/ubuntu"
-default['ubuntu']['security_url'] = "http://security.ubuntu.com/ubuntu"
-default['ubuntu']['components'] = "main restricted universe multiverse"
-default['ubuntu']['locale'] = nil
BREAKS HERE
-Then(/^the metadata missing source_url warning (\d+) should be (shown|not shown) against the metadata file$/) do |show_warning|
BREAKS HERE
-radosgw = node['eucalyptus']['topology']['ceph-keyrings']['radosgw']
-adminkeyring = node['eucalyptus']['topology']['ceph-keyrings']['ceph-admin']
-
-  notifies :restart, 'service[ceph-radosgw]', :delayed
-template "#{radosgw['keyring']}" do
-  source "client-keyring.erb"
-  variables(
-    :keyring => radosgw
-  )
-  action :create
-  only_if { node['eucalyptus']['topology']['ceph-keyrings']['radosgw'] }
-end
-template "#{adminkeyring['keyring']}" do
-  source "client-keyring.erb"
-  variables(
-    :keyring => adminkeyring
-  )
-  action :create
-  only_if { node['eucalyptus']['topology']['ceph-keyrings']['ceph-admin'] }
-    if node['eucalyptus']['topology']['ceph-radosgw']['username']
-      new_username = node['eucalyptus']['topology']['ceph-radosgw']['username']
-    else
-      raise Exception.new("'username' not found in node['eucalyptus']['topology']['ceph-radosgw']")
-
-    Chef::Log.info "ACCESS_KEY and/or SECRET_KEY not found. Creating new user: #{new_username}"
-    new_user = JSON.parse(%x[radosgw-admin user create --uid=#{new_username} --display-name="#{new_username}"])
-    node.set['eucalyptus']['topology']['ceph-radosgw']['access-key'] = new_user['keys'][0]['access_key']
-    node.set['eucalyptus']['topology']['ceph-radosgw']['secret-key'] = new_user['keys'][0]['secret_key']
-    node.save
-  only_if { node['eucalyptus']['topology']['ceph-radosgw']['access-key'] == nil || node['eucalyptus']['topology']['ceph-radosgw']['secret-key'] == nil }
-service "ceph-radosgw" do
-  service_name "ceph-radosgw"
-  action :nothing
-  supports :status => true, :start => true, :stop => true, :restart => true
-end
-
BREAKS HERE
-  result = match && match.gsub!(/'/, '').split(',')
-  !result.nil? ? result : []
-  result = match && match.gsub!(/'/, '').split(',')
-  !result.nil? ? result : []
BREAKS HERE
-        node['mysql']['server_root_password'].empty? ? str << ' < /etc/mysql_grants.sql' : str << " -p#{node['mysql']['server_root_password']}"
BREAKS HERE
-chef_gem "dynect_rest" do
BREAKS HERE
-property :region,                 String, default: lazy { aws_region }
BREAKS HERE
-default['openstack']['network']['dhcp']['dnsmasq_url'] = 'https://github.com/guns/dnsmasq/archive/v2.65.tar.gz'
BREAKS HERE
-        node['elasticsearch'] &&
-        node['elasticsearch']['checksums'] &&
-        node['elasticsearch']['checksums'][version] &&
-        node['elasticsearch']['checksums'][version]['tar']
-        node['elasticsearch'] &&
-        node['elasticsearch']['checksums'] &&
-        node['elasticsearch']['checksums'][version] &&
-        node['elasticsearch']['checksums'][version][platform_family]
BREAKS HERE
-      attr_reader :deleted
BREAKS HERE
-attribute :reload, :kind_of => [Symbol], :equal_to => [:delayed, :immeditaely], :default => :delayed # How soon should we restart nginx.
BREAKS HERE
-default['openstack']['endpoints']['block-storage-api']['path'] = '/v2/%(tenant_id)s'
BREAKS HERE
-# ensure, that you have postgresql::server in your runlist 
BREAKS HERE
-        fail 'Cannot find snapshot id!' unless snapshot_id
-        fail 'Cannot find instance id!' unless instance_id
-        fail 'Cannot find availability zone!' unless availability_zone
BREAKS HERE
-    before do
-        "cookbook 'bluepill', :locked_version => '1.0.6'",
-        "cookbook 'build-essential', :locked_version => '1.1.0'",
BREAKS HERE
-                  :add_cloud_custom_vars,
-          unless node_hash[k] == v
-            next
BREAKS HERE
-    :name => node['bamboo']['name']
BREAKS HERE
-        @current_resource.version(current_plugin[:plugin_version])
-      block = proc do
-          # Use the remote_file resource to download and cache the plugin (see
-          # comment below for more information).
-          name   = "#{new_resource.name}-#{new_resource.version}.plugin"
-          path   = ::File.join(Chef::Config[:file_cache_path], name)
-          plugin = Chef::Resource::RemoteFile.new(path, run_context)
-          plugin.source(new_resource.source)
-          plugin.backup(false)
-          plugin.run_action(:create)
-
-          # Install the plugin from our local cache on disk. There is a bug in
-          # Jenkins that prevents Jenkins from following 302 redirects, so we
-          # use Chef to download the plugin and then use Jenkins to install it.
-          # It's a bit backwards, but so is Jenkins.
-          executor.execute!('install-plugin', escape(plugin.path), '-name', escape(new_resource.name), new_resource.options)
-          # Install the plugin from the update-center. This results in the
-          # same behaviour as using the UI to install plugins.
-          executor.execute!('install-plugin', escape(new_resource.name), new_resource.options)
-          converge_by("Upgrade #{new_resource} from #{current_resource.version} to #{new_resource.version}", &block)
-        converge_by("Install #{new_resource}", &block)
-      disabled = "#{plugin_file}.disabled"
-      disabled = "#{plugin_file}.disabled"
-          file = Resource::File.new(plugin_file, run_context)
-          file.backup(false)
-          file.run_action(:delete)
-          directory = Resource::Directory.new(plugin_data_directory, run_context)
-          directory.recursive(true)
-          directory.run_action(:delete)
-    # Loads the local plugin into a hash
-    def current_plugin
-      return @current_plugin if @current_plugin
-
-      manifest = ::File.join(plugins_directory, new_resource.name, 'META-INF', 'MANIFEST.MF')
-      Chef::Log.debug "Load #{new_resource} plugin information from #{manifest}"
-
-      return nil unless ::File.exist?(manifest)
-      @current_plugin = {}
-      ::File.open(manifest, 'r', encoding: 'utf-8') do |file|
-        file.each_line do |line|
-          next if line.strip.empty?
-          #
-          # Example Data:
-          #   Plugin-Version: 1.4
-          #
-          config, value = line.split(/:\s/, 2)
-          config = config.gsub('-', '_').downcase.to_sym
-          value = value.strip if value # remove trailing \r\n
-          @current_plugin[config] = value
-        end
-      end
-    def plugin_file
-      hpi = ::File.join(plugins_directory, "#{new_resource.name}.hpi")
-      jpi = ::File.join(plugins_directory, "#{new_resource.name}.jpi")
-    def plugin_data_directory
-      ::File.join(plugins_directory, new_resource.name)
BREAKS HERE
-    alias_method :label, :labels
-    alias_method :tlscacert, :tls_ca_cert
-    alias_method :tlscert, :tls_server_cert
-    alias_method :tlskey, :tls_server_key
-    alias_method :tlsverify, :tls_verify
BREAKS HERE
-default[:bcpc][:hadoop][:hdfs][:ldap].tap do |ldap|
-  ldap[:integration] = false
-  ldap[:user] = "" #must be LDAP DN
-  ldap[:domain] = "BCPC.EXAMPLE.COM"
-  ldap[:port] = 389
-  ldap[:password] =  nil
-  ldap[:search][:depth] = 0
-  ldap[:search][:filter][:user]="(&(objectclass=user)(sAMAccountName={0}))"
-  ldap[:search][:filter][:group]="(objectClass=group)"
-end
-
BREAKS HERE
-    include DepSelector
-    def_delegator :@graph, :package
-    def_delegator :@graph, :packages
-      @graph = DependencyGraph.new
-      package = add_package(source.name)
-      package_version = add_version(package, Version.new(source.cached_cookbook.version))
-      solution = quietly { selector.find_solution(solution_constraints) }
-      attr_reader :graph
-
-      def selector
-        Selector.new(graph)
-      end
-
-      def solution_constraints
-        constraints = graph.packages.collect do |name, package|
-          SolutionConstraint.new(package)
-        end
-      end
-
-      # @param [String] name
-      #   name of the package to add to the graph
-      def add_package(name)
-        graph.package(name)
-      end
-
-      # Add a version to a package
-      #
-      # @param [DepSelector::Package] package
-      #   the package to add a version to
-      # @param [DepSelector::Version] version
-      #   the version to add the the package
-      def add_version(package, version)
-        package.add_version(version)
-      end
BREAKS HERE
-    zones[interface[:zone]] ||= Hash.new
-    zones[interface[:zone]][interface[:family]] ||= Array.new
BREAKS HERE
-# -----------------------------------------------------------------------------
-# Regular configs
-# -----------------------------------------------------------------------------
-# -----------------------------------------------------------------------------
-# Factory configs
-# -----------------------------------------------------------------------------
-# -----------------------------------------------------------------------------
-# Actions
-# -----------------------------------------------------------------------------
BREAKS HERE
-    template "/etc/systemd/system/tomcat_#{instance_name}.service" do
BREAKS HERE
-  default['openstack']['endpoints']['block-storage'][ep_type]['scheme'] = 'http'
-  default['openstack']['endpoints']['block-storage'][ep_type]['path'] = '/v2/%(tenant_id)s'
-  %w(endpoints bind_service).each do |type|
-    default['openstack'][type]['block-storage'][ep_type]['host'] = '127.0.0.1'
-    default['openstack'][type]['block-storage'][ep_type]['port'] = '8776'
-  end
-
BREAKS HERE
-class Chef
-  # Chef Provider for installing an elasticsearch plugin
-  class Provider::ElasticsearchPlugin < Chef::Provider::LWRPBase
-    include ElasticsearchCookbook::Helpers
-    include Chef::Mixin::ShellOut
-
-    action :install do
-      name    = new_resource.plugin_name
-      version = new_resource.version ? "/#{new_resource.version}" : nil
-      url     = new_resource.url ? " -url #{new_resource.url}" : nil
-
-      fail 'Could not determine the plugin directory. Please set plugin_dir on this resource.' unless new_resource.plugin_dir
-      converge_by("install plugin #{name}") do
-        plugin_exists = begin
-                          Dir.entries(new_resource.plugin_dir).any? do |plugin|
-                            next if plugin =~ /^\./
-                            name.include? plugin
-                          end
-                        rescue
-                          false
-        unless plugin_exists
-          # automatically raises on error, logs command output
-          shell_out!("#{new_resource.bindir}/plugin -install #{name}#{version}#{url}".split(' '), user: new_resource.user, group: new_resource.group)
-          new_resource.updated_by_last_action(true)
-        end
-    end # action
-
-    action :remove do
-      name    = new_resource.plugin_name
-
-      fail 'Could not determine the plugin directory. Please set plugin_dir on this resource.' unless new_resource.plugin_dir
-      converge_by("install plugin #{name}") do
-        plugin_exists = begin
-                          Dir.entries(new_resource.plugin_dir).any? do |plugin|
-                            next if plugin =~ /^\./
-                            name.include? plugin
-                          end
-                        rescue
-                          false
-        if plugin_exists
-          # automatically raises on error, logs command output
-          shell_out!("#{new_resource.bindir}/plugin -remove #{name}".split(' '), user: new_resource.user, group: new_resource.group)
-          new_resource.updated_by_last_action(true)
-        end
-    end # action
-  end # provider
-end # chef class
BREAKS HERE
-      limit_cpu: 60
BREAKS HERE
-  pp data_bag_item(
-    node['ssh_known_hosts']['cacher']['data_bag'],
-    node['ssh_known_hosts']['cacher']['data_bag_item']
-  )
-
BREAKS HERE
-        list = dependencies.each { |dependency| lockfile.unlock(dependency) }
BREAKS HERE
-scm "Download Custom Cookbooks" do
-  user node[:opsworks_custom_cookbooks][:user]
-  group node[:opsworks_custom_cookbooks][:group]
-
-  case node[:opsworks_custom_cookbooks][:scm][:type]
-  when 'git'
-    provider Chef::Provider::Git
-  when 'svn'
-    provider Chef::Provider::Subversion
-  else
-    raise "unsupported SCM type #{node[:opsworks_custom_cookbooks][:scm][:type].inspect}"
-  end
-
-  action :checkout
-  destination node[:opsworks_custom_cookbooks][:destination]
-  repository node[:opsworks_custom_cookbooks][:scm][:repository]
-  revision node[:opsworks_custom_cookbooks][:scm][:revision]
-  user node[:opsworks_custom_cookbooks][:user]
-  additional_remotes ||= []
-  not_if do
-    node[:opsworks_custom_cookbooks][:scm][:repository].blank? || ::File.directory?(node[:opsworks_custom_cookbooks][:destination])
BREAKS HERE
-        review, @status = FoodCritic::Linter.check(CommandLine.new(cmd_args))
BREAKS HERE
-    not_if '[[ `oc env dc/docker-registry --list -n ${namespace_registry} --no-headers --config=admin.kubeconfig` =~ "REGISTRY_HTTP_TLS_CERTIFICATE=/etc/secrets/registry.crt" && `oc env dc/docker-registry --list -n ${namespace_registry} --no-headers --config=admin.kubeconfig` =~ "REGISTRY_HTTP_TLS_KEY=/etc/secrets/registry.key" ]]'
BREAKS HERE
-    os_partition_grub2 = "(hd0,#{m[0].to_i})"
-if Pathname.new('/boot').mountpoint?
-  boot_device = node.device_of_mount('/boot')
-  boot_label = node['filesystem2']['by_mountpoint']['/boot']['label']
-  path_prefix = ''
-else
-  boot_device = node.device_of_mount('/')
-  boot_label = node['filesystem2']['by_mountpoint']['/']['label']
-  path_prefix = '/boot'
-end
-if node['fb_grub']['use_labels']
-  if node['fb_grub']['version'] < 2
-    fail 'fb_grub: Booting by label requires grub2.'
-  end
-  # TODO: make this work with both uuid and label, like the rootfs_arg section
-  node.default['fb_grub']['_root_label'] = boot_label
-else
-  # udev block device partitions start at 1
-  # grub disks start at 0
-  m = boot_device.match(/[0-9]+$/)
-  fail 'fb_grub::default Cannot parse boot device!' unless m
-
-  grub_partition = m[0].to_i - 1
-  root_device = "(hd0,#{grub_partition})"
-  node.default['fb_grub']['root_device'] = root_device
-
-  root_device_grub2 = "(hd0,#{grub_partition + 1})"
-  node.default['fb_grub']['root_device_grub2'] = root_device_grub2
-end
-# some provisioning configurations do not properly label the root filesystem
-# Ensure grub is put down with the label matching the fs mounted at / that
-# has a valid uuid or label. This will skip over things like rootfs mounts.
-node.default['fb_grub']['rootfs_arg'] = 'LABEL=/'
-label = node['filesystem2']['by_mountpoint']['/']['label']
-uuid = node['filesystem2']['by_mountpoint']['/']['uuid']
-if label && !label.empty?
-  node.default['fb_grub']['rootfs_arg'] = "LABEL=#{label}"
-elsif uuid && !uuid.empty?
-  node.default['fb_grub']['rootfs_arg'] = "UUID=#{uuid}"
-  variables(:path_prefix => path_prefix)
-  variables(:path_prefix => path_prefix)
-  variables(
-    :path_prefix => path_prefix,
-  )
BREAKS HERE
-    'kibana_service' => node['kibana']['kibana_service']
BREAKS HERE
-    expect(chef_run).to create_template('/var/osquery/osquery.conf')
-    expect(chef_run).to create_cookbook_file("/etc/newsyslog.d/#{domain}.conf")
BREAKS HERE
-      %w( address token auth
-          ssl verify_ssl ca_file cert_file key_file
-          server_service_name client_service_name
-          auto_advertise server_auto_join client_auto_join ))
BREAKS HERE
-  plan_dir '/path/to/plans'
-  action :test
BREAKS HERE
-      return "https://nodeload.github.com/git/git/tar.gz/v#{new_resource.source_version}"
-      return '0f30984828d573da01d9f8e78210d5f4c56da1697fd6d278bad4cfa4c22ba271' # 1.9.5 tarball
-
BREAKS HERE
-                      
-  node[:opsworks_custom_cookbooks][:scm] = {
-  node[:opsworks_custom_cookbooks][:scm] = {
-  
-  
-  
BREAKS HERE
-version          "7.0.2"
BREAKS HERE
-default["airflow"]["bin_path"] = node[:platform] == "ubuntu" ? "/usr/local/bin" : "/usr/bin"
-default["airflow"]["init_system"] = node[:platform] == "ubuntu" ? "upstart" : "systemd"
-default["airflow"]["config"]["core"]["airflow_home"] = node[:platform] == "ubuntu" ? "/usr/local/lib/airflow" : "/usr/lib/airflow"
BREAKS HERE
-default['rvm']['default_ruby']      = "ruby-1.9.3-p327"
-default['rvm']['user_default_ruby'] = "ruby-1.9.3-p327"
BREAKS HERE
-include_recipe 'fb_nsswitch'
-include_recipe 'fb_ethers'
BREAKS HERE
-action_class.class_eval do
-load_current_value do
-  content file_content(ohai_hint_path) if ::File.exist?(ohai_hint_path)
-end
-
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.63.0/}) }
BREAKS HERE
-mydata = data_bag_item(defaultbag, myitem)
-
BREAKS HERE
-  if node['hadoop']['distribution_version'].to_f >= 5.3 && node.key?('java') && node['java'].key?('jdk_version') && node['java']['jdk_version'] < 7
BREAKS HERE
-  command "find #{node[:rsyslog][:log_dir]}/$(date +\%Y) -type f -mtime +1 -exec gzip -q {} \\;"
BREAKS HERE
-      #  r.notifies :restart, "runit_service[#{new_resource.service_name}]" unless Chef::Platform.windows?
-      # declare_resource(:runit_service, new_resource.service_name).tap do |r|
-      #   # We need to use .tap() to access methods in the provider's scope.
-      #   r.cookbook('jenkins')
-      #   r.run_template_name('jenkins-slave')
-      #   r.log_template_name('jenkins-slave')
-      #   r.options(
-      #     new_resource: new_resource,
-      #     java_bin:    java,
-      #     slave_jar:   slave_jar,
-      #     jnlp_url:    jnlp_url,
-      #     jnlp_secret: jnlp_secret
-      #   )
-      # end
BREAKS HERE
-    def self.dispatch(meth, given_args, given_opts, config)
-      super
-      Berkshelf.formatter.cleanup_hook unless config[:current_task].name == "help"
-    end
-
BREAKS HERE
-            # Delivery Prototype for Local Phases Execution
-            # The purpose of this file is to prototype a new way to execute
-            # phases locally on your workstation. The delivery-cli will read
-            # this file and execute the command(s) that are configured for
-            # each phase. You can customize them by just modifying the phase
-            # key on this file.
-            # As this is still a prototype we are not modifying the current
-            # config.json file and it will continue working as usual.
-            # Specify a remote URI location for the `project.toml` file.
-            # This is useful for teams that wish to centrally manage the behavior
-            # of the `delivery local` command across many different projects.
BREAKS HERE
-  let(:expected_gem_home) { ENV['GEM_HOME'] }
BREAKS HERE
-version          '1.0.0'
BREAKS HERE
-attribute :path, :kind_of => String, :callbacks => {"Should be a valid path" => lambda {|path| Chef::Util::PathHelper.validate_path(path_to_validate) } }
-attribute :physical_path, :kind_of => String, :callbacks => {"Should be a valid path" => lambda {|path| Chef::Util::PathHelper.validate_path(path_to_validate) } }
BREAKS HERE
-#
-# create bamboo service
-service "bamboo" do
-  provider Chef::Provider::Service::Upstart
-  supports :status => true, :restart => true, :start => true, :stop => true
-end
-# COMMENTED OUT BECAUSE WRAPPER IS BROKEN
-# make symlink from wrapper/start-bamboo to /etc/init.d/bamboo
-# add start service at system start
-#link "/etc/init.d/bamboo" do
-#  to "/opt/bamboo/wrapper/start-bamboo"
-#end
-
-
-  owner  ode[:bamboo][:user]
BREAKS HERE
-  file "/etc/rsyslog.d/server.conf" do
-    action :delete
-    notifies :reload, "service[rsyslog]"
-    only_if do ::File.exists?("/etc/rsyslog.d/server.conf") end
-  end
BREAKS HERE
-      @delivery_chef_server ||= DeliverySugar::ChefServer.new
BREAKS HERE
-              ((timeout++))
BREAKS HERE
-    UNIT_TYPES ||= %i(
-      service socket device mount automount
-      swap target path timer slice
-    )
-    DAEMONS ||= %i(
-      hostnamed journal_gatewayd journald logind
-      machined networkd resolved timedated timesyncd
BREAKS HERE
-        my_env['PERL5LIB'] = params[:perl5lib].join ':'
BREAKS HERE
-  # aws-ruby-flow
BREAKS HERE
-default['openssh']['server']['subsystem'] = 'sftp /usr/lib/openssh/sftp-server' if platform_family?('rhel') || platform_family?('fedora')
BREAKS HERE
-  version '1.5.2'
-  version '0.3.6'
BREAKS HERE
-          '*' => ['80'],
-          '127.0.0.1' => ['5000', '5001', '35357']
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
-depends 'openstack-image', '>= 14.0.0'
-depends 'openstack-compute', '>= 14.0.0'
-depends 'openstack-block-storage', '>= 14.0.0'
BREAKS HERE
-            OpenStruct.new(:exitstatus => 0, :stdout => ""))
-            OpenStruct.new(:exitstatus => 0, :stdout => ""))
-      expect(instance).to receive(:handler_settings_file).exactly(7).times
-      expect(instance).to receive(:value_from_json_file).exactly(7).times
-      expect(instance).to receive(:handler_settings_file)
-      expect(@object).to receive(:decrypt)
-      expect(instance.send(:get_validation_key, 'encrypted_text', 'format')).to eq("samplevalidationkeytext")
-      expect(instance).to receive(:handler_settings_file)
-      expect(@object).to receive(:decrypt)
-      expect(instance.send(:get_validation_key, 'encrypted_text', 'format')).to eq("samplevalidationkeytext")
-      expect(instance).to receive(:handler_settings_file)
-      expect(instance.send(:get_validation_key, 'encrypted_text', 'format')).to eq("samplevalidationkeytext")
-      expect(instance).to receive(:handler_settings_file)
-      expect(instance.send(:get_validation_key, 'encrypted_text', 'format')).to eq("samplevalidationkeytext")
BREAKS HERE
-  raise 'This cookbook is currently only supported on Windows, Debian-family linux, and Redhat-family linux.'
BREAKS HERE
-frontend_ip = search( # ~FC003
-  'node',
-  'chef_chef-server_role:frontend',
-  filter_result: { 'ipaddress' => ['ipaddress'] }
-).first['ipaddress']
-  line "#{frontend_ip} #{topology['api_fqdn']}"
BREAKS HERE
-property :key_id,              		   String
-# Get does not work.  The goal is to be able to call it and return it to a variable.
-action :get do
-	  with_decryption: with_decryption,
-    response = ssm_client.get_parameter(request)
-    Chef::Log.debug "Get parameter #{name}"
-end
-
-action :create do
-	if (write_parameter)
-		request = {
-			name: name,
-			description: description,
-			value: value,
-			type: type,
-			key_id: key_id,
-			overwrite: overwrite,
-			allowed_pattern: allowed_pattern,
-			}
-		response = ssm_client.put_parameter(request)
-		Chef::Log.debug "Put parameter #{name}"
-	end
-    request = {
-      name: name,
-	}
-    response = ssm_client.delete_parameter(request)
-    Chef::Log.info "parameter deleted: #{name}"
-  
-  # If the paremeter doesn't exist or one of the values has changed and overwrite
-  # is set to true then we'll write the parameter.
-    begin
-		request = {
-			name: name,
-			with_decryption: (type == 'SecureString'),
-		}
-		response = ssm_client.get_parameter(request)	 
-		if ((response.parameter.name == name) && (response.parameter.value == value))
-			return false
-		else if (new_resource.overwrite)
-			return true
-		else
-			return false
-		end
-	end
-	rescue Aws::SSM::Errors::ParameterNotFound => msg
-	# Paremeter doesn't exist
-	   Chef::Log.info "get_parameter exception: #{msg}"
-	   return true
-	end
-	
BREAKS HERE
-state_attrs :java_home_dir, :middleware_home_dir, :version, :os_user, :os_group, :orainst_dir, :tmp_dir, :rsp_file
BREAKS HERE
-      type_label = type.to_s.gsub('_package', '').capitalize       
-      unless info[version] 
-        Chef::Log.error("Availabe versions for your platform are: #{info.map{|k,v| k}.join(' - ')}")
-        raise "Unsupported Mysql #{type_label} Version"
-end
BREAKS HERE
-  @action = :enable
BREAKS HERE
-    osapi_compute_link_prefix: compute_api_endpoint.to_s,
BREAKS HERE
-attribute :debug, kind_of: [TrueClass, FalseClass], default: false
BREAKS HERE
-          Gem::Requirement.new('>= 4.2.6').satisfied_by?(Gem::Version.new(Regexp.last_match[1]))
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
BREAKS HERE
-      begin
-        fc_file = "#{cookbook_dir(file)}/.foodcritic"
-        if File.exist? fc_file
-          tag_text.split(/\s/)
-      rescue Errno::EACCES
BREAKS HERE
-default[:ssh][:client_alive_interval] = 12000   # sshd, 20min
-default[:ssh][:client_alive_count]    = 2       # sshd, ~> 2 x interval
BREAKS HERE
-      expect(undeploy).to notify('service[nginx]').to(:reload).delayed
BREAKS HERE
-db_user = node['db']['username']
BREAKS HERE
-elsif Chef::Config[:solo]
-  # Gather a list of all nodes, warning if using Chef Solo
-
-  Chef::Log.warn 'ssh_known_hosts requires Chef search - Chef Solo does not support search!'
-
-  # On Chef Solo, we still want the current node to be in the ssh_known_hosts
-  hosts = [node]
BREAKS HERE
-  default[:ruby][:patch_version] = '0'
-  default[:ruby][:patch_version] = '5'
-  default[:ruby][:patch] = 'p598' # this attribute will disappear in favor of the sematic versioning schema
BREAKS HERE
-class ::Chef::Recipe # rubocop:disable Documentation
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-service_user = node['openstack']['compute']['service_user']
-service_tenant_name = node['openstack']['compute']['service_tenant_name']
-ec2_admin_endpoint = admin_endpoint 'compute-ec2-admin'
-region = node['openstack']['compute']['region']
-
-
-
-
-
-if node['openstack']['compute']['enabled_apis'].include?('ec2')
-
-
BREAKS HERE
-      next unless state['Running']
-      next unless state['Running']
BREAKS HERE
-      expect(git_profiler.clean?).to be_true
-      expect(git_profiler.unpublished_commits?).to be_true
-        expect(git_profiler.clean?).to be_true
-        expect(git_profiler.unpublished_commits?).to be_false
-        expect(git_profiler.clean?).to be_true
-        expect(git_profiler.unpublished_commits?).to be_true
-      expect(git_profiler.clean?).to be_false
BREAKS HERE
-        rescue Aws::EC2::Errors::InvalidSnapshotInUse # rubocop: disable Lint/HandleExceptions
-          # Snapshot is being used by an AMI and therefore cannot be deleted.
BREAKS HERE
-      load_cookbook(result[0]) unless result.nil?
BREAKS HERE
-nginx_site "tile-ssl" do
-  template "nginx_tile_ssl.conf.erb"
-  variables :certificate => certificate, :resolvers => resolvers, :caches => tilecaches
-end
-
BREAKS HERE
-version '0.3.0'
-depends 'chef-ingredient', '>= 0.13.0'
BREAKS HERE
-    extend self
-
BREAKS HERE
-  tags = user_list.match(/^#{name}\s+\[(.+*)\]/)[1].split
BREAKS HERE
-        return nil if object_path[2] != 'containers' && !data_exists?(object_path)
BREAKS HERE
-  default[:bamboo][:database][:port]              = 3306
-  default[:bamboo][:database][:root_user_name]    = 'root'
-  default[:bamboo][:database][:port]              = 5432
-  default[:bamboo][:database][:root_user_name]    = 'postgres'
-  default[:bamboo][:database_type]                = 'PostgreSQL'
BREAKS HERE
-         compute-xvpvnc compute-novnc compute-vnc compute-metadata-api network-api network-linuxbridge
-         network-openvswitch image-api block-storage-api object-storage-api telemetry-api orchestration-api
-         orchestration-api-cfn orchestration-api-cloudwatch database-api bare-metal-api).each do |endpoint|
-         network-api-bind image-api-bind image-registry-bind block-storage-api-bind object-storage-api-bind
-         telemetry-api-bind orchestration-api-bind orchestration-api-cfn-bind orchestration-api-cloudwatch-bind
-         database-api-bind bare-metal-api-bind dashboard-http-bind dashboard-https-bind).each do |endpoint|
-         compute-xvpvnc-bind compute-novnc-bind compute-vnc-bind compute-metadata-api-bind network-api-bind
-         image-api-bind image-registry-bind block-storage-api-bind object-storage-api-bind telemetry-api-bind
-         orchestration-api-bind orchestration-api-cfn-bind orchestration-api-cloudwatch-bind database-api-bind
-         bare-metal-api-bind dashboard-http-bind dashboard-https-bind).each do |endpoint|
BREAKS HERE
-        database_connection['username'] = 'root'
-        database_connection['password'] = node['mysql']['server_root_password']
-        database_connection['username'] = 'postgres'
-        database_connection['password'] = node['postgresql']['password']['postgres']
BREAKS HERE
-    not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-cc-1"
-    not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-sc-1"
-      not_if "#{disable_proxy} euca-describe-services | grep #{cluster}-vb"
-    not_if "egrep '3.[0-9].[0-9]' #{node['eucalyptus']['home-directory']}/etc/eucalyptus/eucalyptus-version || #{disable_proxy} euca-describe-services | egrep 'API_#{uf_ip}'"
-    not_if "#{disable_proxy} euca-describe-services | grep walrus-1"
BREAKS HERE
-    
BREAKS HERE
-service "postfix" do
-  action :enable
BREAKS HERE
-    end -%>
-}'
BREAKS HERE
-    def_delegators :@run_context, :resource_collection, :immediate_notifications, :delayed_notifications
-        Chef::Runner.new(self).converge
BREAKS HERE
-    'maxretry' => '6'
-  }
-    'enabled' => false
BREAKS HERE
-          FileUtils.rmdir(destination)
-          FileUtils.ln_r(cached_cookbook.path, destination)
BREAKS HERE
-# Setup package version to install
-case node['platform_family']
-  when 'rhel', 'fedora'
-    package_version = "#{node['mongodb3']['version']}-1.el#{node.platform_version.to_i}" # ~FC019
-  when 'debian'
-    package_version = node['mongodb3']['version']
-end
-
-    version package_version
BREAKS HERE
-# TODO: change this
-private_key = '-----BEGIN RSA PRIVATE KEY-----
-MIIEpgIBAAKCAQEA6fIwUKxZXgKqEE6HCM94eEEeQ+n9mGpKn+CiKExI97mQtio4
-uzB/4A7qVXfBYaa2jbPZzD6bDvGco88vgeDuRB5tNh/sRBD3T7L9CxNIGp9gMMsu
-tRprwI5MEUsDDFXMKo5ZinpRe9fud5UBOmEHK0vjRVSgLVCGYdv/iXaBKY3feH8a
-4gUuTzkdbUtoUMAUTfNyevhUfLRKSWjr5+f7krYYTqJpM7KUAL9e2dYMjkj3He7g
-iM4uiPtAQnMYcsyevNgpM0uKnp6+pPzTMSkSNp3uIK6aQ4lR80lEfq8fRwqzsIuJ
-dRT/+iJpd6XF8+GSyOt/tEh1RPiEKiGHLpmZGQIDAQABAoIBAQDFsipuIhcrQKki
-OpoWMe0mAjFnRtdM85W4YYXm9AA9h4zow+lJFoUZfME+FINQ2CcwvClzVfyGtlqe
-ezk0UjZHTkcQFA3+vy+fJCx+LX8jMEeDNFB2Lqub/yP9ARzEUcTEuaKlSRSOyTz1
-xO9SvCfoyKp4Ljll0cSd8eGR8pjX2TSfJ85aFAcP1CHGa/qGdxhSrbL2PMXaNFIT
-27ZEUo4FVqcwRFN6JuO4sAlnyg8axXlXNLpwPzW1Zi7auS9nAO9bDEIhP4YfFwWs
-/iV7KBs/bryez94XS68b3MUXoZWS+1nP8ivBSOCH0mWy5/PhR4esih2EhXk/hi3P
-dp6aX4p5AoGBAPrmS+4lrvnvk2EOj3vqSergd31XBTM6NRKSsIYCtlaXsVjMym/i
-UdqcLqha4IEW3mucmpD3MBsTqshHGTI+67+tU/G23kThV/3U3a+jSR10FjgACPRd
-8VhxrhTBvKjcw0uKeMl9uE0eb/2q8uVtX/8InOCvEfNGFCcszLsYFBr3AoGBAO6z
-qhWt8y/HkqWgBcbDJKx+T050nM9fkkBk1ILZn/GMEU828aEvKSwa8wzcx1gPo8Uu
-TP2SS0K0vnQv75UfyafgxFMVlELQrRTLHJqFQrCGikgBLNwHjRdvHfNujoBXbv+9
-g4LVFqHv0/kVRc1kXhdEwBCZm29rCDVusKK0C1hvAoGBAOAY4qkLL4Y93j1KbA4Z
-7XvEkfV5zEM9Mjosm06XDZW6V8Ug5Y+ZbdL8vQ/SW8PxUSh87/GbV3RX1KqeFnsy
-iA7kGZ5D37NWMumdP4SpK50LGu1Z2qWpYu/EWeBgSsnopObL/6a4i+0VyqGgFuOl
-FaENaFGnDTlk1otHEHXrw8lxAoGBAITL11fwSlbOhLs3537ImeKM8roHDiYgWVER
-x1h0khLjhc24F31Aq3sqEwWY3h4TtVzBgXugo9Ycj8g70uH3qUyIMzC11KHHTkM/
-LE6azJtAfjXI0Zgna0saOmNvoj+sZMhKOpvSyKCWuCrettKpf98aFHAnxN2bghmX
-1xTtbVJpAoGBAKnqvADsNFaI1Ak7tdfJJ+chxnxXd1k6Mly44Jsp6oako4Nl2Uiw
-3xL4JGed+QBmjFh+n4hR9T7J65fUFvBixBEAhDSXcRHWL84xTQWLtdHK4+zDWGJt
-n2DMrFzhp1H6neUFMBeNOw+fQuhPj6OcLrs4dRdyQhVRp0ZOJyLMS39e
------END RSA PRIVATE KEY-----'
-
-public_key = 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDp8jBQrFleAqoQTocIz3h4QR5D6f2Yakqf4KIoTEj3uZC2Kji7MH/gDupVd8FhpraNs9nMPpsO8Zyjzy+B4O5EHm02H+xEEPdPsv0LE0gan2Awyy61GmvAjkwRSwMMVcwqjlmKelF71+53lQE6YQcrS+NFVKAtUIZh2/+JdoEpjd94fxriBS5POR1tS2hQwBRN83J6+FR8tEpJaOvn5/uSthhOomkzspQAv17Z1gyOSPcd7uCIzi6I+0BCcxhyzJ682CkzS4qenr6k/NMxKRI2ne4grppDiVHzSUR+rx9HCrOwi4l1FP/6Iml3pcXz4ZLI63+0SHVE+IQqIYcumZkZ mac@Denny-mac.local'
-  # https://github.com/glenjamin/jenkins-groovy-examples/blob/master/README.md
-  jenkins_script 'all authenticated users admin access' do
-    command <<-EOH.gsub(/^ {4}/, '')
-    import jenkins.model.*
-    def instance = Jenkins.getInstance()
-
-    import hudson.security.*
-    def realm = new HudsonPrivateSecurityRealm(false)
-    instance.setSecurityRealm(realm)
-    def strategy = new hudson.security.GlobalMatrixAuthorizationStrategy()
-    strategy.add(Jenkins.ADMINISTER, 'authenticated')
-    instance.setAuthorizationStrategy(strategy)
-    instance.save()
-    EOH
-    # TODO
-    # not_if "test -d /var/lib/jenkins/users/#{username}"
-  end
-  # TODO
-  # Logged-in users can do anything. But don't allow anonymous read access
BREAKS HERE
-    'ironic_common_packages' => ['python-ironicclient']
BREAKS HERE
-				if node["platform"] == "windows"
-					node.recipe?("chef-server")
-				else
-					node.recipe?("chef-server") || system("which chef-server &> /dev/null ") || system("which chef-server-ctl &> /dev/null")
-				end
BREAKS HERE
-    set_chef_id "name"
BREAKS HERE
-chef_gem 'rubyzip'
BREAKS HERE
-        Chef::Log.warn "Format is #{format}"
BREAKS HERE
-# Recipe:: client
BREAKS HERE
-
-      cookbook_version.update(
-        foodcritic_failure: params[:foodcritic_failure],
-        foodcritic_feedback: params[:foodcritic_feedback]
-      cookbook_version.update(
-        collaborator_failure: params[:collaborator_failure],
-        collaborator_feedback: params[:collaborator_feedback]
BREAKS HERE
-
-    property :dangling, [TrueClass, FalseClass], default: false
-    property :label, Array, default: []
-      # {filters: {dangling: ['false']}.to_json}
-      #
-      opts = {filters: {
-        dangling: new_resource.dangling
-      }}
-      opts.filters.merge(until: new_resource.prune_until) if new_resource.property_is_set?(:prune_until)
-      opts.filters.merge(label: new_resource.label) if new_resource.property_is_set?(:label)
-
-      res = conn.post("/images/prune", opts.to_json)
BREAKS HERE
-file = File.new("#{thp_defrag}")
-text = file.read
-update_thp_defrag = false if ::File.exist?(thp_defrag) && text =~ /\[never\]/
BREAKS HERE
-    # @return [Berkshelf::Berksfile]
-    # @return [Array<Berkshelf::Dependency>]
-    # @param [Berkshelf::Berksfile] berksfile
-    # @param [Array<Berkshelf::Dependency>, Berkshelf::Dependency] demands
-    # @param [Berkshelf::Dependency] demand
-    # @return [Array<Berkshelf::Dependency>]
-    # @param [Berkshelf::CachedCookbook] cookbook
-    # @raise [Berkshelf::NoSolutionError] when a solution could not be found for the given demands
-      raise Berkshelf::NoSolutionError.new(demands)
-    # @param [Berkshelf::Dependency, #to_s] demand
-    # @return [Berkshelf::Dependency]
-    # @param [Berkshelf::Dependency, #to_s] demand
BREAKS HERE
-      expect(chef_run).to upgrade_package('scsi-target-utils')
-      let(:file) { chef_run.template('/etc/tgt/targets.conf') }
-        expect(chef_run).to enable_service('tgtd')
-      end
-
-      it 'has redhat include' do
-        node.set['openstack']['block-storage']['volume']['volumes_dir'] = 'volumes_dir_value'
-        expect(chef_run).to render_file(file.name).with_content(
-          'include volumes_dir_value/*')
-        expect(chef_run).not_to render_file(file.name).with_content(
-          'include /etc/tgt/conf.d/*.conf')
-
-  end
-
-  describe 'redhat' do
-    let(:runner) { ChefSpec::Runner.new(REDHAT7_OPTS) }
-    let(:node) { runner.node }
-    let(:chef_run) { runner.converge(described_recipe) }
-
-    include_context 'block-storage-stubs'
-
-    it 'disable tgtd for rhel7' do
-      # test temp solution for RHEL7 to disable tgtd
-      # stage fix for bug #1400958
-      expect(chef_run).not_to upgrade_package('scsi-target-utils')
-      expect(chef_run).not_to enable_service('iscsitarget')
-      expect(chef_run).not_to create_template('/etc/tgt/targets.conf')
-    end
BREAKS HERE
-Chef::Log.warn("Running chef-client under the Runit init system is deprecated. Please consider running under your native init system instead.")
BREAKS HERE
-default['cassandra']['snitch_conf'] = false
BREAKS HERE
-if context.have_git && !context.skip_git_init
-  execute("initialize-git") do
-    command("git init .")
-    cwd cookbook_dir
BREAKS HERE
-msg = "#{checksums_file} file cannot be trusted: gpg signature rejected"
-log msg do
BREAKS HERE
-# frozen_string_literal: true
-
BREAKS HERE
-  context 'invalid content type headers are sent' do
-    it 'returns a descriptive error' do
-      share_cookbook('redis-test', user, content_type: 'application/snarfle')
-      expect(json_body['error_messages'].first).to eql('Tarball content type can not be application/snarfle.')
-    end
-  end
-
BREAKS HERE
-METADATA
BREAKS HERE
-      cookbook = Berkshelf.ui.mute {
-        berksfile.resolve(berksfile.find(name))[:solution].first
-      }
-
-      raise CookbookNotFound, "Cookbook '#{name}' is not installed by your Berksfile" unless cookbook
BREAKS HERE
-          Chef::Config['http_proxy'] = ''
-          Chef::Config['https_proxy'] = ''
BREAKS HERE
-          lazy { @default_cert_path ||= ::File.join(cert_dir, cert_name) }
-          lazy do
-            @default_cert_content ||= begin
-              source = filter_source(
-                'SSL certificate', cert_source, Cert::SOURCES
-              )
-              send("default_cert_content_from_#{source}")
-            end
BREAKS HERE
-  version @version
-windows_path node['terraform']['win_install_dir'] do
BREAKS HERE
-    route53_client.list_hosted_zones_by_name(dns_name: name).hosted_zones.collect {|x| x.id if x.name == name}.first
-      caller_reference: Time.now.to_s
BREAKS HERE
-    
BREAKS HERE
-default['cookbook-openshift3']['openshift_master_identity_provider']['GitHubIdentityProvider'] = { 'name' => 'github_auth', 'login' => true, 'challenge' => false, 'kind' => 'GitHubIdentityProvider', 'clientID' => 'github_client_id', 'clientSecret' => 'github_client_secret', 'organizations' => ['myorganization1', 'myorganization2'] }
-default['cookbook-openshift3']['openshift_master_identity_provider']['OpenIDIdentityProvider'] = { 'name' => 'openid_auth', 'login' => true, 'challenge' => true, 'kind' => 'OpenIDIdentityProvider', 'clientID' => 'openid_client_id', 'clientSecret' => 'openid_client_secret', 'claims' => { 'id' => 'sub', 'preferredUsername' => 'preferred_username', 'name' => 'name', 'email' => 'email' }, 'urls' => { 'authorize' => 'https://myidp.example.com/oauth2/authorize', 'token' => 'https://myidp.example.com/oauth2/token', 'userInfo' => 'https://myidp.example.com/oauth2/userinfo' }, 'extraScopes' => ['email', 'profile'], 'extraAuthorizeParameters' => { 'include_granted_scopes' => '"true"' } }
BREAKS HERE
-  project_name service_project
-  password service_pass
-  connection_params connection_params
-end
-
-# Grant Service role to Service User for Service Tenant ##
-openstack_user service_user do
-  action :grant_role
BREAKS HERE
-default['nexus_repository_manager']['version'] = '3.8.0-02'
-default['nexus_repository_manager']['nexus_download_sha256'] = '949e2e5e99a685ebce6a63ba1ca0d56bc794068922a5279bca59d15bd3ae677c'
BREAKS HERE
-              mode '0644'
-	        end
BREAKS HERE
-package 'scala' do
-  action :install
-end
-
-package 'hadoop_client' do
-  action :install
-end
-
-package 'spark-core' do
-  action :install
BREAKS HERE
-version           '9.0.0'
-depends 'rabbitmq', '~> 3.0.4'
BREAKS HERE
-cookbook_file "/etc/pam.d/su for RHEL" do
-cookbook_file "/etc/pam.d/su for Debian" do
BREAKS HERE
-  install_dir = ::File.join(new_resource.path, "nexus-#{version}")
-  [install_dir, data, ::File.join(new_resource.data, 'etc')].each do |dir|
-      vmoptions_variables.merge(data: new_resource.data)
BREAKS HERE
-        .with_content('unicorn_rails --env #{DEPLOY_ENV} --daemonize -c #{ROOT_PATH}/shared/config/unicorn.conf')
-        .with_content('puma -C #{ROOT_PATH}/shared/config/puma.rb')
-        .with_content('thin -C #{ROOT_PATH}/shared/config/thin.yml')
BREAKS HERE
-          @check_script ||=
-            begin
-              t = Chef::Resource::Template.new(::File.join(sv_dir_name, 'check'), run_context)
-              t.owner(new_resource.owner)
-              t.group(new_resource.group)
-              t.source("sv-#{new_resource.check_script_template_name}-check.erb")
-              t.cookbook(template_cookbook)
-              t.mode(00755)
-              t.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-              t
-            end
BREAKS HERE
-version          '9.0.0'
-depends          'apt', '~> 2.3.8'
-depends          'database', '~> 2.0.0'
-depends          'yum', '~> 3.1.4'
-depends          'yum-epel', '~> 0.3.4'
BREAKS HERE
-  compile_time true if Chef::Resource::ChefGem.method_defined?(:compile_time)
BREAKS HERE
-recipe 'cookbook-openshift3::adhoc_uninstall', 'Adhoc action for uninstalling Openshit from server'
BREAKS HERE
-version '2.1.14'
BREAKS HERE
-default['chef-server']['package-source'] = nil
BREAKS HERE
-      def action_create
-        main_resource = @new_resource
-        updated_by_last_action = main_resource.updated_by_last_action?
-
-        # install needed dependencies
-        if @new_resource.depends_chef_vault?
-          r = chef_gem 'chef-vault'
-          updated_by_last_action ||= r.updated_by_last_action?
-        end
-        unless @current_resource.exist? &&
-               @current_resource == @new_resource &&
-               main_resource.updated_by_last_action? == false
-          # Create ssl certificate key
-          r = Chef::Resource::File.new(
-            "#{main_resource.name} SSL certificate key",
-            @new_resource.run_context
-          )
-          r.path(main_resource.key_path)
-          r.owner('root')
-          r.group('root')
-          r.mode(00600)
-          r.content(main_resource.key_content)
-          r.action(:nothing)
-          run_context.resource_collection << r
-          r.run_action(:create)
-          updated_by_last_action ||= r.updated_by_last_action?
-          # Create ssl certificate
-          r = Chef::Resource::File.new(
-            "#{main_resource.name} SSL public certificate",
-            @new_resource.run_context
-          )
-          r.path(main_resource.cert_path)
-          r.owner('root')
-          r.group('root')
-          r.mode(00644)
-          r.content(main_resource.cert_content)
-          r.action(:nothing)
-          run_context.resource_collection << r
-          r.run_action(:create)
-          updated_by_last_action ||= r.updated_by_last_action?
-          # Conditionally write intermediary chain certificate
-          if !main_resource.chain_name.nil? && !main_resource.chain_content.nil?
-            r = Chef::Resource::File.new(
-              "#{main_resource.name} SSL intermediary chain certificate",
-              @new_resource.run_context
-            )
-            r.path(main_resource.chain_path)
-            r.owner('root')
-            r.group('root')
-            r.mode(00644)
-            r.content(main_resource.chain_content)
-            r.action(:nothing)
-            run_context.resource_collection << r
-            r.run_action(:create)
-            updated_by_last_action ||= r.updated_by_last_action?
-          end
-        main_resource.updated_by_last_action(updated_by_last_action)
BREAKS HERE
-            mode: 00644)
BREAKS HERE
-depends 'openstack-common', '>= 11.0.0'
BREAKS HERE
-default['perl']['cpanm']['url'] = 'https://raw.githubusercontent.com/miyagawa/cpanminus/1.6922/cpanm'
-default['perl']['cpanm']['checksum'] = 'cb35d3f1ac8f59c1458e1f67308c9caa4959f3912dfeac603b8aff29c6fe643d'
BREAKS HERE
-    it "converts the string to a SourceURI" do
-        expect(source).to be_a(Berkshelf::SourceURI)
-    it "adds the source in a position before the default sources" do
-      subject.source(new_source)
-      expect(subject.sources[0].to_s).to eql(new_source)
-    end
-
-      expect(subject.sources[0].to_s).to eql(new_source)
-      expect(subject.sources[1].to_s).to eql("http://berks.other.com")
-      expect(subject.sources[0].to_s).to eql(new_source)
-      expect(subject.sources[1].to_s).to_not eql(new_source)
-    context "when a default source is explicitly specified" do
-      let(:default_source) { described_class.default_sources.first }
-
-      it "does not appear twice" do
-        subject.source(default_source)
-        expect(subject.sources).to have(described_class.default_sources.length).items
-      end
-
-      it "does not appear out of the specified order" do
-        subject.source(default_source)
-        subject.source("http://berks.other.com")
-        expect(subject.sources[0]).to eql(default_source)
-        expect(subject.sources[1].to_s).to eql("http://berks.other.com")
-    it "contains a collection of SourceURIs" do
-        expect(source).to be_a(Berkshelf::SourceURI)
-    let(:location) { { site: 'http://site' } }
-      subject.add_dependency(name, constraint, location)
-    it 'adds new cookbook dependency to the list of dependencies' do
-    it "adds a cookbook dependency with a 'name' of the given name" do
-      expect(subject.dependencies.first.name).to eq(name)
-    it "adds a cookbook dependency with a 'version_constraint' of the given constraint" do
-      expect(subject.dependencies.first.version_constraint.to_s).to eq(constraint)
-  describe '#apply' do
-      subject.add_dependency('nginx', '>= 0.1.2', chef_api: server_url, node_name: client_name, client_key: client_key)
BREAKS HERE
-attribute :resource_id,  kind_of: [String, Array], regex: /(i|snap|vol)-[a-zA-Z0-9]+/
BREAKS HERE
-# these are commented to match the default config file, uncomment the ones you need
-# or delete them outright to trim up space.
-default[:openssh][:client][:host] = "*"
-# default[:openssh][:client][:forward_agent] = "no"
-# default[:openssh][:client][:forward_x11] = "no"
-# default[:openssh][:client][:rhosts_rsa_authentication] = "no"
-# default[:openssh][:client][:rsa_authentication] = "yes"
-# default[:openssh][:client][:password_authentication] = "yes"
-# default[:openssh][:client][:host_based_authentication] = "no"
-# default[:openssh][:client][:gssapi_authentication] = "no"
-# default[:openssh][:client][:gssapi_delegate_credentials] = "no"
-# default[:openssh][:client][:batch_mode] = "no"
-# default[:openssh][:client][:check_host_ip] = "yes"
-# default[:openssh][:client][:address_family] = "any"
-# default[:openssh][:client][:connect_timeout] = "0"
-# default[:openssh][:client][:strict_host_key_checking] = "ask"
-# default[:openssh][:client][:identity_file] = "~/.ssh/identity"
-# default[:openssh][:client][:identity_file_rsa] = "~/.ssh/id_rsa"
-# default[:openssh][:client][:identity_file_dsa] = "~/.ssh/id_dsa"
-# default[:openssh][:client][:port] = "22"
-# default[:openssh][:client][:protocol] = [ "2 1" ]
-# default[:openssh][:client][:cipher] = "3des"
-# default[:openssh][:client][:ciphers] = [ "aes128-ctr aes192-ctr aes256-ctr arcfour256 arcfour128 aes128-cbc 3des-cbc" ]
-# default[:openssh][:client][:macs] = [ "hmac-md5 hmac-sha1 umac-64@openssh.com hmac-ripemd160" ]
-# default[:openssh][:client][:escape_char] = "~"
-# default[:openssh][:client][:tunnel] = "no"
-# default[:openssh][:client][:tunnel_device] = "any:any"
-# default[:openssh][:client][:permit_local_command] = "no"
-# default[:openssh][:client][:visual_host_key] = "no"
-# default[:openssh][:client][:proxy_command] = "ssh -q -W %h:%p gateway.example.com"
-# default[:openssh][:server][:port] = "22"
-# default[:openssh][:server][:address_family] = "any"
-# default[:openssh][:server][:listen_address] = [ "0.0.0.0 ::" ]
-# default[:openssh][:server][:protocol] = "2"
-# default[:openssh][:server][:host_key_v1] = "/etc/ssh/ssh_host_key"
-# default[:openssh][:server][:host_key_rsa] = "/etc/ssh/ssh_host_rsa_key"
-# default[:openssh][:server][:host_key_dsa] = "/etc/ssh/ssh_host_dsa_key"
-# default[:openssh][:server][:host_key_ecdsa] = "/etc/ssh/ssh_host_ecdsa_key"
-# default[:openssh][:server][:key_regeneration_interval] = "1h"
-# default[:openssh][:server][:server_key_bits] = "1024"
-# default[:openssh][:server][:syslog_facility] = "AUTH"
-# default[:openssh][:server][:log_level] = "INFO"
-# default[:openssh][:server][:loging_racetime] = "2m"
-# default[:openssh][:server][:permit_root_login] = "yes"
-# default[:openssh][:server][:strict_modes] = "yes"
-# default[:openssh][:server][:max_auth_tries] = "6"
-# default[:openssh][:server][:max_sessions] = "10"
-# default[:openssh][:server][:rsa_authentication] = "yes"
-# default[:openssh][:server][:pub_key_authentication] = "yes"
-default[:openssh][:server][:authorized_keys_file] =	".ssh/authorized_keys"
-# default[:openssh][:server][:rhosts_rsa_authentication] = "no"
-# default[:openssh][:server][:host_based_authentication] = "no"
-# default[:openssh][:server][:ignore_user_known_hosts] = "no"
-# default[:openssh][:server][:ignore_rhosts] = "yes"
-# default[:openssh][:server][:password_authentication] = "yes"
-# default[:openssh][:server][:permit_empty_passwords] = "no"
-default[:openssh][:server][:challenge_response_authentication] = "no"
-# default[:openssh][:server][:kerberos_authentication] = "no"
-# default[:openssh][:server][:kerberos_or_localpasswd] = "yes"
-# default[:openssh][:server][:kerberos_ticket_cleanup] = "yes"
-# default[:openssh][:server][:kerberos_get_afs_token] = "no"
-# default[:openssh][:server][:gssapi_authentication] = "no"
-# default[:openssh][:server][:gssapi_clean_up_credentials] = "yes"
-default[:openssh][:server][:use_pam] = "yes"
-# default[:openssh][:server][:allow_agent_forwarding] = "yes"
-# default[:openssh][:server][:allow_tcp_forwarding] = "yes"
-# default[:openssh][:server][:gateway_ports] = "no"
-# default[:openssh][:server][:x11_forwarding] = "no"
-# default[:openssh][:server][:x11_display_offset] = "10"
-# default[:openssh][:server][:x11_use_localhost] = "yes"
-# default[:openssh][:server][:print_motd] = "yes"
-# default[:openssh][:server][:print_lastlog] = "yes"
-# default[:openssh][:server][:tcp_keepalive] = "yes"
-# default[:openssh][:server][:use_login] = "no"
-# default[:openssh][:server][:use_privilege_separation] = "yes"
-# default[:openssh][:server][:permit_user_environment] = "no"
-# default[:openssh][:server][:compression] = "delayed"
-# default[:openssh][:server][:client_alive_interval] = "0"
-# default[:openssh][:server][:client_alive_countmax] = "3"
-# default[:openssh][:server][:use_dns] = "yes"
-# default[:openssh][:server][:pid_file] = "/var/run/sshd.pid"
-# default[:openssh][:server][:max_start_ups] = "10"
-# default[:openssh][:server][:permit_tunnel] = "no"
-# default[:openssh][:server][:chroot_directory] = "none"
-# default[:openssh][:server][:banner] = "none"
-# default[:openssh][:server][:subsystem] =	"sftp	/usr/libexec/sftp-server"
-
-
BREAKS HERE
-      let(:cookbook_version) { cookbook.cookbook_versions.where(version: '0.1.0').first }
BREAKS HERE
-      berksfile = Berksfile.from_file(options[:berksfile])
-
-      dependencies = Berkshelf.ui.mute { berksfile.resolve(berksfile.dependencies)[:solution] }.sort
BREAKS HERE
-default[:passenger][:version] = '4.0.41'
BREAKS HERE
-  handler = MiniTest::Chef::Handler.new({
-    :verbose => true})
BREAKS HERE
-
-def initialize(*args)
-  super
-  @action = :add
-end
BREAKS HERE
-  '/usr/local/bin/bundle exec rake db:version > /dev/null 2>&1 ' \
-  '&& /usr/local/bin/bundle exec rake db:migrate || /usr/local/bin/bundle exec rake db:setup'
BREAKS HERE
-
-      def initialize_filesystem
-        FileUtils.mkdir_p(storage_path, mode: 0755)
-
-        unless File.writable?(storage_path)
-          raise InsufficientPrivledges, "You do not have permission to write to '#{storage_path}'!" +
-            " Please either chown the directory or use a different Cookbook Store."
-        end
-      end
BREAKS HERE
-    db_ipaddress = mysql_server[0]['mysql']['bind_address']
-    db_ipaddress = node['mysql']['bind_address']
BREAKS HERE
-      if options[:shims] == "shims" # This means 'no value given'.
-        options[:shims] = default_shims_path
-      end
-
-
-      def default_shims_path
-        File.join(Dir.pwd, "cookbooks")
-      end
BREAKS HERE
-            if config[:integration]
BREAKS HERE
-    remote_hash = remote_object.etag.delete('"') # etags are always quoted
BREAKS HERE
-            new_resource.attach_stderr == true ||
-            new_resource.attach_stdin == true ||
-            new_resource.attach_stdout == true ||
-            new_resource.stdin_once == true
-            !(new_resource.hostname.nil? || new_resource.hostname.empty?) ||
-            !(new_resource.mac_address.nil? || new_resource.mac_address.empty?)
-           !(new_resource.hostname.nil? || new_resource.hostname.empty?) ||
-             !(new_resource.dns.nil? || new_resource.dns.empty?) ||
-             !(new_resource.dns_search.nil? || new_resource.dns_search.empty?) ||
-             !(new_resource.mac_address.nil? || new_resource.mac_address.empty?) ||
-             !(new_resource.extra_hosts.nil? || new_resource.extra_hosts.empty?) ||
-             !(new_resource.exposed_ports.nil? || new_resource.exposed_ports.empty?) ||
-             !(new_resource.port_bindings.nil? || new_resource.port_bindings.empty?) ||
-             !(new_resource.publish_all_ports.nil? || new_resource.publish_all_ports.empty?) ||
-             !new_resource.port.nil?
BREAKS HERE
-  if !node['virtualization'] || node['virtualization']['role'] != 'guest'
-    default['ntp']['use_cmos'] = true
-  else
-    default['ntp']['use_cmos'] = false
-  end
BREAKS HERE
-            rescue Net::HTTPServerException => e
-              unless e.response.code == "404" && new_resource.path.split("/").any? { |p| p == "*" }
-                raise
-              end
BREAKS HERE
-      (Dovecot::Protocols.list(conf) - ignore_protos).join(' ')
BREAKS HERE
-default['cassandra']['rpc_min_threads'] = 16  
-default['cassandra']['rpc_max_threads'] = 2048 
BREAKS HERE
-          FileUtils.cp_r(Dir.glob(File.join(cb.path, "*")), dest)
BREAKS HERE
-if node.default["collectd"]["plugins"].key?("write_graphite")
-  write_graphite = node.default["collectd"]["plugins"]["write_graphite"]
-
-      write_graphite["config"]["Host"] = graphite_server_results[0]["ipaddress"]
-    write_graphite["config"]["Host"] = node["collectd"]["graphite_ipaddress"]
-  write_graphite["config"]["Port"] = 2003
BREAKS HERE
-        before { node.set['openstack']['block-storage']['policyfile_url'] = 'http://server/mypolicy.json' }
BREAKS HERE
-package 'liblzma-dev'
-package 'zlib1g-dev'
-
-backup_install node.name do
-  version '4.1.10'
-end
BREAKS HERE
-      @uri     = uri
BREAKS HERE
-  environment ['PATH' => "/usr/local/go/bin:#{ENV['PATH']}", 'GOPATH' => "/opt/go:#{node[:go][:gopath]}"]
BREAKS HERE
-version          '9.0.0'
BREAKS HERE
-          Chef::Log.info("Using overridden region name, #{new_resource.region}, from resource")
-          Chef::Log.info('Using resource-defined credentials')
-          Chef::Log.info('Using local credential chain')
BREAKS HERE
-
-  openstack_user service_user do
-    domain_name service_domain
-    role_name service_role
-    user_name service_user
-    connection_params connection_params
-    action :grant_domain
-  end
BREAKS HERE
-    def local_provider
-      return Chef::Provider::Package::Dpkg if node['platform_family'] == 'debian'
-      return Chef::Provider::Package::Rpm if node['platform_family'] == 'rhel'
-    end
-
BREAKS HERE
-          client_key: "/Users/reset/.chef/reset.pem"
BREAKS HERE
-    class Base < Drivers::Base
-        notifying_template "#{conf_dir}/ssl/#{app[:domains].first}.#{extensions[name]}" do
-        context.directory "#{conf_dir}/ssl" do
-                 name: a.adapter, deploy_env: deploy_env, appserver_config: a.webserver_config_params }
BREAKS HERE
-default[:memcached][:memory] = 64
-default[:memcached][:port] = 11211
-default[:memcached][:user] = "nobody"
-default[:memcached][:listen] = "0.0.0.0"
BREAKS HERE
-  only_if  { ::File.exists?("#{node['rsyslog']['config_prefix']}/rsyslog.d/remote.conf") }
BREAKS HERE
-    notifies :run, 'ruby_block[cq-start-guard]', :immediately
-  ruby_block 'cq-start-guard' do # ~FC014
BREAKS HERE
-
-include_recipe "nova::nova-scheduler-patch"
BREAKS HERE
-# Copyright 2014, Spanlink Communications.
BREAKS HERE
-
BREAKS HERE
-    it 'sends the metrics results to the view' do
-      foodcritic_qm = create(:foodcritic_metric)
-      collab_num_qm = create(:collaborator_num_metric)
-
-      foodcritic_result = create(:metric_result,
-                                 cookbook_version: cookbook.latest_cookbook_version,
-                                 quality_metric:   foodcritic_qm,
-                                 failure:          true,
-                                 feedback:         'it failed'
-                                )
-
-      collab_result = create(:metric_result,
-                             cookbook_version: cookbook.latest_cookbook_version,
-                             quality_metric:   collab_num_qm,
-                             failure:          false,
-                             feedback:         'it passed'
-                            )
-      get :show, id: cookbook.name
-      expect(assigns(:metric_results)).to include(foodcritic_result, collab_result)
BREAKS HERE
-
-default['ark']['prefix_root'] = "/usr/local"
-default['ark']['prefix_bin'] = "/usr/local/bin"
-default['ark']['prefix_home'] = "/usr/local"
-default['ark']['tar'] = "/bin/tar"
BREAKS HERE
-  # Workaround for SLE11
-  #
-  # On SLE11 ohai is broken and prefers lsb-release. We need to
-  # install it to be able to detect if recipe is run on openSUSE or SLES.
-  #
-  # https://bugzilla.novell.com/show_bug.cgi?id=809129
-  #
-  #
-    install_lsb_release = package 'lsb-release' do
-      action :nothing
-    end
-    reload_ohai = ohai 'reload_lsb' do
-      action :nothing
-    install_lsb_release.run_action(:install)
-    reload_ohai.run_action(:reload)
BREAKS HERE
-# blacklist as provided by NSA
-'/usr/bin/rcp', '/usr/bin/rlogin', '/usr/bin/rsh',
-# sshd must not use host-based authentication (see ssh cookbook)
-'/usr/libexec/openssh/ssh-keysign',
-'/usr/lib/openssh/ssh-keysign',
-# misc others
-'/sbin/netreport',                                            # not normally required for user
-'/usr/sbin/usernetctl',                                       # modify interfaces via functional accounts
-# connecting to ...
-'/usr/sbin/userisdnctl',                                      # no isdn...
-'/usr/sbin/pppd',                                             # no ppp / dsl ...
-# lockfile
-'/usr/bin/lockfile',
-'/usr/bin/mail-lock',
-'/usr/bin/mail-unlock',
-'/usr/bin/mail-touchlock',
-'/usr/bin/dotlockfile',
-# need more investigation, blacklist for now
-'/usr/bin/arping',
-'/usr/sbin/uuidd',
-'/usr/bin/mtr',                                               # investigate current state...
-'/usr/lib/evolution/camel-lock-helper-1.2',                   # investigate current state...
-'/usr/lib/pt_chown',                                          # pseudo-tty, needed?
-'/usr/lib/eject/dmcrypt-get-device',
-'/usr/lib/mc/cons.saver'                                      # midnight commander screensaver
-# whitelist as provided by NSA
-'/bin/mount', '/bin/ping', '/bin/su', '/bin/umount', '/sbin/pam_timestamp_check',
-'/sbin/unix_chkpwd', '/usr/bin/at', '/usr/bin/gpasswd', '/usr/bin/locate',
-'/usr/bin/newgrp', '/usr/bin/passwd', '/usr/bin/ssh-agent', '/usr/libexec/utempter/utempter', '/usr/sbin/lockdev',
-'/usr/sbin/sendmail.sendmail', '/usr/bin/expiry',
-# whitelist ipv6
-'/bin/ping6', '/usr/bin/traceroute6.iputils',
-# whitelist nfs
-'/sbin/mount.nfs', '/sbin/umount.nfs',
-# whitelist nfs4
-'/sbin/mount.nfs4', '/sbin/umount.nfs4',
-# whitelist cron
-'/usr/bin/crontab',
-# whitelist consolemssaging
-'/usr/bin/wall', '/usr/bin/write',
-# whitelist: only SGID with utmp group for multi-session access
-#            impact is limited; installation/usage has some remaining risk
-'/usr/bin/screen',
-# whitelist locate
-'/usr/bin/mlocate',
-# whitelist usermanagement
-'/usr/bin/chage', '/usr/bin/chfn', '/usr/bin/chsh',
-# whitelist fuse
-'/bin/fusermount',
-# whitelist pkexec
-'/usr/bin/pkexec',
-# whitelist sudo
-'/usr/bin/sudo', '/usr/bin/sudoedit',
-# whitelist postfix
-'/usr/sbin/postdrop', '/usr/sbin/postqueue',
-# whitelist apache
-'/usr/sbin/suexec',
-# whitelist squid
-'/usr/lib/squid/ncsa_auth', '/usr/lib/squid/pam_auth',
-# whitelist kerberos
-'/usr/kerberos/bin/ksu',
-# whitelist pam_caching
-'/usr/sbin/ccreds_validate',
-# whitelist Xorg
-'/usr/bin/Xorg',                                              # xorg
-'/usr/bin/X',                                                 # xorg
-'/usr/lib/dbus-1.0/dbus-daemon-launch-helper',                # freedesktop ipc
-'/usr/lib/vte/gnome-pty-helper',                              # gnome
-'/usr/lib/libvte9/gnome-pty-helper',                          # gnome
-'/usr/lib/libvte-2.90-9/gnome-pty-helper'                     # gnome
BREAKS HERE
-default.graylog2[:mongodb][:useauth]         = false
-default.graylog2[:mongodb][:user]            = nil
-default.graylog2[:mongodb][:password]        = nil
-default.graylog2[:mongodb][:host]            = '127.0.0.1'
-default.graylog2[:mongodb][:replica_set]     = nil
-default.graylog2[:mongodb][:database]        = 'graylog2'
-default.graylog2[:mongodb][:port]            = 27017
-default.graylog2[:collector][:package_url]                  = "http://packages.graylog2.org/nightly-builds/graylog-collector-#{node.graylog2[:collector][:version]}.tar.gz"
BREAKS HERE
-return unless platform != 'windows'
BREAKS HERE
-    Chef::Log.fatal!("Installation of OpenResty LUA rock [#{rock}] #{('version [' + version + ']') if version} failed")
BREAKS HERE
-        if ROLLOUT.active?(:fieri) && ENV['FIERI_URL'].present?
-          FieriNotifyWorker.perform_async(
-            resource.latest_cookbook_version.id
-          )
-        end
BREAKS HERE
-         restart_policy != 'on-raiseure'
BREAKS HERE
-## Grant Service role to Service User for Service Tenant ##
-openstack_identity_register "Grant 'service' Role to Service User for Service Tenant" do
BREAKS HERE
-      # rubocop:disable MethodLength
-        begin
-          rl << the_role['run_list'] if the_role.key?('run_list')
-        rescue ArgumentError
-          new_role['run_list'] = []
-        if the_role.key?('env_run_lists')
-          the_role['env_run_lists'].each_pair do |key, value|
-              rl << value
-              new_role['env_run_lists'][key] = []
-            puts "REPAIRING: #{role_path} run_lists"
BREAKS HERE
-default['openstack']['network']['nova']['auth_plugin'] = 'password'
BREAKS HERE
-      Chef::Log.debug("Unzip command: #{cmd_str}")
-      Chef::Log.debug("Compilation command: #{cmd_str}")
-
BREAKS HERE
-case platform
-case platform
-when 'debian', 'ubuntu'
BREAKS HERE
-default['cookbook-openshift3']['openshift_push_via_dns'] = node['cookbook-openshift3']['ose_major_version'].to_f >= 3.6 ? true : false
BREAKS HERE
-recipe 'dovecot::packages', 'Installs the required packages.'
BREAKS HERE
-  service_name platform_options["package_overrides"]
BREAKS HERE
-                key_content, cert_content, cert_subject, ca_cert_content
-              )
-          unless content.is_a?(String) && verify_self_signed_cert(
-                   key_content, content, cert_subject, ca_cert_content
-                 )
-            content = generate_cert_with_ca(
-              key_content, cert_subject, time, ca_cert_content, ca_key_content
-            )
-          content
BREAKS HERE
-            'Resolved state can be stopped'
BREAKS HERE
-  notifies :run, 'execute[reload iptables]'
-  notifies :run, 'execute[reload ip6tables]'
BREAKS HERE
-default['ubuntu']['codename'] = node['lsb']['codename']
BREAKS HERE
-    inner_deploy = deploy.to_hash
BREAKS HERE
-  revision "v1.0.0"
BREAKS HERE
-node.default['fb_grub']['_grub_config'] = "#{grub_base_dir}/grub.conf"
-node.default['fb_grub']['_grub2_config'] = "#{grub2_base_dir}/grub.cfg"
-node.default['fb_grub']['_vendor'] = 'undefined'
-node.default['fb_grub']['_efi_vendor_dir'] = '/notdefined'
-node.default['fb_grub']['_grub2_module_path'] = '/notdefined'
-node.default['fb_grub']['_grub2_linux_statement'] = 'linux'
-node.default['fb_grub']['_grub2_initrd_statement'] = 'initrd'
-
-whyrun_safe_ruby_block 'initialize_grub_variables' do
-  only_if { node.efi? }
-  block do
-    if node.centos6?
-      node.default['fb_grub']['_vendor'] = 'redhat'
-    elsif node.debian?
-      node.default['fb_grub']['_vendor'] = 'debian'
-    else
-      node.default['fb_grub']['_vendor'] = 'centos'
-    end
-
-    if node['fb_grub']['version'] == 2
-      unless node.centos6?
-        node.default['fb_grub']['_grub2_linux_statement'] = 'linuxefi'
-        node.default['fb_grub']['_grub2_initrd_statement'] = 'initrdefi'
-      end
-      if node.debian?
-        node.default['fb_grub']['_vendor'] = 'debian'
-      else
-        node.default['fb_grub']['_vendor'] = 'centos'
-      end
-    end
-
-    node.default['fb_grub']['_efi_vendor_dir'] =
-      "/boot/efi/EFI/#{node['fb_grub']['_vendor']}"
-
-    node.default['fb_grub']['_grub_config'] =
-      "#{node['fb_grub']['_efi_vendor_dir']}/grub.conf"
-    node.default['fb_grub']['_grub2_config'] =
-      "#{node['fb_grub']['_efi_vendor_dir']}/grub.cfg"
-
-    # Calculate the grub2 partition for the OS
-    os_device = node.device_of_mount('/')
-    m = os_device.match(/[0-9]+$/)
-    fail 'fb_grub::default Cannot parse OS device!' unless m
-    os_partition_grub2 = "(#{node['fb_grub']['boot_disk']},#{m[0].to_i})"
-
-    node.default['fb_grub']['_grub2_module_path'] =
-      "#{os_partition_grub2}/usr/lib/grub/#{node['kernel']['machine']}-efi"
-  end
-end
-      # udev block device partitions start at 1
-      # grub disks start at 0
-      m = boot_device.match(/[0-9]+$/)
-      fail 'fb_grub::default Cannot parse boot device!' unless m
-
-      grub_partition = m[0].to_i - 1
-      root_device = "(#{node['fb_grub']['boot_disk']},#{grub_partition})"
-      node.default['fb_grub']['root_device'] = root_device
-
-      root_device_grub2 =
-        "(#{node['fb_grub']['boot_disk']},#{grub_partition + 1})"
-      node.default['fb_grub']['root_device_grub2'] = root_device_grub2
-  end
-end
-
-# For non-efi, non-labeled systems, double check root_device
-whyrun_safe_ruby_block 'check_root_device' do
-  only_if do
-    File.exist?(node['fb_grub']['_grub_config']) &&
-   !node['fb_grub']['use_labels']
-  end
-  block do
-    File.open(node['fb_grub']['_grub_config']).each do |line|
-      if !node.efi? && line.match(/^\s*root\s*/)
-        # we want to assert no change in root device when not using EFI
-        current_root_device = line.split[1]
-        if current_root_device != node['fb_grub']['root_device']
-          fail 'fb_grub::default Grub root device mismatch: '\
-               "expected #{root_device}, found #{current_root_device}"
-        end
BREAKS HERE
-            'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="production" bundle exec sidekiq ' \
BREAKS HERE
-    [file_match(filename)] if declared_dependencies(ast).include?('partial_search')
BREAKS HERE
-    cmd += "log prefix='#{new_resource.log_prefix}' " if new_resource.log_prefix
BREAKS HERE
-  converge_by "Configured Root Config \"#{new_resource}\"" do
-    converge_if_changed :default_documents_enabled do
-      set_default_documents_enabled(new_resource.default_documents_enabled)
-    end
-
-    converge_if_changed :default_documents do
-      set_default_documents(new_resource.default_documents, current_resource.default_documents)
-    end
-
-    converge_if_changed :mime_maps do
-      set_mime_maps(new_resource.mime_maps, current_resource.mime_maps)
-    end
-  converge_by "Added Root Config \"#{new_resource}\"" do
-    converge_if_changed :add_default_documents do
-      set_default_documents(new_resource.add_default_documents, current_resource.add_default_documents, true, false)
-    end
-
-    converge_if_changed :add_mime_maps do
-      set_mime_maps(new_resource.add_mime_maps, current_resource.add_mime_maps, true, false)
-    end
-  converge_by "Deleted Root Config \"#{new_resource}\"" do
-    converge_if_changed :delete_default_documents do
-      set_default_documents(new_resource.delete_default_documents, current_resource.delete_default_documents, false, true)
-    end
-
-    converge_if_changed :delete_mime_maps do
-      set_mime_maps(new_resource.delete_mime_maps, current_resource.delete_mime_maps, false, true)
-    end
BREAKS HERE
-    :mac => SshMac.getMacs(node, node['ssh']['weak_hmac']),
-    :kex => SshKex.getKexs(node, node['ssh']['weak_kex']),
-    :cipher => SshCipher.getCiphers(node, node['ssh']['cbc_required'])
BREAKS HERE
-default[:bamboo][:version]                        = '5.12.2'
BREAKS HERE
-
-    uri = URI.join(new_resource.checksum_base_path, "tomcat-#{major_version}/v#{new_resource.version}/bin/apache-tomcat-#{new_resource.version}.tar.gz.md5")
-    uri << new_resource.tarball_base_path
-    uri << '/' unless uri[-1] == '/'
-    uri << "tomcat-#{major_version}/v#{new_resource.version}/bin/apache-tomcat-#{new_resource.version}.tar.gz"
-
BREAKS HERE
-        chef_client_bin = sudo(config[:chef_client_path])
-        cmd = "#{chef_client_bin} --local-mode"
BREAKS HERE
-  owner node['openstack']['compute']['user']
-  group node['openstack']['compute']['group']
-  mode 00644
-nova_user = node['openstack']['compute']['user']
-nova_group = node['openstack']['compute']['group']
BREAKS HERE
-version '0.2.3'
BREAKS HERE
-      self.run_action(action)
BREAKS HERE
-        roles = File.join(@role_dir, '*.rb')
-        roles = roles.map { |x| File.join(@role_dir, "#{x.name}.rb") }.join(' ')
-      db = JSON.load(s.stdout)
-      db = JSON.load(s.stdout)
BREAKS HERE
-      user 'root'
-      group 'root'
-  %w(etc/delivery.rb .chef/knife.rb).each do |dir|
-    properpath = dir.split('/')
-    file "#{workspace}/#{dir}" do
-      content ensurekv(::File.read(new_resource.chef_config_path),
-                       node_name: new_resource.chef_user,
-                       log_location: :STDOUT,
-                       client_key: "#{workspace}/#{properpath[0]}/#{new_resource.chef_user}.pem",
-                       trusted_certs_dir: '/etc/chef/trusted_certs')
-      mode '0644'
-      owner 'dbuild'
-      group 'dbuild'
-    end
-        runner = Mixlib::ShellOut.new("delivery --non-interactive --no-color \
-          api post runners \
BREAKS HERE
-    command cmd.join(' ')
-    code "/tmp/local-lib/install/#{installed_module}"
BREAKS HERE
-      expect(subject).to include(include('AuxAddress' => { 'foo' => '192.168.0.34', 'bar' => '192.168.0.124' }))
BREAKS HERE
-default[:passenger][:version] = '4.0.38'
BREAKS HERE
-      @cookbook = options[:cookbook] ? "'#{options[:cookbook]}'" : "'chefdk_bootstrap', '2.3.0'#{ENV['CHEFDK_BOOT_LOCAL']}"
BREAKS HERE
-node.set['openstack']['mq']['listen'] = bind_mq_address
-  if node['rabbitmq']['ssl_port'] != bind_mq.port
-    node.normal['rabbitmq']['ssl_port'] = bind_mq.port
-    Chef::Log.error "Unable to listen on the port #{bind_mq.port} for RabbitMQ TCP, which is listened on by SSL!"
-  node.normal['rabbitmq']['port'] = bind_mq.port
-# TODO(mrv) This could be removed once support for this is added to the rabbitmq cookbook.
-# Issue: https://github.com/kennonkwok/rabbitmq/issues/136
-rabbitmq_user 'remove rabbit guest user' do
-  user 'guest'
-  action :delete
-  not_if { user == 'guest' }
-end
-
BREAKS HERE
-if Gem::Requirement.new('< 12.13.30').satisfied_by?(Gem::Version.new(Chef::VERSION))
BREAKS HERE
-    mode '0750'
-
BREAKS HERE
-Chef::Log.debug("openstack-telemetry::common:identity_endpoint|#{identity_endpoint.to_s}")
-  mode  00750
-  owner  node['openstack']['telemetry']['user']
-  group  node['openstack']['telemetry']['group']
-  mode   00640
BREAKS HERE
-        )
-        )
BREAKS HERE
-  if node['nginx']['install_method'] == 'package'
-
BREAKS HERE
-      Chef::Log.debug("Creating #{path})")
-        Chef::Log.debug("Values!: #{values}")
-            Chef::Log.debug("Registry key is: #{reg[key]}, value is: #{val}")
BREAKS HERE
-# Copyright:: 2016-2018, Chef Software Inc.
-  target_version = '2.6.11'
-  Chef::Log.debug("Found gem version #{rubygems_version}. Desired version is at least #{target_version}")
-        shell_out!("#{gem_bin} update --system --no-document #{source}")
-        shell_out!("#{gem_bin} update --system --no-rdoc --no-ri #{source}")
BREAKS HERE
-  source "/data/imagery/gb/ea/night/ea-night.vrt"
-  extension "os_sv_png"
BREAKS HERE
-values_to_set = [{ name: 'Parameters',
-                   type: :string,
-                   data: config_file_option }]
-
-# This is a bit painful, since ImagePath contains a version specific
-# path to the windows_service.rb code; we can't know what it is until
-# the msi is installed. (The path incorporates the push-client ruby
-# gem version, which isn't always correlated with the version of the
-# omnibus package. So we can't create this entry before installation,
-# yet installation may fail if this isn't set.
-#
-# The approach below parses the ImagePath from the installer, and adds
-# a command line option to point to the config file.
-if registry_key_exists?(key_path)
-  values = registry_get_values(key_path)
-  imagepath = values.find { |x| x[:name] == 'ImagePath' }
-  match = imagepath[:data].match(/^(.*ruby\.exe)\s+(\S*windows_service\.rb)/)
-  imagepath[:data] = "#{match[1]} #{match[2]} #{config_file_option}"
-  values_to_set << imagepath
-end
-registry_key "HKLM\\SYSTEM\\CurrentControlSet\\Services\\#{service_name}" do
-  values(values_to_set)
BREAKS HERE
-    flags: 'IPV4'
-    OPTIONS: '-s'
BREAKS HERE
-        .with_content('worker_processes 4')
BREAKS HERE
-  cookbook_file "/etc/apparmor.d/#{name}" do
-    cookbook source_cookbook if source_cookbook
-    source source_filename if source_filename
-  file "/etc/apparmor.d/#{name}" do
BREAKS HERE
-      'version' => nil
-      'version' => nil
-      'version' => nil
-      'version' => nil
-    }
-      'version' => nil
-      'version' => nil
-      'version' => nil
-      'version' => nil
-      'version' => nil
-    }
-      'version' => nil
-    }
BREAKS HERE
-        require "pry"; binding.pry
BREAKS HERE
-property :name, String, name_property: true
-    config new_resource.config
BREAKS HERE
-name       'example_cookbook'
-maintainer 'Berkshelf Core'
-version    '0.5.0'
BREAKS HERE
-        if conf.is_a?(Chef::Resource::SystemdUnit)
-          ::File.join(unit_conf_root(conf), "#{conf.name}.#{conf.conf_type}")
-        else
-          ::File.join(local_conf_root, "#{conf.conf_type}.conf")
-        end
-        Mixlib::ShellOut.new('timedatectl')
-          .tap(&:run_command)
-          .stdout
-          .match(Regexp.new("RTC in local TZ: #{yn}")) unless defined?(ChefSpec)
BREAKS HERE
-
BREAKS HERE
-    password: @super_password
BREAKS HERE
-    puts 'Host Agent configuration file' + fileExists + ' exists. It will be copy to ' + installer_prefix_dir  + '/agent/conf/dthostagent.ini_backup folder before installation.'
-    cmd2exec = "cp -f #{fileExists} #{fileExists}_backup"
-    %x[ #{cmd2exec} ]
BREAKS HERE
-            subject.from_path(cookbook_path).should be_a(CachedCookbook)
-            subject.from_path(cookbook_path).cookbook_name.should eql("has_metadata")
-            subject.from_path(cookbook_path).should be_a(CachedCookbook)
-            subject.from_path(cookbook_path).cookbook_name.should eql("example_metadata_no_name")
-            lambda {
-            }.should raise_error(Berkshelf::CookbookNotFound)
-          @cached_cb.should be_a(CachedCookbook)
-          @cached_cb.version.should eql("0.5.0")
-            subject.from_store_path(tmp_path).should be_nil
-            subject.from_store_path(fixtures_path.join("cookbooks", "example_cookbook")).should be_nil
-          subject.checksum(fixtures_path.join("cookbooks", "example_cookbook-0.5.0", "README.md")).should eql("6e21094b7a920e374e7261f50e9c4eef")
-            lambda {
-            }.should raise_error(Errno::ENOENT)
-        subject.checksums.should have(11).items
-        subject.checksums.should have_key("fb1f925dcd5fc4ebf682c4442a21c619")
-        subject.checksums.should have_value(cb_path.join("recipes/default.rb").to_s)
-          subject.manifest.should have_key(category)
-        lambda {
-        }.should raise_error(CookbookSyntaxError)
-        lambda {
-        }.should raise_error(CookbookSyntaxError)
-        @metadata.should have_key(:path)
-        @metadata[:path].should be_relative_path
-        @metadata[:path].should eql("files/default/mime.types")
-        @metadata.should have_key(:name)
-        @metadata[:name].should eql("mime.types")
-        @metadata.should have_key(:checksum)
-        @metadata[:checksum].should eql("06e7eca1d6cb608e2e74fd1f8e059f34")
-        @metadata.should have_key(:specificity)
-          @metadata[:specificity].should eql("ubuntu")
-          @metadata[:specificity].should eql("default")
-      before(:each) do
-        @hash = subject.to_hash
-      end
-        @hash.should have_key('recipes')
-        @hash['recipes'].should be_a(Array)
-        @hash['recipes'].each do |item|
-          item.should be_a(Hash)
-        @hash['recipes'].first.should have_key('name')
-        @hash['recipes'].first.should have_key('path')
-        @hash['recipes'].first.should have_key('checksum')
-        @hash['recipes'].first.should have_key('specificity')
-        @hash.should have_key('definitions')
-        @hash['definitions'].should be_a(Array)
-        @hash['definitions'].each do |item|
-          item.should be_a(Hash)
-        @hash['definitions'].first.should have_key('name')
-        @hash['definitions'].first.should have_key('path')
-        @hash['definitions'].first.should have_key('checksum')
-        @hash['definitions'].first.should have_key('specificity')
-        @hash.should have_key('libraries')
-        @hash['libraries'].should be_a(Array)
-        @hash['libraries'].each do |item|
-          item.should be_a(Hash)
-        @hash['libraries'].first.should have_key('name')
-        @hash['libraries'].first.should have_key('path')
-        @hash['libraries'].first.should have_key('checksum')
-        @hash['libraries'].first.should have_key('specificity')
-        @hash.should have_key('attributes')
-        @hash['attributes'].should be_a(Array)
-        @hash['attributes'].each do |item|
-          item.should be_a(Hash)
-        @hash['attributes'].first.should have_key('name')
-        @hash['attributes'].first.should have_key('path')
-        @hash['attributes'].first.should have_key('checksum')
-        @hash['attributes'].first.should have_key('specificity')
-        @hash.should have_key('files')
-        @hash['files'].should be_a(Array)
-        @hash['files'].each do |item|
-          item.should be_a(Hash)
-        @hash['files'].first.should have_key('name')
-        @hash['files'].first.should have_key('path')
-        @hash['files'].first.should have_key('checksum')
-        @hash['files'].first.should have_key('specificity')
-        @hash.should have_key('templates')
-        @hash['templates'].should be_a(Array)
-        @hash['templates'].each do |item|
-          item.should be_a(Hash)
-        @hash['templates'].first.should have_key('name')
-        @hash['templates'].first.should have_key('path')
-        @hash['templates'].first.should have_key('checksum')
-        @hash['templates'].first.should have_key('specificity')
-        @hash.should have_key('resources')
-        @hash['resources'].should be_a(Array)
-        @hash['resources'].each do |item|
-          item.should be_a(Hash)
-        @hash['resources'].first.should have_key('name')
-        @hash['resources'].first.should have_key('path')
-        @hash['resources'].first.should have_key('checksum')
-        @hash['resources'].first.should have_key('specificity')
-        @hash.should have_key('providers')
-        @hash['providers'].should be_a(Array)
-        @hash['providers'].each do |item|
-          item.should be_a(Hash)
-        @hash['providers'].first.should have_key('name')
-        @hash['providers'].first.should have_key('path')
-        @hash['providers'].first.should have_key('checksum')
-        @hash['providers'].first.should have_key('specificity')
-        @hash.should have_key('root_files')
-        @hash['root_files'].should be_a(Array)
-        @hash['root_files'].each do |item|
-          item.should be_a(Hash)
-        @hash['root_files'].first.should have_key('name')
-        @hash['root_files'].first.should have_key('path')
-        @hash['root_files'].first.should have_key('checksum')
-        @hash['root_files'].first.should have_key('specificity')
-        @hash.should have_key('cookbook_name')
-        @hash['cookbook_name'].should be_a(String)
-        @hash.should have_key('metadata')
-        @hash['metadata'].should be_a(Chef::Cookbook::Metadata)
-        @hash.should have_key('version')
-        @hash['version'].should be_a(String)
-        @hash.should have_key('name')
-        @hash['name'].should be_a(String)
-        name, version = @hash['name'].split('-')
-        name.should eql(cookbook_name)
-        version.should eql(cookbook_version)
-        @hash.should have_key('chef_type')
-        @hash['chef_type'].should eql("cookbook_version")
-    describe '#to_hash' do
-      let(:hash) { subject.to_hash }
-
-      it "has a 'chef_type' key" do
-        expect(hash['chef_type']).to eq('cookbook_version')
-      end
-
-      it "has a 'name' key" do
-        expect(hash['name']).to eq('nginx-0.100.5')
-      end
-
-      it "has a 'cookbook_name' key" do
-        expect(hash['cookbook_name']).to eq('nginx')
-      end
-
-      it "has a 'version' key" do
-        expect(hash['version']).to eq('0.100.5')
-      end
-
-      it "has a 'metadata' key" do
-        expect(hash['metadata']).to be_a Chef::Cookbook::Metadata
-      end
-    end
-
-        generate_cookbook(Berkshelf.cookbook_store.to_s, "sparkle", "0.1.0", dependencies: dependencies, recommendations: recommendations)
-        subject.dependencies.should include(dependencies)
-        subject.dependencies.should include(recommendations)
BREAKS HERE
-    @expected_output = <<-OUTPUT
-# knife cookbook delete build-essential 2.0.2 -a -y
-    @expected_output = <<-OUTPUT
-    @expected_output = <<-OUTPUT
-    @expected_output = <<-OUTPUT
-    @expected_output = <<-OUTPUT
-    @expected_output = <<-OUTPUT
BREAKS HERE
-  
BREAKS HERE
-  notifies :up, 'docker_compose_application[nginx]', :delayed
-  notifies :up, 'docker_compose_application[nginx]', :delayed
BREAKS HERE
-                :stage, :patchset_branch, :scm_client, :workspace_repo
-      scm_client.changed_files(@workspace_repo, @pipeline, @patchset_branch)
BREAKS HERE
-# Copyright 2015 Chef, Inc.
BREAKS HERE
-container_executor_path = 
BREAKS HERE
-          bundle exec cucumber --color --format progress --tags ~@no_run --strict"
BREAKS HERE
-    not_if "ovs-vsctl show | grep 'Bridge \"#{ext_bridge}\"'"
BREAKS HERE
-        name = args[:c] || args[:cluster] || 'cluster 1'
BREAKS HERE
-      when 'no_reboot' || 'delayed_reboot'
BREAKS HERE
-          raise ::Berkshelf::InsufficientPrivledges, "You do not have permission to write to '#{storage_path}'! Please either chown the directory or use a different Cookbook Store."
-
BREAKS HERE
-as_admin = "export AWS_DEFAULT_REGION=localhost; eval `clcadmin-assume-system-credentials` && "
BREAKS HERE
-# Create the db path if not exist.
-directory node['mongodb3']['config']['db_path'] do
-  owner node['mongodb3']['user']
-  group node['mongodb3']['group']
-  mode '0755'
-  action :create
-  recursive true
-end
-
BREAKS HERE
-# Copyright:: Copyright (c) 2014-2018, Chef Software Inc.
-        banner "Usage: chef generate policyfile [NAME] [options]"
BREAKS HERE
-default['maven']['version'] = '3.5.0'
-default['maven']['url'] = "http://archive.apache.org/dist/maven/maven-#{node['maven']['version'].split('.')[0]}/#{node['maven']['version']}/binaries/apache-maven-#{node['maven']['version']}-bin.tar.gz"
-default['maven']['checksum'] = 'beb91419245395bd69a4a6edad5ca3ec1a8b64e41457672dc687c173a495f034'
BREAKS HERE
-        kid=$(#{glance_cmd} image-create --name "${image_name}-kernel" --is-public true #{aki_fmt} < ${kernel_file} | cut -d: -f2 | sed 's/ //')
-        rid=$(#{glance_cmd} image-create --name "${image_name}-initrd" --is-public true #{ari_fmt} < ${ramdisk} | cut -d: -f2 | sed 's/ //')
BREAKS HERE
-state_attrs :java_home_dir, :middleware_home_dir, :version, :tmp_dir, :rsp_file
BREAKS HERE
-          platform_version_compatibility_mode: new_resource.platform_version_compatibility_mode
-          'push-server' => 'push-jobs-server'
BREAKS HERE
-include_recipe "cinder::common"
-
-db_pass = node["cinder"]["db"]["password"]
-sql_connection = db_uri("cinder", db_user, "cinder")
-rabbit_info = get_settings_by_role rabbit_server_role, "queue"
-glance = get_settings_by_role glance_api_role, "glance"
BREAKS HERE
-
-
-
BREAKS HERE
-        cookbooks[cookbook][:location] = location.to_s
BREAKS HERE
-  db_password("quantum")
BREAKS HERE
-extjs = 'ext-2.2.zip'
-  source "http://extjs.com/deploy/#{extjs}"
BREAKS HERE
-        missing_cookbooks = options.fetch(:cookbooks, nil) - solution.map(&:cookbook_name)
BREAKS HERE
-version          "1.2.2"
BREAKS HERE
-version '2.4.0'
BREAKS HERE
-if node.run_list.include?('openstack-orchestration::api-cfn')
-
-  # Register Heat API Cloudformation Service
-  openstack_identity_register 'Register Heat Cloudformation Service' do
-    auth_uri auth_url
-    bootstrap_token token
-    service_name 'heat-cfn'
-    service_type 'cloudformation'
-    service_description 'Heat Cloudformation Service'
-
-    action :create_service
-  end
-
-  # Register Heat API CloudFormation Endpoint
-  openstack_identity_register 'Register Heat Cloudformation Endpoint' do
-    auth_uri auth_url
-    bootstrap_token token
-    service_type 'cloudformation'
-    endpoint_region region
-    endpoint_adminurl heat_cfn_endpoint.to_s
-    endpoint_internalurl heat_cfn_endpoint.to_s
-    endpoint_publicurl heat_cfn_endpoint.to_s
-
-    action :create_endpoint
-  end
BREAKS HERE
-user node["sensu"]["user"] do
-    lazy {
-      user = Chef::Util::Windows::NetUser.new(node["sensu"]["user"])
-      !!user.get_info rescue false
-    }
-group node["sensu"]["group"] do
-  members node["sensu"]["user"]
BREAKS HERE
-  include ChefHandler::Helpers
BREAKS HERE
-  runit_service 'chef-push-jobs-client' do
-  runit_service 'chef-push-jobs-client' do
-    only_if { ::File.exist?('/etc/sv/chef-push-jobs-client/run') }
-  runit_service 'chef-push-jobs-client' do
-  runit_service 'chef-push-jobs-client' do
-  runit_service 'chef-push-jobs-client' do
-    only_if { ::File.exist?('/etc/sv/chef-push-jobs-client/run') }
-    runit_service 'chef-push-jobs-client' do
BREAKS HERE
-default[:opsworks_initial_setup][:micro][:yum_dump_file] = File.join(Chef::CHEF_ROOT, "chef", "provider", "package", "yum-dump.py")
-default[:opsworks_initial_setup][:micro][:yum_dump_lock_timeout] = 120
BREAKS HERE
-r = gem_package "activesupport" do
-  action :nothing
-r.run_action(:install)
-  r = gem_package pkg do
-    action :nothing
-  end
-  r.run_action(:install)
-require 'rubygems'
-Gem.clear_paths
-  when "centos","redhat" 
BREAKS HERE
-    not_if { node['cassandra']['conf_dir'] == node.default['cassandra']['conf_dir'] }
BREAKS HERE
-    File.exists?('/var/lib/apt/periodic/update-success-stamp') &&
-    File.mtime('/var/lib/apt/periodic/update-success-stamp') < Time.now - 86400
BREAKS HERE
-
BREAKS HERE
-  if node['consul_template']['init_style'] == 'supervisor'
-    notifies :restart, 'supervisor_service[consul-template]'
-  else
-    notifies :restart, 'service[consul-template]'
-  end
BREAKS HERE
-  action :enable
-chef_handler 'MyCorp::MyHandler' do
-  source "#{node['chef_handler']['handler_path']}/my_handler.rb"
-  action :disable
BREAKS HERE
-        subject.stub(:resolve).with(dependency, options).and_return({ solution: [cached], dependencies: [dependency] })
-        subject.should_receive(:resolve).with(dependency, options)
BREAKS HERE
-property :git_repository, String, :default => ["https://github.com/Firefishy/osm-imagery-default.git"]
BREAKS HERE
-db_type = node['openstack']['db']['identity']['db_type']
BREAKS HERE
-# Cookbook Name:: security
-# Recipe:: securetty
BREAKS HERE
-  var_cluster_node_type = parse_cluster_nodes_string(new_resource.cluster_nodes).each { |node| node['name'] == var_node_name }.first['type'] # ~FC039
BREAKS HERE
-  let(:cookbook_name) { "example" }
BREAKS HERE
-    node[:security][:kernel][:enable_sysrq] || 0
BREAKS HERE
-      return '0.0.0' if vers == :latest || vers == 'latest'
-      new_resource.ctl_command || chef_ctl_command(new_resource.package_name)
-      execute "#{new_resource.package_name}-reconfigure" do
BREAKS HERE
-# Copyright 2010, Chef Software, Inc.
BREAKS HERE
-default['postfix']['use_alias_maps'] = false
-default['postfix']['aliases'] = {}
BREAKS HERE
-default['cassandra']['snitch'] = 'SimpleSnitch'  # endpoint_snitch config
BREAKS HERE
-if node['openstack']['compute']['driver'].split('.').first == 'vmwareapi'
-  node.default['openstack']['compute']['conf_secrets']
-    .[]('vmware')['host_password'] =
-    get_password 'token', 'openstack_vmware_secret_name'
-end
-
-auth_url = auth_uri_transform identity_endpoint.to_s, node['openstack']['compute']['api']['auth']['version']
BREAKS HERE
-      property :type,          kind_of: String, equal_to: %w(A CNAME ALIAS MX SPF URL TXT NS SRV NAPTR PTR AAA SSHFP HFINO), required: true
BREAKS HERE
-  {'send_timeout' => '10'}
BREAKS HERE
-case node['platform']
-when 'redhat','centos','scientific','fedora','suse','amazon' then
-
-  # core, imap, pop3, lmtp, ldap, sqlite
-  ruby_block 'package-dovecot-core' do
-    block {}
-    notifies :install, 'package[dovecot]', :immediately
-    [ 'core', 'imap', 'pop3', 'lmtp', 'ldap' ].each do |conf_type|
-      node['dovecot']['conf_files'][conf_type].each do |conf_file|
-        notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot' do
-    action :nothing
-    notifies :reload, 'ohai[reload_dovecot]', :immediately
-  end
-
-  # sieve
-  ruby_block 'package-dovecot-sieve' do
-    block {}
-    only_if do Dovecot::Plugins.required?('sieve', node['dovecot']) end
-    notifies :install, 'package[dovecot-pigeonhole]', :immediately
-    node['dovecot']['conf_files']['sieve'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-pigeonhole' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-when 'debian', 'ubuntu' then
-
-  # core
-  ruby_block 'package-dovecot-core' do
-    block {}
-    notifies :install, 'package[dovecot-core]', :immediately
-    notifies :install, 'package[dovecot-gssapi]', :immediately
-    node['dovecot']['conf_files']['core'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-core' do
-    action :nothing
-    notifies :reload, 'ohai[reload_dovecot]', :immediately
-  end
-  package 'dovecot-gssapi' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # imap
-  ruby_block 'package-dovecot-imap' do
-    block {}
-    only_if do Dovecot::Protocols.enabled?('imap', node['dovecot']['protocols']) end
-    notifies :install, 'package[dovecot-imapd]', :immediately
-    node['dovecot']['conf_files']['imap'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-imapd' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # pop3
-  ruby_block 'package-dovecot-pop3d' do
-    block {}
-    only_if do Dovecot::Protocols.enabled?('pop3', node['dovecot']['protocols']) end
-    notifies :install, 'package[dovecot-pop3d]', :immediately
-    node['dovecot']['conf_files']['pop3'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-pop3d' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # lmtp
-  ruby_block 'package-dovecot-lmtpd' do
-    block {}
-    only_if do Dovecot::Protocols.enabled?('lmtp', node['dovecot']['protocols']) end
-    notifies :install, 'package[dovecot-lmtpd]', :immediately
-    node['dovecot']['conf_files']['lmtp'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-lmtpd' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # sieve
-  ruby_block 'package-dovecot-sieve' do
-    block {}
-    only_if do Dovecot::Plugins.required?('sieve', node['dovecot']) end
-    notifies :install, 'package[dovecot-sieve]', :immediately
-    notifies :install, 'package[dovecot-managesieved]', :immediately
-    node['dovecot']['conf_files']['sieve'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-sieve' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-  package 'dovecot-managesieved' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # ldap
-  ruby_block 'package-dovecot-ldap' do
-    block {}
-    only_if do node['dovecot']['auth']['ldap'].kind_of?(Hash) and node['dovecot']['auth']['ldap'].length > 0 end
-    notifies :install, 'package[dovecot-ldap]', :immediately
-    node['dovecot']['conf_files']['ldap'].each do |conf_file|
-      notifies :create, "template[#{conf_file}]", :immediately
-    end
-  end
-  package 'dovecot-ldap' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-  # sqlite
-  ruby_block 'package-dovecot-sqlite' do
-    block {}
-    only_if do node['dovecot']['conf']['sql']['driver'] == 'sqlite' end
-    notifies :install, 'package[dovecot-sqlite]', :immediately
-  end
-  package 'dovecot-sqlite' do
-    action :nothing
-    if node['dovecot']['ohai_plugin']['build-options']
-      notifies :reload, 'ohai[reload_dovecot]', :immediately
-    end
-  end
-
-else
-  Chef::Application.fatal!("Unsupported platform: #{node['platform']}");
-end
-
-ruby_block 'package-dovecot-mysql' do
-  block {}
-  only_if do node['dovecot']['conf']['sql']['driver'] == 'mysql' end
-  notifies :install, 'package[dovecot-mysql]', :immediately
-end
-package 'dovecot-mysql' do
-  action :nothing
-  if node['dovecot']['ohai_plugin']['build-options']
-    notifies :reload, 'ohai[reload_dovecot]', :immediately
-  end
-end
-
-ruby_block 'package-dovecot-pgsql' do
-  block {}
-  only_if do node['dovecot']['conf']['sql']['driver'] == 'pgsql' end
-  notifies :install, 'package[dovecot-pgsql]', :immediately
-end
-package 'dovecot-pgsql' do
-  action :nothing
-  if node['dovecot']['ohai_plugin']['build-options']
-    notifies :reload, 'ohai[reload_dovecot]', :immediately
-  end
-end
BREAKS HERE
-  variables tokens: => tilecache_tokens
BREAKS HERE
-vnc_bind_ip = node["network"]["ipaddress_#{node["openstack"]["compute"]["libvirt"]["bind_interface"]}"]
-xvpvnc_proxy_ip = node["network"]["ipaddress_#{node["openstack"]["compute"]["xvpvnc_proxy"]["bind_interface"]}"]
-novnc_proxy_ip = node["network"]["ipaddress_#{node["openstack"]["compute"]["novnc_proxy"]["bind_interface"]}"]
BREAKS HERE
-
-# CQ Unix Toolkit
-# -----------------------------------------------------------------------------
-default['cq-unix-toolkit']['repository']['url'] =
-  'https://github.com/jwadolowski/CQ-Unix-Toolkit'
-default['cq-unix-toolkit']['repository']['revision'] = 'not-merged-features'
BREAKS HERE
-execute 'execute_nginx_generate_tilecache_qos_map' do
-  command '/usr/local/bin/nginx_generate_tilecache_qos_map'
-  creates '/etc/nginx/conf.d/tile_qos_rates.map'
BREAKS HERE
-    STUB_UNITS ||= %w( target ).map(&:to_sym)
BREAKS HERE
-default[:ntp][:servers]   = ["0.pool.ntp.org", "1.pool.ntp.org"]
BREAKS HERE
-
-  des_version = Mixlib::Versioning.parse(desired_version)
BREAKS HERE
-      # @return [String, nil]
-      #   the contents of the file
-      def file
-        File.read(path) if File.exist?(path)
-      end
-
-        @instance ||=
-          if file
-            from_json file
-          else
-            new
-          end
-
-      def from_file(path)
-        new(path)
-      end
-
-      def from_json(json)
-        new.from_json(json)
-      end
-
-      def from_hash(hash)
-        new.from_hash(hash)
-      end
BREAKS HERE
-
BREAKS HERE
-  if compile_time
-    Array(action).each do |action|
-      run_action(action)
-    end
BREAKS HERE
-  default[:ruby][:patch] = 'p545'  # this attribute will disapier in favor of the sematic versioning schema
BREAKS HERE
-            # TODO: support replacing template by defining [config][log4j][source]
-            source 'log4j.properties.erb'
-	  end
BREAKS HERE
-EOF
BREAKS HERE
-require 'chef/log'
-            event_data << "- #{r.to_s} (#{defined_at(r)})\n"
BREAKS HERE
-source_url       'https://github.com/rigrassm/firewalld-cookbook' if respond_to?(:issues_url
-supports         'debian', ">= 8.0" # untested
BREAKS HERE
-include_recipe 'yum-elrepo'
-
BREAKS HERE
-template(config) { source 'folder/config.xml.erb' }
BREAKS HERE
-      contains "cookbook 'minitest-handler'"
BREAKS HERE
-  only_if { File.exist?(node['fb_grub']['_grub_config']) }
-        if current_root_device != root_device
BREAKS HERE
-  if new_resource.name == "Easy Travel"
-	# for EasyTravel 
-  #TODO! easytravel version hardcoded here
-	installation_path_part = "easytravel-2.0.0"
-	installation_last_path_part = "easytravel"
-  else
-	# for Dynatrace
-	installation_path_part = Dynatrace::Helpers.get_install_dir_from_installer(new_resource.installer_path, :jar)
-	installation_last_path_part = "dynatrace"
-	  installation_path = "#{new_resource.installer_prefix_dir}/#{installation_path_part}"
-      res.command get_mv_install_dir_cmd(::File.dirname(new_resource.installer_path) << "/#{installation_path_part}", new_resource.installer_prefix_dir)
-      res = resources("link[Create a symlink of the #{new_resource.name} installation to #{new_resource.installer_prefix_dir}/#{installation_last_path_part}]")
-  link "Create a symlink of the #{new_resource.name} installation to #{new_resource.installer_prefix_dir}/#{installation_last_path_part}" do
-    target_file "#{new_resource.installer_prefix_dir}/#{installation_last_path_part}"
BREAKS HERE
-        # rubocop: disable MethodLength
-        # rubocop: disable AbcSize
-        # rubocop: disable AbcSize
-                )
BREAKS HERE
-      property :password, String, desired_state: false
-
-      #
-      # Override resource's text rendering to remove password information.
-      #
-      # @return [String]
-      #
-      def to_text
-        password.nil? ? super : super.gsub(password, '****************')
-      end
BREAKS HERE
-unless node['audit']['interval'].nil? && !node['audit']['interval']['enabled']
-    only_if { profile_overdue_to_run(p, interval_seconds) }
BREAKS HERE
-directory "the one bundler might write to during a build" do
-  path "#{node['omnibus']['build_user_home']}/.bundle"
-  owner node['omnibus']['build_user']
-  recursive true
BREAKS HERE
-cq_installer "CQ #{node[:cq][:publish][:mode]}" do
-  mode node[:cq][:publish][:mode]
-cq_daemon "CQ #{node[:cq][:publish][:mode]}" do
-  mode node[:cq][:publish][:mode]
BREAKS HERE
-    it "translates the Hash into method-style" do
BREAKS HERE
-require 'ffi_yajl'
-require 'tempfile'
-require 'fileutils'
-require 'chef/log'
-      bp = ::File.join(File.dirname(__FILE__), '../../conf/substitutions.json.example')
-      FileUtils.cp(bp, ::File.join(Dir.pwd, 'substitutions.json'))
-      name_version = components[components.index('cookbooks') + 1]
-      temp_file = Tempfile.new('tidy')
-        File.open(path, 'r') do |file|
-              search = Regexp.new(substitution['pattern'])
-              replace = substitution['replace'].dup
BREAKS HERE
-    node.set[:dynatrace][:collector][:installation][:is_required] = Dynatrace::Helpers.requires_installation?(installer_prefix_dir, installer_path, 'collector', type=:jar)
BREAKS HERE
-  block { node.set['openresty']['persisted_configure_flags'] = configure_flags }
-        node['openresty']['persisted_configure_flags'].sort == configure_flags.sort
BREAKS HERE
-    rescue Solve::Errors::NoSolutionError
-      raise NoSolutionError.new(demands)
BREAKS HERE
-%w{splunk splunkforwarder}.each do |pkg|
BREAKS HERE
-    require_relative 'helpers_installation_package'
-
-    include DockerHelpers::InstallationPackage
-
BREAKS HERE
-    keystone_admin_user = ['keystone']['admin_user']
BREAKS HERE
-default['kibana']['nginx']['auth_path'] = '/etc/nginx/htpasswd.users'
BREAKS HERE
-return if platform?('windows')
-package node['logrotate']['package']['name'] do
-  provider node['logrotate']['package']['provider'] if node['logrotate']['package']['provider']
-  source node['logrotate']['package']['provider'] if node['logrotate']['package']['source']
-  version node['logrotate']['package']['provider'] if node['logrotate']['package']['version']
-directory node['logrotate']['directory'] do
-  owner 'root'
-  group node['root_group']
-  mode '0755'
-cron node['logrotate']['cron']['name'] do
-  minute node['logrotate']['cron']['minute']
-  hour node['logrotate']['cron']['hour']
-  command node['logrotate']['cron']['command']
-  not_if { platform_family?('debian') }
-  not_if { platform_family?('rhel') }
BREAKS HERE
-  gp_prefs = node['cpe_ard'].reject { |_k, v| v.nil? }
-      'PayloadType' => 'com.apple.RemoteManagement',
BREAKS HERE
-      attribute(:log4j, option_collector: true, default: {})
BREAKS HERE
-      load_config
BREAKS HERE
-attribute :month, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid month spec" => lambda { |spec| validate_month(spec,'mon') } }
-attribute :weekday, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid weekday spec" => lambda { |spec| validate_dow(spec,'dow') } }
-    if x.to_i.to_s == x
BREAKS HERE
-if platform_family?('rhel') && node['platform_version'].to_i == 7
-# default['openssh']['server']['password_authentication'] = 'yes'
-default['openssh']['server']['subsystem'] = 'sftp /usr/libexec/openssh/sftp-server' if platform_family?('rhel')
BREAKS HERE
-                fileAppender: new_resource.log4j['fileAppender']
BREAKS HERE
-		not_if { File.exists?("#{node['perl']['install_dir']}\\bin\\perl.exe") }
-	#execute "Add Perl to PATH"
-	#	command "setx /M path \"#{node['perl']['install_dir']}bin;%path%\""
-	#end
-	# Going to try the windows_path primitive
-	windows_path "#{node['perl']['install_dir']}bin" do
-		action :add
-	end	
BREAKS HERE
-      module PoiseTestInversionProviderResolution
-          provides(:poise_test_inversion_provider_resolution)
-          inversion_resource(:poise_test_inversion_provider_resolution)
-        Chef::Platform::ProviderPriorityMap.instance.priority(:poise_test_inversion_provider_resolution, [Provider, OtherProvider])
-          poise_test_inversion_provider_resolution 'test'
-        let(:test_resource) { chef_run.poise_test_inversion_provider_resolution('test') }
-        its(:enabled_handlers) { is_expected.to contain_exactly(PoiseTestInversionProviderResolution::Provider, PoiseTestInversionProviderResolution::OtherProvider) }
-        its(:resolve) { is_expected.to eq PoiseTestInversionProviderResolution::Provider }
-      context 'with a subclassed resource' do
-        resource(:poise_inversion_sub, parent: PoiseTestInversionProviderResolution::Resource, step_into: false) do
-          provides(:poise_inversion_sub)
-        end
-          poise_inversion_sub 'test'
-        let(:test_resource) { chef_run.find_resource(:poise_inversion_sub, 'test') }
-      end # /context with a subclassed resource
-        resource(:poise_inversion_subproviders, parent: PoiseTestInversionProviderResolution::Resource, step_into: false) do
-          include Poise::Helpers::ResourceSubclass
-          provides(:poise_inversion_subproviders)
-          subclass_providers!
-        end
-          poise_inversion_subproviders 'test'
-        let(:test_resource) { chef_run.find_resource(:poise_inversion_subproviders, 'test') }
-        its(:enabled_handlers) { is_expected.to contain_exactly(PoiseTestInversionProviderResolution::Provider, PoiseTestInversionProviderResolution::OtherProvider) }
-        its(:resolve) { is_expected.to eq PoiseTestInversionProviderResolution::Provider }
-          poise_test_inversion_provider_resolution 'test' do
-        let(:test_resource) { chef_run.poise_test_inversion_provider_resolution('test') }
-        its(:resolve) { is_expected.to eq PoiseTestInversionProviderResolution::OtherProvider }
-        provider(:poise_test_inversion_subclass, parent: PoiseTestInversionProviderResolution::Provider) do
-          provides(:inverted_subclass)
-        end
-          node.run_state['poise_inversion'][:poise_test_inversion_provider_resolution] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion_provider_resolution]['test'] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion_provider_resolution]['test']['*'] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion_provider_resolution]['test']['*']['provider'] = :inverted_subclass
-          poise_test_inversion_provider_resolution 'test'
-        let(:test_resource) { chef_run.poise_test_inversion_provider_resolution('test') }
-        its(:resolve) { is_expected.to eq provider(:poise_test_inversion_subclass) }
BREAKS HERE
-          install_gem_from_rubygems('mixlib-install', '~> 2.0')
BREAKS HERE
-    notifies :restart, resources(:service => node['rabbitmq']['service_name'])
BREAKS HERE
-version          "1.7.1"
BREAKS HERE
-    # rubocop:disable Metrics/ParameterLists
-      # rubocop:enable Metrics/ParameterLists
BREAKS HERE
-      upstream conf['upstrea']
BREAKS HERE
-default['openstack']['network']['fwaas']['enabled'] = 'True'
-# Custom plugin to support new interface drivers.
-default['openstack']['network']['lbaas']['custom_interface_driver'] = nil
-
-# Using veth pairs for OVS based plugins.
-default['openstack']['network']['lbaas']['ovs_use_veth'] = 'False'
BREAKS HERE
-at_exit { ChefSpec::Coverage.report! }
BREAKS HERE
-default['dovecot']['install_method'] = 'package'
BREAKS HERE
-depends 'mysql', '~> 5.3'
BREAKS HERE
-    return true if %w(jan feb mar apry may jun jul aug sep oct nov dec).include? spec.downcase
BREAKS HERE
-      attribute(:log4j, option_collector: true, default: {
-        :customized => false,
-        :fileAppender => 'org.apache.log4j.RollingFileAppender',
-        :maxFileSize => '50MB',
-        :maxNumFiles => '20',
-        :level => {
-          :root => 'INFO',
-          :kafka => 'INFO',
-          :"kafka.network.RequestChannel" => 'WARN',
-          :"kafka.network.Processor" => 'WARN',
-          :"kafka.request.logger" => 'WARN',
-          :"kafka.controller" => 'TRACE',
-          :"kafka.log.LogCleaner" => 'INFO',
-          :"state.change.logger" => 'TRACE'
-        }
-      })
BREAKS HERE
-    # List taken from: http://wiki.opscode.com/display/chef/Chef+Configuration+Settings
-    # Listed in order of preferred preference
-    KNIFE_LOCATIONS = [
-      './.chef/knife.rb',
-      '~/.chef/knife.rb',
-      '/etc/chef/solo.rb',
-      '/etc/chef/client.rb'
-    ].freeze
-
-      def chef_config_path
-        @chef_config_path ||= begin
-          possibles = KNIFE_LOCATIONS.dup
-
-          unless ENV['BERKSHELF_CHEF_CONFIG'].nil?
-            possibles.unshift(ENV['BERKSHELF_CHEF_CONFIG'])
-          end
-
-          location = possibles.find do |location|
-            File.exists?(File.expand_path(location))
-          end
-          location ||= "~/.chef/knife.rb"
-
-          File.expand_path(location)
-        end
-      end
-
-      # @param [String] value
-      def chef_config_path=(value)
-        @chef_config = nil
-        @chef_config_path = value
-      end
-
-      # @return [Chef::Config]
-      def chef_config
-        @chef_config ||= begin
-          Berkshelf::Chef::Config.from_file(File.expand_path(chef_config_path))
-          Berkshelf::Chef::Config
-        rescue
-          Berkshelf::Chef::Config
-        end
-      end
-
-      # @return [String, nil]
-      default: chef_config[:chef_server_url]
-      default: chef_config[:validation_client_name]
-      default: chef_config[:validation_key]
-      default: chef_config[:client_key]
-      default: chef_config[:node_name]
-      default: chef_config[:cookbook_copyright]
-      default: chef_config[:cookbook_email]
-      default: chef_config[:cookbook_license]
BREAKS HERE
-default['rvm']['default_ruby']      = "ruby-1.9.3-p327"
-default['rvm']['user_default_ruby'] = "ruby-1.9.3-p327"
BREAKS HERE
-template '/etc/default/libvirt-bin' do
BREAKS HERE
-  # Attempt to find the specific endpoint ('internal', 'admin', or
-    node['openstack']['endpoints'][type][name]
BREAKS HERE
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-service_tenant_name = node['openstack']['orchestration']['service_tenant_name']
-service_user = node['openstack']['orchestration']['service_user']
-region = node['openstack']['orchestration']['region']
-stack_user_role = node['openstack']['orchestration']['heat_stack_user_role']
-
-## Create role for heat template defined users ##
-openstack_identity_register "Create '#{stack_user_role}' Role for template defined users" do
-  auth_uri auth_url
-  bootstrap_token token
-  role_name stack_user_role
-
-  action :create_role
-  not_if { stack_user_role.nil? }
-end
-
-stack_user_domain_name = node['openstack']['orchestration']['stack_user_domain_name']
-stack_domain_admin = node['openstack']['orchestration']['stack_domain_admin']
-
-if !stack_user_role.nil? && !stack_user_domain_name.nil? && !stack_domain_admin.nil?
-  stack_domain_admin_password = get_password 'user', stack_domain_admin
-  admin_user = node['openstack']['identity']['admin_user']
-  admin_pass = get_password 'user', admin_user
-  ca_cert = node['openstack']['orchestration']['clients']['ca_file']
-  cert_file = node['openstack']['orchestration']['clients']['cert_file']
-  key_file = node['openstack']['orchestration']['clients']['key_file']
-  insecure = node['openstack']['orchestration']['clients']['insecure'] && '--insecure' || ''
-
-  execute 'heat-keystone-setup-domain' do
-    environment 'OS_USERNAME' => admin_user,
-                'OS_PASSWORD' => admin_pass,
-                'OS_AUTH_URL' => auth_url,
-                'OS_CACERT' => ca_cert,
-                'OS_CERT' => cert_file,
-                'OS_KEY' => key_file,
-                'HEAT_DOMAIN' => stack_user_domain_name,
-                'HEAT_DOMAIN_ADMIN' => stack_domain_admin,
-                'HEAT_DOMAIN_PASSWORD' => stack_domain_admin_password
-    command "heat-keystone-setup-domain #{insecure}"
-  end
-end
BREAKS HERE
-          elsif node['platform'] == 'ubuntu' &&
-              node[:td_agent][:version] !~ /^1\./
BREAKS HERE
-          %w(debug verbose lock_path notification_driver
-        it 'has a sql_connection attribute' do
-          expect(chef_run).to render_file(file.name)
-            .with_content(/^sql_connection=sql_connection_value$/)
-           /^rpc_conn_pool_size=30$/,
-           /^rpc_response_timeout=60$/,
-           /^amqp_durable_queues=false$/,
-           /^amqp_auto_delete=false$/].each do |line|
-              expect(chef_run).to render_file(file.name).with_content(/^rabbit_hosts=rabbit_servers_value$/)
-                expect(chef_run).not_to render_file(file.name).with_content(/^rabbit_#{attr}=/)
-                expect(chef_run).to render_file(file.name).with_content(/^rabbit_#{attr}=rabbit_#{attr}_value$/)
-              expect(chef_run).not_to render_file(file.name).with_content(/^rabbit_hosts=/)
-              expect(chef_run).to render_file(file.name).with_content(/^rabbit_#{attr}=rabbit_#{attr}_value$/)
-            expect(chef_run).to render_file(file.name).with_content(/^rabbit_password=#{test_pass}$/)
-            expect(chef_run).to render_file(file.name).with_content(/^rabbit_virtual_host=vhost_value$/)
-            expect(chef_run).not_to render_config_file(file.name).with_section_content('DEFAULT', /^kombu_ssl_version=TLSv1.2$/)
-            expect(chef_run).to render_config_file(file.name).with_section_content('DEFAULT', /^kombu_ssl_version=TLSv1.2$/)
-              expect(chef_run).to render_file(file.name).with_content(/^qpid_#{attr}=qpid_#{attr}_value$/)
-            expect(chef_run).to render_file(file.name).with_content(/^qpid_hostname=qpid_host_value$/)
-            expect(chef_run).to render_file(file.name).with_content(/^qpid_password=#{test_pass}$/)
-            expect(chef_run).to render_file(file.name).with_content(/^qpid_topology_version=1$/)
-            expect(chef_run).to render_file(file.name).with_content(/^notification_topics=qpid_notification_topic_value$/)
BREAKS HERE
-         )
-      
BREAKS HERE
-  #get the cookbook attributes if there are any
-  if recipe != cookbook and node[cookbook] and node[cookbook]['firewall'] and node[cookbook]['firewall']['rules']
-  #get the recipe attributes if there are any
-  if node[recipe] and node[recipe]['firewall'] and node[recipe]['firewall']['rules']
-#now go apply the rules
-include_recipe "ufw::default"
BREAKS HERE
-# 
-# 
-    wget http://nodejs.org/dist/v#{node[:nodejs][:version]}/node-v#{node[:nodejs][:version]}.tar.gz && \
BREAKS HERE
-  cmd = shell_out!('pm2 list', :user => new_resouce.user, :returns => 0)
BREAKS HERE
-  deamon_process 'gnocchi-api'
BREAKS HERE
-version          '17.0.0'
-depends 'openstack-common', '>= 17.0.0'
-depends 'openstack-identity', '>= 17.0.0'
BREAKS HERE
-      Chef::Application.fatal!("[rabbitmq_cluster] #{err}")
-    join_cluster(var_node_name_to_join, var_node_type)
-    run_rabbitmqctl('start_app')
BREAKS HERE
-node.default["kafka"]["initservice"]["stdout"] = node["kafka"]["initservice"]["stdout"] || File.join node["kafka"]["log_dir"], "kafka_init_stdout.log"
-node.default["kafka"]["initservice"]["stderr"] = node["kafka"]["initservice"]["stderr"] || File.join node["kafka"]["log_dir"], "kafka_init_stderr.log"
BREAKS HERE
-case node['platform_family']
-when 'rhel'
-  default['rsyncd']['service'] = 'rsyncd'
-when 'debian'
-  default['rsyncd']['service'] = 'rsync'
-else
-  default['rsyncd']['service'] = 'rsyncd'
-end
BREAKS HERE
-        environment 'SAN' => "IP:#{etcd_master['ipaddress']}"
BREAKS HERE
-depends 'rabbitmq', '~> 3.9.0'
BREAKS HERE
-  "job-dispatch": {
BREAKS HERE
-    chef_config.config_file = Chef::Knife.locate_config_file
BREAKS HERE
-  default[:ruby][:patch_version] = '0'
-  default[:ruby][:patch] = 'p353'
-  default[:ruby][:patch] = 'p484'
BREAKS HERE
-  role_name service_role
-  role_name 'admin'
BREAKS HERE
-    JOB_ROOT    ||= '/etc/nomad-jobs.d'
BREAKS HERE
-  mode 00640
-  mode 00640
-  mode 00640
-      mode 00750
-  mode 00755
-  mode 00755
BREAKS HERE
-# we no longer support loading with a gem
-  raise "using compat_resource as a gem is deprecated;  please update your gems to cheffish >= 3.0.0 and chef-provisioning >= 1.9.1 to eliminate it"
-# The gem is not already activated, so activate the cookbook.
BREAKS HERE
-  action %i(install sign_in)
BREAKS HERE
-default['openstack']['mq']['bind_interface'] = 'lo'
BREAKS HERE
-  class NotFound < RuntimeError; end
-
-      @rc_path ||= ["soloistrc", ".soloistrc"].detect do |file_name|
-        spotlight.search_for(file_name)
-      end.tap do |path|
-        raise Soloist::NotFound.new("Could not find soloistrc") unless path
-      end
-    end
-
-    def spotlight
-      @spotlight ||= Soloist::Spotlight.new(Dir.pwd)
BREAKS HERE
-              default: lazy do |new_resource|
-                "Jenkins slave #{new_resource.slave_name}"
-              end
BREAKS HERE
-
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
BREAKS HERE
-          current_version = Gem::Version.new(current_resource.version)
-          new_version     = Gem::Version.new(new_resource.version)
-      installed_version = local_plugin_data ? Gem::Version.new(local_plugin_data['plugin_version']) : nil
-      latest_version    = Gem::Version.new(remote_plugin_data['version'])
-      desired_version   = (plugin_version.to_sym == :latest) ? latest_version : Gem::Version.new(plugin_version)
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
-depends 'openstack-image', '>= 16.0.0'
-depends 'openstack-network', '>= 16.0.0'
BREAKS HERE
-include_recipe 'rabbitmq::mgmt_console'
BREAKS HERE
-      Chef::Application.fatal!("[rabbitmq_cluster] #{err}")
-    join_cluster(var_node_name_to_join, var_node_type)
-    run_rabbitmqctl('start_app')
BREAKS HERE
-      # @option options [Integer] :size (12)
-      #   size of the upload pool
-      # @return [Ridley::SandboxResource]
-      def create(client, checksums = [], options = {})
-        options.reverse_merge!(size: 12)
-
-        attrs = client.connection.post("sandboxes", sumhash.to_json).body
-        pool(size: options[:size], args: [client, attrs[:sandbox_id], attrs[:checksums]])
-      # Checksum the file at the given filepath for a Chef API.
-    include Celluloid
-    attr_reader :sandbox_id
-    attr_reader :checksums
-    def initialize(client, id, checksums)
-      @client     = client
-      @sandbox_id = id
-      @checksums  = checksums
BREAKS HERE
-      stub_request(:get, ::File.join(api_uri, "nginx")).
-      stub_request(:get, ::File.join(api_uri, "not_existant")).
-      stub_request(:get, ::File.join(api_uri, "not_existant")).
-      stub_request(:get, ::File.join(api_uri, "nginx")).
-      stub_request(:get, ::File.join(api_uri, "not_existant")).
-      stub_request(:get, ::File.join(api_uri, "not_existant")).
-      stub_request(:get, ::File.join(api_uri, "nginx")).
BREAKS HERE
-  hadoop_config('hadoop', 'hdfs_site', 'dfs.datanode.data.dir.perm', 'dfs.data.dir.perm', '0700')
BREAKS HERE
-      verify_licenses!
-    def verify_licenses!
BREAKS HERE
-            powershell_out("openssl pkcs12 -in #{source} -nodes -passin pass:#{new_resource.pfx_password}").stdout
BREAKS HERE
-if node.sensu.ssl
-if node.platform == "ubuntu" && %w[10.04 10.10 11.04].include?(node.lsb.release)
-  include_recipe "apt"
-
-  apt_repository "esl" do
-    uri "http://binaries.erlang-solutions.com/debian"
-    distribution node.lsb.codename
-    components ["contrib"]
-    key "http://binaries.erlang-solutions.com/debian/erlang_solutions.asc"
-    action :add
-  end
-  package "esl-erlang"
-else
-  include_recipe "erlang"
-include_recipe "rabbitmq"
-
BREAKS HERE
-    only_if { node['platform_version'] == 'debian' && node['platform_version'].to_i >= 16 }
BREAKS HERE
-default['dynatrace']['collector']['linux']['installer']['file_url'] = 'http://files.dynatrace.com/downloads/OnPrem/dynaTrace/6.5/6.5.0.1289/dynatrace-collector-6.5.0.1289-linux-x86.jar'
BREAKS HERE
-package "libwww-perl" do
-  case node[:platform]
-  when "centos"
-    package_name "perl-libwww-perl"
-    package_name "perl-libwww"
-package "libperl-dev" do
-  case node[:platform]
-  when "centos","arch"
-    action :nothing
-    action :upgrade
-end
-  case node[:platform]
-  when "centos","redhat"
-    path "/usr/lib/perl5/5.8.8/CPAN/Config.pm"
-  when "arch"
-    path "/usr/share/perl5/core_perl/CPAN/Config.pm"
-  else
-    path "/etc/perl/CPAN/Config.pm"
-  end
BREAKS HERE
-require 'spec_helper'
-      body_response = %Q{{"ruby":{"1.2.3":{"endpoint_priority":0,"platforms":{},"dependencies":{"build-essential":">= 1.2.2"},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"},"2.0.0":{"endpoint_priority":0,"platforms":{},"dependencies":{"build-essential":">= 1.2.2"},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"}},"elixir":{"1.0.0":{"endpoint_priority":0,"platforms":{"CentOS":"= 6.0.0"},"dependencies":{},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"}}}}
-       stub_request(:get, "http://supermarket.getchef.com/universe")
-         .to_return(status: 200, body: body_response, headers: { "Content-Type" => "application/json; charset=utf-8" })
-      stub_request(:get, "http://supermarket.getchef.com/universe").to_return(:status => 301, :headers => { 'Location' => "http://arglebargle.com/universe" })
-      body_response = %Q{{"ruby":{"1.2.3":{"endpoint_priority":0,"platforms":{},"dependencies":{"build-essential":">= 1.2.2"},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"},"2.0.0":{"endpoint_priority":0,"platforms":{},"dependencies":{"build-essential":">= 1.2.2"},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"}},"elixir":{"1.0.0":{"endpoint_priority":0,"platforms":{"CentOS":"= 6.0.0"},"dependencies":{},"location_type":"supermarket","location_path":"https://supermarket.getchef.com/"}}}}
BREAKS HERE
-# Copyright 2012, Opscode, Inc.
BREAKS HERE
-      notifies :create, "ruby_block[yum-cache-reload-#{filename}]", :immediately
BREAKS HERE
-      #{%q{service "httpd" do
-        action :enable
-      end} if arity.include?('multiple')}
BREAKS HERE
-      c[:alpha] = 'omega'
-    IO.stub(:read).with('config.rb').and_return("alpha = 'omega'\nfoo = 'bar'")
-      ConfigIt.from_file('config.rb')
-    IO.stub(:read).with('config.rb').and_return("@#asdf")
-      ConfigIt.from_file('config.rb')
-    ConfigIt[:alpha].should == 'omega'
-    ConfigIt['alpha'].should == 'omega'
-    ConfigIt['alpha'] = "one"
-    {:cookbook_path => "monkey_rabbit", :otherthing => "boo"}.each do |k,v|
-      IO.stub(:read).with('config.rb').and_return("test_method 99")
-      @klass.from_file('config.rb')
-      it 'Normal classes call the extra method' do
-      it 'Configurables with the same name as the extra method can be set' do
-      it 'Configurables with the same name as the extra method can be retrieved' do
-        default(:attr) { x*2 }
-      @klass.attr << 'x'
-      @klass.attr.should == [ 'x' ]
-      @klass.attr << 'x'
-      (saved = @klass.save).should == { :attr => [ 'x' ] }
-      @klass.attr.should == [ 'x' ]
-      @klass.attr[:hi] = 'lo'
-      (saved = @klass.save).should == { :attr => { :hi => 'lo' } }
-      @klass.save.should == { :attr => { :hi => 'lo' } }
-      @klass.class_eval { default :attr, 'hello' }
-      @klass.attr << ' world'
-      @klass.attr.should == 'hello world'
-      @klass.attr.should == 'hello'
-      @klass.save(true).should == { :attr => 'hello' }
-      @klass.attr << ' world'
-      (saved = @klass.save).should == { :attr => 'hello world' }
-      @klass.attr.should == 'hello'
-      @klass.attr.should == 'hello world'
-      @klass.attr 'hello world'
-      (saved = @klass.save).should == { :attr => 'hello world' }
-      @klass.save.should == { :attr => 'hello world' }
-          c.writes_value { |value| value*2 }
-        configurable(:attr).defaults_to(4).writes_value { |value| value*2 }
BREAKS HERE
-          :host_name, arg,
BREAKS HERE
-when '2.2.1.0', '2.2.4.2', '2.2.4.4', '2.2.6.0', '2.2.6.3', '2.2.8.0', '2.2.9.0', '2.3.0.0', '2.3.2.0', '2.3.4.0', '2.3.4.7', '2.3.6.0', '2.4.0.0', '2.4.2.0', '2.4.3.0', '2.5.0.0', '2.5.3.0', '2.6.0.3'
BREAKS HERE
-          c:/opscode/chef/bin/chef-client.bat
BREAKS HERE
-        if @@logger
-          @@logger.info(msg)
-        end
-        if @@logger
-          @@logger.debug(msg)
-        end
BREAKS HERE
-# frozen_string_literal: true
-
BREAKS HERE
-              kind_of: String
BREAKS HERE
-  notifies :restart, 'service[systemd-logind]', :delayed
BREAKS HERE
-rest_user = node['dynatrace']['server']['username']
-rest_pass = node['dynatrace']['server']['password']
-
BREAKS HERE
-  not_if { ::File.exists?(extract_path) }
BREAKS HERE
-	  if not new_resource.log4j['customized']
-            template ::File.join(config_directory, 'log4j.properties') do
-              # todo: support replacing template by defining [config][log4j][source]
-              source 'log4j.properties.erb'
-	      owner new_resource.owner
-	      group new_resource.group
-	      mode '0644'
-	      variables({
-                loggerLevelRoot: new_resource.log4j['level']['root'],
-                loggerLevelKafka: new_resource.log4j['level']['kafka'],
-                loggerLevelKafkaNetworkRequestChannel: new_resource.log4j['level']['kafka.network.RequestChannel'],
-                loggerLevelKafkaNetworkProcessor: new_resource.log4j['level']['kafka.network.Processor'],
-                loggerLevelKafkaRequestLogger: new_resource.log4j['level']['kafka.request.logger'],
-                loggerLevelKafkaController: new_resource.log4j['level']['kafka.controller'],
-                loggerLevelKafkaLogCleaner: new_resource.log4j['level']['kafka.log.LogCleaner'],
-                loggerLevelStateChangeLogger: new_resource.log4j['level']['state.change.logger'],
-                fileAppender: new_resource.log4j['fileAppender'],
-                maxFileSize: new_resource.log4j['maxFileSize'],
-                maxNumFiles: new_resource.log4j['maxNumFiles']
-	      })
-	    end
-          end
BREAKS HERE
-    fail %(
BREAKS HERE
-  provider node['kibana']['service']['provider']
BREAKS HERE
-  only_if "egrep 'exec.*nova$' /etc/init/nova-vncproxy.conf"
BREAKS HERE
-  chef_gem "versionomy" do
-    version "0.4.4"
-    action :install
-  end
BREAKS HERE
-    property :group, [String, nil]
-    property :mount_flags, String
BREAKS HERE
-end
BREAKS HERE
-        'log_dir'              =>  node['nginx']['directories']['log_dir']
BREAKS HERE
-      cookbook = berksfile.retrieve_locked(berksfile.find!(name))
BREAKS HERE
-  unless version =~ /\d+.\d+.\d+/ # rubocop:disable Style/GuardClause
-    fail
-    fail
-    fail
BREAKS HERE
-node.force_default['ambari']['mysql_root_password'] = get_config('mysql-root-password') || get_config('password', 'mysql-root', 'os')
BREAKS HERE
-<<<<<<< HEAD
-root_group = value_for_platform(
-  "openbsd" => { "default" => "wheel" },
-  "freebsd" => { "default" => "wheel" },
-  "default" => "root"
-)
-
-include_recipe "chef::client"
-
-%w{chef-solr chef-solr-indexer chef-server}.each do |svc|
-  service svc do
-    action :nothing
-  end
-end
-
-if node[:chef][:webui_enabled]
-  service "chef-server-webui" do
-    action :nothing
-  end
-end
-
-template "/etc/chef/server.rb" do
-  source "server.rb.erb"
-  owner "root"
-  group root_group
-  mode "644"
-  if node[:chef][:webui_enabled]
-    notifies :restart, resources( :service => [ "chef-solr", "chef-solr-indexer", "chef-server", "chef-server-webui" ]), :delayed
-  else
-    notifies :restart, resources( :service => [ "chef-solr", "chef-solr-indexer", "chef-server" ]), :delayed
-  end
-end
-
-=======
->>>>>>> Refactoring chef -> chef-server cookbook
BREAKS HERE
-    '\'X-Powered-By\''
-    'X-XSS-Protection "1; mode=block"'
-  ]
BREAKS HERE
-master_servers = node['cookbook-openshift3']['master_servers']
BREAKS HERE
-  default['git']['osx_dmg']['url']         = 'http://sourceforge.net/projects/git-osx-installer/files/git-2.7.1-intel-universal-maverick.dmg/download'
BREAKS HERE
-# use to stub commands or files or other ruby calls
-# e.g. stub_command('/usr/sbin/httpd -t').and_return(0)
-  stub_command('/usr/sbin/foo').and_return(0)
BREAKS HERE
-      request['User-Agent'] = Chef::REST::RESTRequest.user_agent
BREAKS HERE
-	log "Url: #{url}/#{version}/#{basedirdeb}/"
-	  uri "#{url}/#{version}/#{basedirdeb}/"
-end
BREAKS HERE
-   stack << "eval $(perl -Mlocal::lib=#{real_install_base}); "
BREAKS HERE
-include_attribute 'opsworks_commons::default'
-default[:ganglia][:custom_package_version] = '3.3.8-1'
-default[:ganglia][:opsworks_autofs_map_file] = '/etc/auto.opsworks'
-case node[:platform]
-when 'debian','ubuntu'
-  default[:ganglia][:web][:apache_user]  = 'www-data'
-  default[:ganglia][:web][:apache_group] = 'www-data'
-when 'centos','redhat','fedora','amazon'
-  default[:ganglia][:web][:apache_user]  = 'apache'
-  default[:ganglia][:web][:apache_group] = 'apache'
-end
-default[:ganglia][:web][:svn] = 'no'
-default[:ganglia][:web][:url] = '/ganglia'
-default[:ganglia][:web][:user] = 'opsworks'
-# gweb2 Makefile config
-default[:ganglia][:web][:destdir] = '/usr/share/ganglia-webfrontend'
-pw = String.new
-while pw.length < 20
-  pw << OpenSSL::Random.random_bytes(1).gsub(/\W/, '')
-end
-default[:ganglia][:web][:password] = pw
BREAKS HERE
-        { platform: platform["value"], versions: versions }
BREAKS HERE
-version          '8.3.1'
BREAKS HERE
-  if lines.nil?
BREAKS HERE
-          :severity, arg,
BREAKS HERE
-    define_method("#{actn_}_systemd_machine_image".to_sym) do |resource_name|
BREAKS HERE
-  unless system("rabbitmq-plugins list #{new_resource.plugin} | grep '\\[[Ee]\\] #{new_resource.plugin}'")
-  if system("rabbitmq-plugins list #{new_resource.plugin} | grep '\\[[Ee]\\] #{new_resource.plugin}'")
BREAKS HERE
-default["chef_client"]["report_handlers"] = {}
-default["chef_client"]["exception_handlers"] = {}
BREAKS HERE
-  port 8080
BREAKS HERE
-          ::File.exist?("/etc/systemd/system/#{conf['name']}.#{type}")
BREAKS HERE
-          @sv_dir = nil
-          @run_script = nil
-          @log_dir = nil
-          @log_main_dir = nil
-          @default_log_dir = nil
-          @log_run_script = nil
-          @log_config_file = nil
-          @env_dir = nil
-          @env_files = nil
-          @check_script = nil
-          @finish_script = nil
-          @control_dir = nil
-          @control_signal_files = nil
-          @lsb_init = nil
-          @service_link = nil
-          @new_resource.supports[:status] = true
-          @current_resource.service_name(new_resource.service_name)
-          @current_resource.running(running?)
-          @current_resource.enabled(enabled?)
-          @current_resource.env(get_current_env)
-          @current_resource
-          Chef::Log.info("#{@new_resource} configured")
-          Chef::Log.info("#{@new_resource} configured")
-          if @current_resource.enabled
-            Chef::Log.debug("#{@new_resource} already enabled - nothing to do")
-            Chef::Log.info("#{@new_resource} enabled")
-          @new_resource.enabled(true)
-          restart_service if @new_resource.restart_on_update && run_script.updated_by_last_action?
-          restart_log_service if @new_resource.restart_on_update && log_run_script.updated_by_last_action?
-          restart_log_service if @new_resource.restart_on_update && log_config_file.updated_by_last_action?
-            if @current_resource.running
-            if @current_resource.running
-          return @sv_dir unless @sv_dir.nil?
-          @sv_dir = Chef::Resource::Directory.new(sv_dir_name, run_context)
-          @sv_dir.recursive(true)
-          @sv_dir.owner(new_resource.owner)
-          @sv_dir.group(new_resource.group)
-          @sv_dir.mode(00755)
-          @sv_dir
-          return @run_script unless @run_script.nil?
-          @run_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'run'), run_context)
-          @run_script.owner(new_resource.owner)
-          @run_script.group(new_resource.group)
-          @run_script.source("sv-#{new_resource.run_template_name}-run.erb")
-          @run_script.cookbook(template_cookbook)
-          @run_script.mode(00755)
-          @run_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @run_script
-          return @log_dir unless @log_dir.nil?
-          @log_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log'), run_context)
-          @log_dir.recursive(true)
-          @log_dir.owner(new_resource.owner)
-          @log_dir.group(new_resource.group)
-          @log_dir.mode(00755)
-          @log_dir
-          return @log_main_dir unless @log_main_dir.nil?
-          @log_main_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log', 'main'), run_context)
-          @log_main_dir.recursive(true)
-          @log_main_dir.owner(new_resource.owner)
-          @log_main_dir.group(new_resource.group)
-          @log_main_dir.mode(00755)
-          @log_main_dir
-          return @default_log_dir unless @default_log_dir.nil?
-          @default_log_dir = Chef::Resource::Directory.new(::File.join("/var/log/#{new_resource.service_name}"), run_context)
-          @default_log_dir.recursive(true)
-          @default_log_dir.owner(new_resource.owner)
-          @default_log_dir.group(new_resource.group)
-          @default_log_dir.mode(00755)
-          @default_log_dir
-          return @log_run_script unless @log_run_script.nil?
-          if new_resource.default_logger
-            @log_run_script = Chef::Resource::File.new(
-              ::File.join(sv_dir_name, 'log', 'run'),
-              run_context
-            )
-            @log_run_script.content(default_logger_content)
-            @log_run_script.owner(new_resource.owner)
-            @log_run_script.group(new_resource.group)
-            @log_run_script.mode(00755)
-          else
-            @log_run_script = Chef::Resource::Template.new(
-              ::File.join(sv_dir_name, 'log', 'run'),
-              run_context
-            )
-            @log_run_script.owner(new_resource.owner)
-            @log_run_script.group(new_resource.group)
-            @log_run_script.mode(00755)
-            @log_run_script.source("sv-#{new_resource.log_template_name}-log-run.erb")
-            @log_run_script.cookbook(template_cookbook)
-            @log_run_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          end
-          @log_run_script
-          return @log_config_file unless @log_config_file.nil?
-          @log_config_file = Chef::Resource::Template.new(::File.join(sv_dir_name, 'log', 'config'), run_context)
-          @log_config_file.owner(new_resource.owner)
-          @log_config_file.group(new_resource.group)
-          @log_config_file.mode(00644)
-          @log_config_file.cookbook('runit')
-          @log_config_file.source('log-config.erb')
-          @log_config_file.variables(
-            :size => new_resource.log_size,
-            :num => new_resource.log_num,
-            :min => new_resource.log_min,
-            :timeout => new_resource.log_timeout,
-            :processor => new_resource.log_processor,
-            :socket => new_resource.log_socket,
-            :prefix => new_resource.log_prefix,
-            :append => new_resource.log_config_append
-          )
-          @log_config_file
-          return @env_dir unless @env_dir.nil?
-          @env_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'), run_context)
-          @env_dir.owner(new_resource.owner)
-          @env_dir.group(new_resource.group)
-          @env_dir.mode(00755)
-          @env_dir
-          return @env_files unless @env_files.nil?
-          create_files = new_resource.env.map do |var, value|
-            env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', var), run_context)
-            env_file.owner(new_resource.owner)
-            env_file.group(new_resource.group)
-            env_file.content(value)
-            env_file.action(:create)
-            env_file
-          end
-          extra_env = @current_resource.env.reject { |k,_| new_resource.env.key?(k) }
-          delete_files = extra_env.map do |k,_|
-            env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', k), run_context)
-            env_file.action(:delete)
-            env_file
-          end
-          @env_files = create_files + delete_files
-          @env_files
-          return @check_script unless @check_script.nil?
-          @check_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'check'), run_context)
-          @check_script.owner(new_resource.owner)
-          @check_script.group(new_resource.group)
-          @check_script.source("sv-#{new_resource.check_script_template_name}-check.erb")
-          @check_script.cookbook(template_cookbook)
-          @check_script.mode(00755)
-          @check_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @check_script
-          return @finish_script unless @finish_script.nil?
-          @finish_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'finish'), run_context)
-          @finish_script.owner(new_resource.owner)
-          @finish_script.group(new_resource.group)
-          @finish_script.mode(00755)
-          @finish_script.source("sv-#{new_resource.finish_script_template_name}-finish.erb")
-          @finish_script.cookbook(template_cookbook)
-          @finish_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @finish_script
-          return @control_dir unless @control_dir.nil?
-          @control_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'control'), run_context)
-          @control_dir.owner(new_resource.owner)
-          @control_dir.group(new_resource.group)
-          @control_dir.mode(00755)
-          @control_dir
-          return @control_signal_files unless @control_signal_files.nil?
-          @control_signal_files = new_resource.control.map do |signal|
-            control_signal_file = Chef::Resource::Template.new(
-              ::File.join(sv_dir_name, 'control', signal),
-              run_context
-            )
-            control_signal_file.owner(new_resource.owner)
-            control_signal_file.group(new_resource.group)
-            control_signal_file.mode(00755)
-            control_signal_file.source("sv-#{new_resource.control_template_names[signal]}-#{signal}.erb")
-            control_signal_file.cookbook(template_cookbook)
-            control_signal_file.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-            control_signal_file
-          end
-          @control_signal_files
-          return @lsb_init unless @lsb_init.nil?
-          initfile = ::File.join(new_resource.lsb_init_dir, new_resource.service_name)
-          if node['platform'] == 'debian'
-            ::File.unlink(initfile) if ::File.symlink?(initfile)
-            @lsb_init = Chef::Resource::Template.new(initfile, run_context)
-            @lsb_init.owner('root')
-            @lsb_init.group('root')
-            @lsb_init.mode(00755)
-            @lsb_init.cookbook('runit')
-            @lsb_init.source('init.d.erb')
-            @lsb_init.variables(:name => new_resource.service_name)
-          else
-            @lsb_init = Chef::Resource::Link.new(initfile, run_context)
-            @lsb_init.to(new_resource.sv_bin)
-          end
-          @lsb_init
-          return @service_link unless @service_link.nil?
-          @service_link = Chef::Resource::Link.new(::File.join(service_dir_name), run_context)
-          @service_link.to(sv_dir_name)
-          @service_link
BREAKS HERE
-  %w( unzip default-jre-headless libcurl3 ).each do |pkg|
BREAKS HERE
-%w(python-software-properties python g++ make nodejs).each do |p|
-  package p
BREAKS HERE
-  gid        403
-  uid      403
BREAKS HERE
-if node['postfix']['use_alias_maps']
-  include_recipe 'postfix::aliases'
-end
-if node['postfix']['use_transport_maps']
-  include_recipe 'postfix::transports'
-end
-if node['postfix']['use_access_maps']
-  include_recipe 'postfix::access'
-end
-
BREAKS HERE
-        # TODO this will need to be updated when chef-zero supports erchef paths (policy_group vs policies)
BREAKS HERE
-    variables new_resource.to_hash
BREAKS HERE
-      def rsync(source_path, target_path, extra_opts = '--delete')
BREAKS HERE
-  only_if { platform_family?('rhel')
BREAKS HERE
-          $windows_kernel_version = (Get-WmiObject -class Win32_OperatingSystem).Version
-          if (-Not ($windows_kernel_version.Contains('6.0') -or $windows_kernel_version.Contains('6.1'))) {
-            Get-Service EventLog | Restart-Service -Force
-          }
-
BREAKS HERE
-
BREAKS HERE
-    %w( name@http://chef.example.com/org name@http://chef.example.com/org2 )
BREAKS HERE
-  default['openstack']['endpoints']['identity'][ep_type]['host'] = '127.0.0.1'
-  default['openstack']['endpoints']['identity'][ep_type]['scheme'] = 'http'
-  default['openstack']['endpoints']['identity'][ep_type]['path'] = '/v2.0'
-  default['openstack']['bind_service']['identity'][ep_type]['host'] = '127.0.0.1'
-  default['openstack'][type]['identity']['public']['port'] = 5000
-  default['openstack'][type]['identity']['internal']['port'] = 5001
-  default['openstack'][type]['identity']['admin']['port'] = 35357
BREAKS HERE
-require 'spiceweasel/version'
-
-class Spiceweasel::CLI
-  include Mixlib::CLI
-
-  banner('Usage: spiceweasel [option] file\n       spiceweasel [option] --extractlocal')
-
-  option :extractlocal,
-  :long => '--extractlocal',
-  :description => 'Use contents of local chef repository directories to generate knife commands to build infrastructure'
-
-  option :extractjson,
-  :long => '--extractjson',
-  :description => 'Use contents of local chef repository directories to generate JSON spiceweasel manifest'
-
-  option :extractyaml,
-  :long => '--extractyaml',
-  :description => 'Use contents of local chef repository directories to generate YAML spiceweasel manifest'
-
-  option :debug,
-  :long => '--debug',
-  :description => 'Verbose debugging messages',
-  :boolean => true
-
-  option :delete,
-  :short => '-d',
-  :long => '--delete',
-  :description => 'Print the knife commands to delete the infrastructure',
-  :boolean => true
-
-  option :dryrun,
-  :long => '--dryrun',
-  :description => 'Print the knife commands to be executed to STDOUT',
-  :boolean => true
-
-  option :help,
-  :short => '-h',
-  :long => '--help',
-  :description => 'Show this message',
-  :on => :tail,
-  :boolean => true,
-  :show_options => true,
-  :exit => 0
-
-  option :serverurl,
-  :short => '-s URL',
-  :long => '--server-url URL',
-  :description => 'Specify the Chef Server URL'
-
-  option :knifeconfig,
-  :short => '-c CONFIG',
-  :long => '--knifeconfig CONFIG',
-  :description => 'Specify the knife.rb configuration file'
-
-  option :novalidation,
-  :long => '--novalidation',
-  :description => 'Disable validation',
-  :boolean => true
-
-  option :parallel,
-  :long => '--parallel',
-  :description => "Use the GNU 'parallel' command to parallelize 'knife VENDOR server create' commands that are not order-dependent",
-  :boolean => true
-
-  option :rebuild,
-  :short => '-r',
-  :long => '--rebuild',
-  :description => 'Print the knife commands to be delete and recreate the infrastructure',
-  :boolean => true
-
-  option :siteinstall,
-  :long => '--siteinstall',
-  :description => "Use the 'install' command with 'knife cookbook site' instead of the default 'download'",
-  :boolean => true
-
-  option :version,
-  :short => '-v',
-  :long => '--version',
-  :description => 'Show spiceweasel version',
-  :boolean => true,
-  :proc => lambda { |v| puts "Spiceweasel: #{Spiceweasel::VERSION}" },
-  :exit => 0
BREAKS HERE
-ackage 'unzip'
BREAKS HERE
-rabbit_endpoint = node['openstack']['endpoints']['mq']
-bind_interface = rabbit_endpoint.bind_interface
-if bind_interface
-  listen_address = address_for bind_interface
-else
-  listen_address = rabbit_endpoint.host
-end
-node.set['openstack']['mq']['listen'] = listen_address
-  if node['rabbitmq']['ssl_port'] != rabbit_endpoint.port
-    node.override['rabbitmq']['ssl_port'] = rabbit_endpoint.port
-    Chef::Log.error 'Unable to listen on the port #{rabbit_endpoint.port} for RabbitMQ TCP, which is listened on by SSL!'
-  node.override['rabbitmq']['port'] = rabbit_endpoint.port
-node.override['rabbitmq']['address'] = listen_address
-  node.override['rabbitmq']['cluster'] = node['openstack']['mq']['cluster']
-  node.override['rabbitmq']['erlang_cookie'] = get_password 'service', 'rabbit_cookie'
-    qs = "roles:#{node['openstack']['mq']['server_role']} AND chef_environment:#{node.chef_environment}"
-    node.override['rabbitmq']['cluster_disk_nodes'] = search(:node, qs).map do |n|
BREAKS HERE
-      def patch_path
-        Array(Chef::Config.cookbook_path).first + "/chef_solo_patches/libraries"
-      end
-
BREAKS HERE
-  has_binaries [ 'bin/node', 'bin/npm' ]
BREAKS HERE
-      demands.collect { |demand| [ demand.name, demand.version_constraint ] }
BREAKS HERE
-    openstackcmd = openstackcmd.concat(options.split)
BREAKS HERE
-when "rhel", "fedora"
-    package_list = ['heartbeat', 'heartbeat-devel']
-when "debian"
-    package_list = ['heartbeat', 'heartbeat-dev']
-service "heartbeat" do
-    :restart => true,
-    :status => true
BREAKS HERE
-property :name, kind_of: String, name_attribute: true
BREAKS HERE
-  arguments :path => '/var/chef/reports'
BREAKS HERE
-service_pass = service_password "cinder"
BREAKS HERE
-      @cookbook = options[:cookbook] ? "'#{options[:cookbook]}'" : "'chefdk_bootstrap', '2.2.0'"
BREAKS HERE
-
-  # TODO(andymccr): Remove these once other changes have merged to use get_password
-
-  # Ease-of-use/standardization routine that returns a service password
-  # for a named OpenStack service. Note that databases are named
-  # after the OpenStack project nickname, like "nova" or "glance"
-  def service_password service
-    bag = node["openstack"]["secret"]["service_passwords_data_bag"]
-    secret bag, service
-  end
-
-  # Ease-of-use/standardization routine that returns a database password
-  # for a named OpenStack database. Note that databases are named
-  # after the OpenStack project nickname, like "nova" or "glance"
-  def db_password service
-    bag = node["openstack"]["secret"]["db_passwords_data_bag"]
-    secret bag, service
-  end
-
-  # Ease-of-use/standardization routine that returns a password
-  # for a user.
-  def user_password user
-    bag = node["openstack"]["secret"]["user_passwords_data_bag"]
-    secret bag, user
-  end
BREAKS HERE
-  'if /usr/local/bin/bundle exec rake db:version > /dev/null 2>&1; ' \
-  'then /usr/local/bin/bundle exec rake db:migrate; ' \
-  'else /usr/local/bin/bundle exec rake db:setup; ' \
-  'fi'
BREAKS HERE
-      chef_run = ChefSpec::ChefRunner.new(
-      expect(chef_run).to create_file initdFile
-      file = chef_run.template(initdFile)
-      expect(file).to be_owned_by("root", "root")
-      expect(chef_run).to set_service_to_start_on_boot("wlp-#{serverName}")
-      chef_run = ChefSpec::ChefRunner.new(
-      expect(chef_run).to set_service_to_not_start_on_boot("wlp-#{serverName}")
-      expect(chef_run).not_to set_service_to_not_start_on_boot("wlp-#{serverName}")
-      chef_run = ChefSpec::ChefRunner.new(
-      expect(chef_run).to set_service_to_not_start_on_boot("wlp-#{serverName}")
-      expect(chef_run).not_to set_service_to_not_start_on_boot("wlp-#{serverName}")
-      chef_run = ChefSpec::ChefRunner.new(
BREAKS HERE
-    #   part of the dependnecy solution. Each shim is a hard link on disk.
BREAKS HERE
-      File.open(file_name, 'w', ) do |file|
BREAKS HERE
-      end if new_resource.volume.nil?
-      converge_by "removing volume #{volume_name}" do
-        volume.remove
-      end unless new_resource.volume.nil?
BREAKS HERE
-    if version.to_f >= 2
-      # version 2.x or later
-      "http://packages.treasuredata.com/#{version}/ubuntu/#{dist}/"
-    else
BREAKS HERE
-property :name,                  String
BREAKS HERE
-      Array(node['rabbitmq']['ssl_ciphers']).map { |n| "'#{n}'" }.join(',')
BREAKS HERE
-default[:opsworks_rubygems][:version] = '2.0.3'
-case node[:opsworks][:ruby_version]
-  default[:opsworks_rubygems][:setup_command] = "/usr/bin/env LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 /usr/local/bin/ruby setup.rb --no-rdoc --no-ri"
-  default[:opsworks_rubygems][:setup_command] = "/usr/bin/env LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 /usr/local/bin/ruby --disable-gems setup.rb --no-rdoc --no-ri"
BREAKS HERE
-          @log_run_script ||=
-            begin
-              if new_resource.default_logger
-                f = Chef::Resource::File.new(
-                  ::File.join(sv_dir_name, 'log', 'run'),
-                  run_context
-                )
-                f.content(default_logger_content)
-                f.owner(new_resource.owner)
-                f.group(new_resource.group)
-                f.mode(00755)
-                f
-              else
-                t = Chef::Resource::Template.new(
-                  ::File.join(sv_dir_name, 'log', 'run'),
-                  run_context
-                )
-                t.owner(new_resource.owner)
-                t.group(new_resource.group)
-                t.mode(00755)
-                t.source("sv-#{new_resource.log_template_name}-log-run.erb")
-                t.cookbook(template_cookbook)
-                t.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-                t
-              end
-          @log_config_file ||=
-            begin
-              t = Chef::Resource::Template.new(::File.join(sv_dir_name, 'log', 'config'), run_context)
-              t.owner(new_resource.owner)
-              t.group(new_resource.group)
-              t.mode(00644)
-              t.cookbook('runit')
-              t.source('log-config.erb')
-              t.variables(
-                :size => new_resource.log_size,
-                :num => new_resource.log_num,
-                :min => new_resource.log_min,
-                :timeout => new_resource.log_timeout,
-                :processor => new_resource.log_processor,
-                :socket => new_resource.log_socket,
-                :prefix => new_resource.log_prefix,
-                :append => new_resource.log_config_append
-              t
-            end
-                f = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', var), run_context)
-                f.owner(new_resource.owner)
-                f.group(new_resource.group)
-                f.content(value)
-                f.action(:create)
-                f
-              end
-                f = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', k), run_context)
-                f.action(:delete)
-                f
-              end
-                t = Chef::Resource::Template.new(
-                  ::File.join(sv_dir_name, 'control', signal),
-                  run_context
-                t.owner(new_resource.owner)
-                t.group(new_resource.group)
-                t.mode(00755)
-                t.source("sv-#{new_resource.control_template_names[signal]}-#{signal}.erb")
-                t.cookbook(template_cookbook)
-                t.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-                t
-              end
BREAKS HERE
-      when "name" then nil
-      when "license" then "<strong>#{key.capitalize}:</strong> <a href="">#{value}</a>"
-      when "version" then nil
-      when "platforms", "dependencies"
-      when "providing", "recipes", "suggestions", "conflicting", "recommendations", "groupings"
-        unless value.empty?
-          list = "<ul class='list-unstyled'>"
-          value.sort.each do |name, description|
-            list << "<li>#{name}: #{description}</li>"
-          end
-          list << "</ul>"
-        end
-        description: %w(name maintainer maintainer_email version license platforms dependencies long_description),
BREAKS HERE
-require 'chef/version_constraint'
-
-kernel_supports_aio = Chef::VersionConstraint.new('>= 2.6.22').include?(node['kernel']['release'].split('-').first)
-restart_after_update = node['openresty']['restart_after_update'] ? ' && $( kill -QUIT `pgrep -U root nginx` || true )' : ''
-
-include_recipe 'build-essential'
-
-src_filepath  = "#{Chef::Config['file_cache_path'] || '/tmp'}/ngx_openresty-#{node['openresty']['source']['version']}.tar.gz"
-
-packages = value_for_platform_family(
-  ['rhel','fedora','amazon','scientific'] => [ 'openssl-devel', 'readline-devel', 'ncurses-devel' ],
-  'default' => [ 'libperl-dev', 'libssl-dev', 'libreadline-dev', 'libncurses5-dev']
-)
-
-# Enable AIO for newer kernels
-packages |= value_for_platform_family(
-    ['rhel','fedora','amazon','scientific'] => [ 'libatomic_ops-devel' ],
-    'default' => [ 'libatomic-ops-dev', 'libaio1', 'libaio-dev' ]
-) if kernel_supports_aio
-
-packages.each do |devpkg|
-  package devpkg
-end
-
-remote_file node['openresty']['source']['url'] do
-  source node['openresty']['source']['url']
-  checksum node['openresty']['source']['checksum']
-  path src_filepath
-  backup false
-end
-
-cookbook_file "#{Chef::Config['file_cache_path']}/nginx-rate-limit-correct-error-code.patch" do
-  source 'nginx-rate-limit-correct-error-code.patch'
-  owner 'root'
-  group 'root'
-  mode 00644
-  only_if { node['openresty']['source']['limit_code_patch'] }
-end
-
-node.run_state['openresty_force_recompile'] = false
-node.run_state['openresty_configure_flags'] = node['openresty']['source']['default_configure_flags'] | node['openresty']['configure_flags']
-
-node.run_state['openresty_configure_flags'] |= [ '--with-file-aio', '--with-libatomic' ] if kernel_supports_aio
-node.run_state['openresty_configure_flags'] |= [ '--with-ipv6' ] if node['openresty']['ipv6']
-
-if node['openresty']['custom_pcre']
-
-  pcre_path = "#{Chef::Config['file_cache_path'] || '/tmp'}/pcre-#{node['openresty']['pcre']['version']}"
-  pcre_opts = 'export PCRE_CONF_OPT="--enable-utf8 --enable-unicode-properties" && '
-
-  remote_file "#{pcre_path}.tar.bz2" do
-    owner 'root'
-    group 'root'
-    mode 00644
-    source node['openresty']['pcre']['url']
-    checksum node['openresty']['pcre']['checksum']
-    action :create_if_missing
-  end
-
-  execute 'openresty-extract-pcre' do
-    user 'root'
-    cwd(Chef::Config['file_cache_path'] || '/tmp')
-    command "tar xjf #{pcre_path}.tar.bz2"
-    not_if { ::File.directory?(pcre_path) }
-  end
-
-  node.run_state['openresty_configure_flags'] |= [ "--with-pcre=#{pcre_path}" ]
-
-else
-
-  pcre_opts = ''
-  value_for_platform_family(
-    ['rhel','fedora','amazon','scientific'] => [ 'pcre', 'pcre-devel' ],
-    'default' => ['libpcre3', 'libpcre3-dev' ]
-  ).each do |pkg|
-    package pkg
-  end
-
-  node.run_state['openresty_configure_flags'] |= [ '--with-pcre' ]
-
-end
-
-node['openresty']['modules'].each do |ngx_module|
-  include_recipe "openresty::#{ngx_module}"
-end
-
-node['openresty']['extra_modules'].each do |ngx_module|
-  include_recipe ngx_module
-end
-
-configure_flags = node.run_state['openresty_configure_flags']
-openresty_force_recompile = node.run_state['openresty_force_recompile']
-
-# The 3 first version numbers of OpenResty is the actual NGINX version. It's a bit ugly but it works...
-nginx_version = node['openresty']['source']['version'].split('.')[0...-1].join('.')
-if node['openresty']['source']['limit_code_patch']
-  limit_code_patch = <<-EOT
-  cd bundle/nginx-#{nginx_version} &&
-  patch -p1 < #{Chef::Config['file_cache_path']}/nginx-rate-limit-correct-error-code.patch &&
-  cd ../../ &&
-  EOT
-else
-  patch = ''
-end
-
-bash 'compile_openresty_source' do
-  cwd ::File.dirname(src_filepath)
-  code <<-EOH
-    tar zxf #{::File.basename(src_filepath)} -C #{::File.dirname(src_filepath)} &&
-    cd ngx_openresty-#{node['openresty']['source']['version']} &&
-    #{limit_code_patch}
-    #{pcre_opts}
-    ./configure #{node.run_state['openresty_configure_flags'].join(' ')} &&
-    make -j#{node['cpu']['total']} && make install #{restart_after_update}
-  EOH
-
-  # OpenResty configure args massaging due to the configure script adding its own arguments along our custom ones
-  not_if do
-    openresty_force_recompile == false &&
-      node.automatic_attrs['nginx'] &&
-      node.automatic_attrs['nginx']['version'] == node['openresty']['source']['version'] &&
-      (configure_flags & node.automatic_attrs['nginx']['configure_arguments'].
-      reject{ |f| f =~ /(--add-module=\.\.\/)/ }.
-      map{ |f| f =~ /luajit/ ? '--with-luajit' : f }.
-      sort).size == configure_flags.size
-  end
-end
-
-node.run_state.delete('openresty_configure_flags')
-node.run_state.delete('openresty_force_recompile')
-
BREAKS HERE
-      uri = URI.join(node['terraform']['url_base'], "#{version}/terraform_#{version}_SHA256SUMS")
BREAKS HERE
-    shcluster_servers_list = shcluster_params['shcluster_members'].join(',')
BREAKS HERE
-directory node['kibana']['installdir'] do
-git "#{node['kibana']['installdir']}/#{node['kibana']['branch']}" do
-  repository node['kibana']['repo']
-  reference node['kibana']['branch']
-  action :sync
-  user kibana_user
-end
-
-link "#{node['kibana']['installdir']}/current" do
-  to "#{node['kibana']['installdir']}/#{node['kibana']['branch']}"
-template "#{node['kibana']['installdir']}/current/config.js" do
-link "#{node['kibana']['installdir']}/current/dashboards/default.json" do
-  only_if { !File::symlink?("#{node['kibana']['installdir']}/current/dashboard/default.json") }
BREAKS HERE
-keystone_service_role = glance["keystone_service_chef_role"]
-keystone = config_by_role keystone_service_role, "keystone"
-
BREAKS HERE
-        Chef::Log.debug("Checking to see if the runit binary exists by running #{new_resource.sv_bin.to_s}")
-        Chef::Log.debug("Failed to return 0 or 100 running #{new_resource.sv_bin.to_s}")
-      Chef::Log.debug("Sleeping 6 seconds to allow the disable to take effect")
-        Chef::Log.debug("Logging not running so doing nothing")
BREAKS HERE
-# Having to manually version the database because of Ubuntu bug
-# https://bugs.launchpad.net/ubuntu/+source/glance/+bug/981111
-execute 'glance-manage version_control 0' do
-  not_if 'glance-manage db_version'
-  only_if { platform?('ubuntu', 'debian') }
-end
-
BREAKS HERE
-      symlink_before_migrate deploy[:symlink_before_migrate]
BREAKS HERE
-      Chef::Log.warn("PowerShell 2.0 is not supported on this version of Windows: #{node.platform_version}")
BREAKS HERE
-      'transport.tcp.port' => settings[instance_name.to_sym][:transport_port].to_s,
BREAKS HERE
-            node.set['openstack']['telemetry-metric']['conf']['storage']['driver'] = 'ceph'
-        node.set['openstack']['identity']['ssl']['enabled'] = true
-        node.set['openstack']['telemetry-metric']['custom_template_banner'] = 'custom_template_banner_value'
-          node.set['openstack']['telemetry-metric']['ssl']['enabled'] = true
-          node.set['openstack']['telemetry-metric']['ssl']['chainfile'] = '/etc/ceilometer/ssl/certs/chainfile.pem'
-          node.set['openstack']['telemetry-metric']['ssl']['ciphers'] = 'ciphers_value'
-          node.set['openstack']['telemetry-metric']['ssl']['cert_required'] = true
BREAKS HERE
-Then /^the cookbook store should have the following cookbooks:$/ do |cookbooks|
BREAKS HERE
-        fail "Unsupported Mysql #{type_label} Version"
BREAKS HERE
-      @retries        = options[:retries]
-      @retry_interval = options[:retry_interval]
BREAKS HERE
-    cmd =  "rabbitmqctl delete_vhost #{new_resource.vhost}"
BREAKS HERE
-    Chef::Recipe.any_instance.stub(:get_secret)
-        it 'sets a sql_connection attribute' do
-          expect(chef_run).to render_file(file.name).with_content(/^sql_connection = sql_connection_value$/)
-              Chef::Recipe.any_instance.stub(:get_password)
-              Chef::Recipe.any_instance.stub(:get_password)
-              Chef::Recipe.any_instance.stub(:get_password)
BREAKS HERE
-
-
-default['dovecot']['services']['imap-login'] = nil
BREAKS HERE
-    not_if 'service mesos-slave status|grep start/running'
-    not_if 'status mesos-slave|grep start/running'
-    not_if 'service mesos-slave status|grep stop/waiting'
-    not_if 'status mesos-slave|grep stop/waiting'
BREAKS HERE
-#TODO: CREATED UPGRADE SCRIPT
-user node[:bamboo][:user] do
-  comment "Bamboo Service Account"
-  #home    node['bamboo']['home_path']
-  shell   "/bin/bash"
-  supports :manage_home => true
-  system  true
-  action  :create
-
-if (node[:bamboo][:external_data]) == true
-  directory "/mnt/data" do
-    owner node[:bamboo][:user]
-    group  node[:bamboo][:group]
-    mode "0775"
-    action :create
-  end
-  mount "/mnt/data" do
-    device "/dev/vdc1"
-    fstype "ext4"
-    action   [:mount, :enable]
-  end
-end
-
-include_recipe "java"
-include_recipe "ark"
-
-#TODO: need to notify service to stop before downloading new package
-# download bamboo
-ark node[:bamboo][:name] do
-  url node[:bamboo][:download_url]
-  home_dir node[:bamboo][:install_path]
-  checksum node[:bamboo][:checksum]
-  version node[:bamboo][:version]
-  owner node[:bamboo][:user]
-  group node[:bamboo][:group]
-end
-
-
-if (node[:bamboo][:mysql]) == true
-  directory "#{node[:bamboo][:install_path]}/lib" do
-    owner  node[:bamboo][:user]
-    group  node[:bamboo][:group]
-    mode "0775"
-    action :create
-  end
-
-  mysql_connector_j "#{node[:bamboo][:install_path]}/lib"
-end
-
-template "/etc/init.d/bamboo" do
-  source "bamboo.init.erb"
-  mode   "0755"
-  notifies :restart, "service[bamboo]", :delayed
-end
-
-template "bamboo-init.properties" do
-  path "#{node[:bamboo][:install_path]}/atlassian-bamboo/WEB-INF/classes/bamboo-init.properties"
-  source "bamboo-init.properties.erb"
-  owner  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  mode 0644
-  variables({
-         "bamboo_home" => node[:bamboo][:bamboo_home]
-            })
-  notifies :restart, "service[bamboo]", :delayed
-end
-
-template "seraph-config.xml" do
-  path "#{node[:bamboo][:install_path]}/atlassian-bamboo/WEB-INF/classes/seraph-config.xml"
-  source "seraph-config.xml.erb"
-  owner  node[:bamboo][:user]
-  group  node[:bamboo][:group]
-  mode 0644
-  notifies :restart, "service[bamboo]", :delayed
-end
-
-template "#{node[:bamboo][:install_path]}/bin/setenv.sh" do
-  source "setenv.sh.erb"
-  owner  node[:bamboo][:user]
-  mode   "0755"
-  notifies :restart, "service[bamboo]", :delayed
-end
-
-service "bamboo" do
-  supports :status => true, :restart => true, :start => true, :stop => true
-  action :enable
-end
-
-# needed for jasper reports and solve pdf and font problems
-package "libstdc++5" do
-  action :install
-end
-
-include_recipe "backup"
-
-backup_install node.name
-backup_generate_config node.name
-
-backup_generate_model "mysql" do
-  description "Our shard"
-  backup_type "database"
-  database_type "MySQL"
-  store_with({"engine" => "S3", "settings" => { "s3.access_key_id" => "BN588NGSSFPKQHD1NX21", "s3.secret_access_key" => "8abEbk+jZyx3c9Td2etAMO031bkXmqQEGjET8WcE", "s3.bucket" => "backups", "s3.path" => "bamboo", "s3.keep" => 10, "s3.fog_options" => {  :host => 's3.eden.klm.com', :scheme => 'http', :port => 80 } } } )
-  options({"db.host" => "\"localhost\"", "db.username" => "\"#{node[:bamboo][:jdbc_username]}\"", "db.password" => "\"#{node[:bamboo][:jdbc_password]}\"", "db.name" => "\"bamboo\""})
-  action :backup
-end
-
-
-
-
BREAKS HERE
-     File.open(file_name, 'w', ) do |file|  
BREAKS HERE
-      begin
-        checksums = File.open(checksums_file_path, 'r')
-        io = File.open(sigfile_path, 'rb')
-        crypto = ::GPGME::Crypto.new
-        signature = ::GPGME::Data.new(io)
-        crypto.verify(signature, signed_text: checksums) do |sig|
-          return sig.valid? &&
-                 !(sig.expired_signature? || sig.expired_key? ||
-                   sig.revoked_key? || sig.bad? || sig.no_key?)
-        end
-      rescue Errno::ENOENT
-        false
-      ensure
-        false
BREAKS HERE
-      expect(chef_run).to run_execute('monit reload')
-      expect(chef_run).to run_execute('monit reload')
BREAKS HERE
-actions :system, :install, :uninstall
-attribute :seat_preference, kind_of: String
BREAKS HERE
-    def fancy_bool(bool)
BREAKS HERE
-if node['postfix']['use_relay_restirictions_maps']
BREAKS HERE
-    property :exposed_ports, PartialHashType
-    property :port_bindings, [String, Array, Hash, nil]
BREAKS HERE
-require 'solve'
-              @#{instance_variable}[thing] = Solve::Constraint.new(version).to_s
-          @version.to_s
-          @version = Solve::Version.new(arg)
-          @version.to_s
BREAKS HERE
-      property :cgroup_parent,     String,        default: '' # FIXME: add validate proc
-      property :cpu_shares,        [Fixnum, nil], default: 0 # FIXME: add validate proc
-      property :cpuset_cpus,       String,        default: '' # FIXME: add validate proc
-      property :domain_name,       String,        default: ''
-      property :log_opts,          [Hash, nil],          coerce: (proc do |v|
-      property :ulimits,           [Array, nil],    coerce: (proc do |v|
-      def port(ports=NOT_PASSED)
-      def log_config(value=NOT_PASSED)
-      def image(image=nil)
-          raise Chef::Exceptions::ValidationFailed, "Cannot specify hostname on #{container_name}, because network_mode is host."
-        # TODO there is a restart endpoint
BREAKS HERE
-
-# TODO: see bug https://github.com/onehealth-cookbooks/apache2/issues/187
-# execute "restart_apache" do
-#   command "service apache2 restart"
-#   action :run
-# end
BREAKS HERE
-Systemd::Helpers.build_unit_resource('automount')
BREAKS HERE
-        sorted.first
BREAKS HERE
-      add_cert(cert_obj)
-    gem 'win32-certstore', '>= 0.2.3'
-    Chef::Log.debug('Did not find win32-certstore >= 0.2.3 gem installed. Installing now')
-  # Returns the certificate string of the given
-  # input certificate in PEM format
-  def raw_source
-    ext = ::File.extname(new_resource.source)
-    convert_pem(ext, new_resource.source)
-  end
-
-  def convert_pem(ext, source)
-          when '.crt', '.der'
-            powershell_out("openssl x509 -text -inform DER -in #{source} -outform PEM").stdout
-          when '.cer'
-            powershell_out("openssl x509 -text -inform DER -in #{source} -outform PEM").stdout
-            powershell_out("openssl pkcs12 -in #{source} -nodes -passin pass:'#{new_resource.pfx_password}'").stdout
-            powershell_out("openssl pkcs7 -print_certs -in #{source} -outform PEM").stdout
-    out = ::File.read(source) if out.nil? || out.empty?
-    format_raw_out(out)
BREAKS HERE
-default[:logwatch][:email] = "root@localhost"
BREAKS HERE
-default[:tftp][:options] = "-l -s /var/lib/tftpboot"
BREAKS HERE
-  def test_cookbook_paths_includes_patch_cookbooks
-    cmd = command
-    assert_equal cmd.patch_cookbooks_path, cmd.cookbook_paths.last, "patch_cookbooks is not included"
-  end
-
-      assert_equal File.join(Dir.pwd, "berkshelf/path"), cmd.cookbook_paths[0].to_s
-      assert_equal File.join(Dir.pwd, "librarian/path"), cmd.cookbook_paths[0].to_s
BREAKS HERE
-keystone = get_settings_by_role("keystone", "keystone")
BREAKS HERE
-template "/etc/security/limits.d/10-hard-core.conf" do
BREAKS HERE
-default[:rsyncd][:globals] = Hash.new
BREAKS HERE
-    settings["level0"]["overpass_url_prefix"] = "http://overpass-api.de/api/interpreter?"
BREAKS HERE
-        puts JSON.pretty_generate(input)
-        puts input.to_yaml
BREAKS HERE
-%w[lsof iproute2].each do |x|
-  package x do
-    action :install
-    not_if "dpkg -l #{x} | grep -E '^ii'"
BREAKS HERE
-version '4.2.0'
BREAKS HERE
-attribute :share_name, :kind_of => String, :name_attribute => true
-attribute :path, :kind_of => String
-attribute :description, :kind_of => String, :default => ''
-attribute :full_users, :kind_of => Array, :default => []
-attribute :change_users, :kind_of => Array, :default => []
-attribute :read_users, :kind_of => Array, :default => []
BREAKS HERE
-                "MS_MAP_PATTERN" => "^/srv/imagery/mapserver/",
-                "MS_ERRORFILE" => "/tmp/mapserver-layer-#{layer}.log",
-                "MS_DEBUGLEVEL" => "1"
BREAKS HERE
-openvswitch_endpoint = endpoint 'network-openvswitch'
-    local_ip: openvswitch_endpoint.host
BREAKS HERE
-  if version.to_f >= 2
-    # version 2.x or later
-    source = "http://packages.treasuredata.com/#{version}/ubuntu/#{dist}/"
-  else
-    # version 1.x
-    if dist == 'precise'
-      'http://packages.treasuredata.com/precise/'
-      'http://packages.treasuredata.com/debian/'
-  end
BREAKS HERE
-case node['platform']
-  when "debian", "ubuntu"
-    template "/etc/pam.d/su" do
-      cookbook ulimit['pam_su_template_cookbook']
-    end
-    
-    cookbook_file "/etc/pam.d/sudo" do
-      cookbook node['ulimit']['ulimit_overriding_sudo_file_cookbook']
-      source node['ulimit']['ulimit_overriding_sudo_file_name']
-      mode "0644"
-    end
-if ulimit.has_key?('users')
BREAKS HERE
-
BREAKS HERE
-node.default['nginx-hardening']['options']['ssl_dhparam'] = ::File.join (node['nginx-hardening']['certificates_dir'] || '/etc/nginx/'), 'dh2048.pem'
-
BREAKS HERE
-  password: node['mysql']['server_root_password']
BREAKS HERE
-#helpers for Windows API calls that require privilege adjustments
-    #File -> Load Hive... in regedit.exe
-    #File -> Unload Hive... in regedit.exe
-      ensure #disable privs
BREAKS HERE
-
-# platform and DBMS-specific python client packages
-default['openstack']['db']['python_packages'] = {
-  postgresql: ['python-psycopg2'],
-  sqlite: []
-}
BREAKS HERE
-        rest.get_rest("cookbooks")
-      # Remove all versions of all cookbooks from the Chef Server defined in your
-      # Knife config.
-      def purge_cookbooks
-        get_cookbooks.each do |name, info|
-          info["versions"].each do |version_info|
-            rest.delete_rest("cookbooks/#{name}/#{version_info["version"]}?purge=true")
-          end
-        end
-      end
-
-        rest.delete_rest("cookbooks/#{name}/#{version}?purge=true")
-      rescue Net::HTTPServerException => e
-        raise unless e.to_s =~ /^404/
-        rest.get_rest("cookbooks/#{name}/#{version}")
-        true
-      rescue Net::HTTPServerException => e
-        false
-        def rest
-          quietly do
-            ::Chef::REST.new(
-              Berkshelf::Chef::Config[:chef_server_url],
-              Berkshelf::Chef::Config[:node_name],
-              Berkshelf::Chef::Config[:client_key]
-            )
-          end
-            client_key: Berkshelf::Chef::Config[:client_key]
BREAKS HERE
-          next unless ::File.exist?(rb_path)
-          lines = ::File.readlines(rb_path).select { |line| line =~ /^name.*['"]#{cookbook_name}['"]/ }
-          add_cookbook_name_to_metadata(cookbook_name, rb_path) if lines.empty?
BREAKS HERE
-  if compile_time
-    Array(action).each do |action|
-      run_action(action)
-    end
BREAKS HERE
-default['nginx']['worker_processes']        = cpu['total']
BREAKS HERE
-version '0.3.222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222'
BREAKS HERE
-    '1.8.1'
BREAKS HERE
-      berksfile.dependencies.all? do |dependency|
-        return false if locked.nil?
-        return false if graphed.nil?
-        dependency.location == locked.location &&
-        dependency.version_constraint.satisfies?(graphed.version) &&
-        satisfies_transitive?(graphed, checked)
BREAKS HERE
-        puts args_hash
BREAKS HERE
-# The current openvswitch package of centos 6.4 cannot create GRE tunnel successfully
-# The centos 6.4 kernel version is 2.6.32-358.18.1.el6.x86_64
-# This code block was deperated because the ovs package was updated.
-#if platform?(%w(fedora redhat centos))
-#  remote_directory "/tmp/openvswitch" do
-#    source "openvswitch"
-#    files_owner "root"
-#    files_group "root"
-#    mode "0644"
-#    recursive true
-#    action :create
-#  end
-  
-#  execute "update openvswitch package" do
-#    ignore_failure true
-#    command "chmod +x /tmp/openvswitch/install.sh; sh /tmp/openvswitch/install.sh"
-#    action :run
-#  end  
-#end
-
BREAKS HERE
-                %w{ libncurses5-dev openssl libssl-dev }
-                %w{ ncurses-devel openssl-devel }
-  environment({"CFLAGS" => node['erlang']['source']['cflags']})
BREAKS HERE
-class ::Chef::Recipe # rubocop:disable Documentation
-# TBD clean up item...
-# These should probably become admin, internal, public endpoints for a
-# single service 'identity-api'. To minimize impact, I propose that we
-# defer that work until later.
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-identity_internal_endpoint = internal_endpoint 'identity-internal'
-identity_public_endpoint = public_endpoint 'identity-api'
-# FIXME(invsblduck): RuboCop gating was enabled mid-review;
-#   Remove these variables in a separate commit if really not needed.
-# rubocop:enable UselessAssignment
-# FIXME(galstrom21): This needs to be refactored, to not use a
-#   MultilineBlockChain.
-node['openstack']['identity']['users'].values.map do |user_info|
-end.flatten.uniq.each do |tenant_name| # rubocop: disable MultilineBlockChain
-# FIXME(galstrom21): This needs to be refactored, to not use a
-#   MultilineBlockChain.
-node['openstack']['identity']['users'].values.map do |user_info|
-end.flatten.uniq.each do |role_name| # rubocop: disable MultilineBlockChain
BREAKS HERE
-  check = Mixlib::ShellOut.new("dsquery #{new_resource.type} -name #{new_resource.name}").run_command
-  !check.stdout.match("")
BREAKS HERE
-  inet = nil
-  inet6 = nil
-
-  begin
-    inet = resources(:template => "/etc/shorewall/rules")
-    inet6 = resources(:template => "/etc/shorewall6/rules")
-  rescue
-  end
-
-    inet.variables[:rules] << rule unless inet.nil?
-    inet6.variables[:rules] << rule unless inet6.nil?
-    inet.variables[:rules] << rule unless inet.nil?
-    inet6.variables[:rules] << rule unless inet6.nil?
BREAKS HERE
-          :default => %w(import display_name host_name groups check_command max_check_attempts check_period check_interval retry_interval enable_notifications enable_active_checks enable_passive_checks enable_event_handler enable_flapping enable_perfdata event_command flapping_threshold volatile zone command_endpoint notes notes_url action_url icon_image icon_image_alt custom_vars assign_where ignore_where set)
BREAKS HERE
-    Chef::Log.debug("Running 'Remove-SmbShare -Name #{new_resource.share_name} -Force' to remove the share")
-    powershell_out!("Remove-SmbShare -Name #{new_resource.share_name} -Force")
-    Chef::Log.debug("Updating the share #{new_resource.share_name}")
-
-    Chef::Log.debug("Creating #{new_resource.share_name}")
-
-        Chef::Log.debug("Running 'Grant-SmbShareAccess -Name \"#{new_resource.share_name}\" -AccountName \"#{new_resource.send("#{perm_type}_users").join(',')}\" -Force -AccessRight #{perm_type}' to update the permissions")
-        powershell_out!("Grant-SmbShareAccess -Name \"#{new_resource.share_name}\" -AccountName \"#{new_resource.send("#{perm_type}_users").join(',')}\" -Force -AccessRight #{perm_type}")
-    Chef::Log.debug("Revoking users: #{users.join(',')}")
-    powershell_out!("Revoke-SmbShareAccess -Name \"#{new_resource.share_name}\" -AccountName \"#{users.join(',')}\" -Force")
BREAKS HERE
-      # not to immediately reboot. The windows_reboot 'notifies' does that. 
BREAKS HERE
-                    })
-      cmd << " --log-file #{@log_file}" if TasteTester::Config.chef_zero_logging
BREAKS HERE
-                                    'MAILER-DAEMON' =>  'postmaster',
-                                    'bin' =>            'root',
-                                    'daemon' =>         'root',
-                                    'named' =>          'root',
-                                    'nobody' =>         'root',
-                                    'uucp' =>           'root',
-                                    'www' =>            'root',
-                                    'ftp-bugs' =>       'root',
-                                    'postfix' =>        'root',
-                                    'manager' =>        'root',
-                                    'dumper' =>         'root',
-                                    'operator' =>       'root',
-                                    'abuse' =>          'postmaster',
-if node['postfix']['use_relay_restrictions_maps']
-  default['postfix']['main']['smtpd_relay_restrictions'] = "hash:#{node['postfix']['relay_restrictions_db']}, reject"
-end
BREAKS HERE
-
-  describe '#foodcritic_metric_result' do
-    let(:cookbook) { create(:cookbook) }
-
-    let(:quality_metric) { create(:foodcritic_metric) }
-
-    let!(:metric_result) do
-      MetricResult.create(
-        cookbook_version: cookbook.latest_cookbook_version,
-        quality_metric: quality_metric,
-        failure: true,
-        feedback: 'it failed'
-      )
-    end
-
-    before do
-      expect(cookbook.latest_cookbook_version.metric_results).to_not be_empty
-    end
-
-    it 'returns the correct metric' do
-      expect(helper.foodcritic_metric_result(cookbook.latest_cookbook_version)).to eq(metric_result)
-    end
-  end
-
-  describe '#collaborator_num_metric_result' do
-    let(:cookbook) { create(:cookbook) }
-
-    let(:quality_metric) { create(:collaborator_num_metric) }
-
-    let!(:metric_result) do
-      MetricResult.create(
-        cookbook_version: cookbook.latest_cookbook_version,
-        quality_metric: quality_metric,
-        failure: true,
-        feedback: 'it failed'
-      )
-    end
-
-    before do
-      expect(cookbook.latest_cookbook_version.metric_results).to_not be_empty
-    end
-
-    it 'returns the correct metric' do
-      expect(helper.collaborator_num_metric_result(cookbook.latest_cookbook_version)).to eq(metric_result)
-    end
-  end
BREAKS HERE
-      ridley_connection(options) do |conn|
-        p conn.environment.list
-      # @raise [Berkshelf::ChefConnectionError]
-      def ridley_connection(options = {}, &block)
-        ridley_options               = options.slice(:ssl)
-
-        ridley_options[:server_url]  = options[:server_url] || Berkshelf.config.chef.chef_server_url
-        ridley_options[:client_name] = options[:client_name] || Berkshelf.config.chef.node_name
-        ridley_options[:client_key]  = options[:client_key] || Berkshelf.config.chef.client_key
-        ridley_options[:ssl]         = { verify: (options[:ssl_verify].nil?) ? Berkshelf.config.ssl.verify : options[:ssl_verify]}
-
-        unless ridley_options[:server_url].present?
-          raise ChefConnectionError, 'Missing required attribute in your Berkshelf configuration: chef.server_url'
-        end
-
-        unless ridley_options[:client_name].present?
-          raise ChefConnectionError, 'Missing required attribute in your Berkshelf configuration: chef.node_name'
-        end
-
-        unless ridley_options[:client_key].present?
-          raise ChefConnectionError, 'Missing required attribute in your Berkshelf configuration: chef.client_key'
-        end
-        # @todo  Something scary going on here - getting an instance of Kitchen::Logger from test-kitchen
-        # https://github.com/opscode/test-kitchen/blob/master/lib/kitchen.rb#L99
-        Celluloid.logger = nil unless ENV["DEBUG_CELLULOID"]
-        Ridley.open(ridley_options, &block)
-      rescue Ridley::Errors::RidleyError => ex
-        log_exception(ex)
-        raise ChefConnectionError, ex # todo implement
-      end
-
BREAKS HERE
-   service_provider = Chef::Provider::Service::Upstart
-   service_provider = nil
BREAKS HERE
-  template "#{available_sites_dirpath}/#{server_name}" do
BREAKS HERE
-    def validate_install_method
-      if property_is_set?(:version) &&
-         install_method != 'binary' &&
-         install_method != 'package' &&
-         install_method != 'tarball'
-        raise Chef::Exceptions::ValidationFailed, 'Version property only supported for binary, package and tarball installation methods'
-      end
-    end
-
BREAKS HERE
-node.default['cassandra']['bin_dir']   = ::File.join(node['cassandra']['installation_dir'], 'bin')
-  node['cassandra']['bin_dir'],
BREAKS HERE
-
BREAKS HERE
-  # deprecated in favour of ['audit']['reporter']
-      Chef::Log.warn("node ['audit']['collector'] is deprecated and will be removed from the next major version of the cookbook. Please use node ['audit']['reporter']")
BREAKS HERE
-    allow(Dir).to receive(:entries).and_call_original
-    allow(Dir).to receive(:entries)
-    allow(Dir).to receive(:entries)
BREAKS HERE
-depends          "openstack-common", ">= 0.2.1"
BREAKS HERE
-    enable_submodules node[:opsworks_custom_cookbooks][:enable_submodules]
-      node[:opsworks_custom_cookbooks][:scm][:repository].blank? || ::File.directory?(node[:opsworks_custom_cookbooks][:destination])
BREAKS HERE
-
-if reload_ohai
-  resource.run_action(:reload)
-end
BREAKS HERE
-        nested_dependencies = @graph[name].dependencies.keys
BREAKS HERE
-        new_resource.jvm_options
BREAKS HERE
-include_recipe "nova::nova-common"
-platform_options = node["nova"]["platform"]
-  owner node["nova"]["user"]
-  group node["nova"]["group"]
-directory ::File.dirname(node["nova"]["api"]["auth"]["cache_dir"]) do
-  owner node["nova"]["user"]
-  group node["nova"]["group"]
-  owner  node["nova"]["user"]
-  group  node["nova"]["group"]
BREAKS HERE
-  mode 0755
-  mode 0644
BREAKS HERE
-    wrapper_conf_properties = []
-  fail ArgumentError, 'wrapper_conf_properties is not an Array' unless wrapper_conf_properties.is_a?(Array)
-    action [:enable, :start]
-    tmp_dir_props = [
-      "set set.TMP '#{agent_tmp}'",
-      "set wrapper.java.additional.3 '-Djava.io.tmpdir=#{agent_tmp}'"
-    ]
-    tmp_dir_props = []
-    changes tmp_dir_props.concat(wrapper_conf_properties)
BREAKS HERE
-          if new_resource.append
-            diff = regular_diff
-          else
-            diff = force_replace_diff
-          end
BREAKS HERE
-      if (product == 'chef-server')
-        elsif (v < Mixlib::Versioning.parse('11.0.0')) && (v > Mixlib::Versioning.parse('1.0.0'))
-      elsif (product == 'manage') && (v < Mixlib::Versioning.parse('2.0.0'))
-      elsif (product == 'push-server') && (v < Mixlib::Versioning.parse('2.0.0'))
-      elsif (product == 'push-client') && (v < Mixlib::Versioning.parse('2.0.0'))
-          'package-name' => 'chef-push-client',
-          'package-name' => 'chef-push-server',
-          'ctl-command'  => 'chef-push-ctl',
BREAKS HERE
-  config
-].each do |data_bag_item_id|
-  rabbitmq = node.sensu.rabbitmq.to_hash
-  config = Sensu::Helpers.data_bag_item(data_bag_item_id, true)
-  if config && config["rabbitmq"].is_a?(Hash)
-    rabbitmq = Chef::Mixin::DeepMerge.merge(rabbitmq, config["rabbitmq"])
-  end
-
-  rabbitmq_vhost rabbitmq["vhost"] do
-    action :add
-  end
-
-  rabbitmq_user rabbitmq["user"] do
-    password rabbitmq["password"]
-    action :add
-  end
-  rabbitmq_user rabbitmq["user"] do
-    vhost rabbitmq["vhost"]
-    permissions rabbitmq.fetch("permissions", ".* .* .*")
-    action :set_permissions
BREAKS HERE
-version          "1.4.6"
BREAKS HERE
-  context 'Postgres + Passenger + Apache2' do
BREAKS HERE
-    include_examples 'cache-directory'
BREAKS HERE
-  mode 00644
-  mode 00644
BREAKS HERE
-      berksfile.upload(
-      )
BREAKS HERE
-default[:erlang][:gui_tools] = false
BREAKS HERE
-depends 'openstack-common', '~> 10.0.1'
BREAKS HERE
-default['openresty']['generate_dhparams']            = true
BREAKS HERE
-   )
BREAKS HERE
-case node[:platform]
-  if node[:platform] =~ /ubuntu/i && node[:platform_version].to_f <= 8.04
BREAKS HERE
-        Chef::Log.debug("#{new_resource} connected - skipping")
-        Chef::Log.debug("#{new_resource} not connected - skipping")
-        Chef::Log.debug("#{new_resource} online - skipping")
-        Chef::Log.debug("#{new_resource} offline - skipping")
BREAKS HERE
-  not_if { node[:dynatrace][:agents_package][:installation][:is_required] || platform_family?('windows') }
BREAKS HERE
-  if new_resource.location =~ /:\/\//
-    location_uri = ::URI.parse(new_resource.location)
-    location_filename = ::File.basename(location_uri.path)
-    location = "#{Chef::Config[:file_cache_path]}/#{location_filename}"
-    remote_file location do
-      source new_resource.location
-    location = new_resource.location
-  command = "#{@utils.installDirectory}/bin/featureManager install --when-file-exists=ignore"
-  command << " #{location}"
-private 
BREAKS HERE
-def get_work_nodes
-        all = Set.new get_all_nodes
-        head = Set.new get_head_nodes
-        results = (all - head).to_a
-        return (results = []) ? [node] : results
-end
-
BREAKS HERE
-  include Chef::Mixin::HomebrewUser
-
-      ::Etc.getpwuid(Chef::Mixin::HomebrewUser.find_homebrew_uid).name
BREAKS HERE
-  variables({ :agent_port => agent_port, :server_hostname => server_hostname, :server_port => server_port, :jvm_xmx => collector_jvm_xmx, :jvm_xms => collector_jvm_xms, :jvm_perm_size => collector_jvm_perm_size, :jvm_max_perm_size => collector_jvm_max_perm_size })
-  notifies             :restart, "service[#{name}]", :immediately
-    Dynatrace::Helpers.wait_until_port_is_open(agent_port)
BREAKS HERE
-default['nodejs']['version'] = '0.10.2'
-default['nodejs']['checksum'] = '4eb642897fdb945b49720f2604afc493587aec7a9ff1537e882df659e4dd8aa2'
-default['nodejs']['checksum_linux_x64'] = '44ff658b1c3ae027b75310e0173b7d069ae70f6adaed23d22f2e087f5048c428'
-default['nodejs']['checksum_linux_x86'] = '9970b12b1dda8cbb6272d90b073da90336bce8667b2d57936106bd50c4a035dd'
BREAKS HERE
-property :config_path, String, name_property: true, required: true
-property :users, Array, default: []
-property :groups, Array, default: []
BREAKS HERE
-  env_vars [{'CATALINA_BASE' => '/opt/tomcat_helloworld/' }, { 'CATALINA_PID' => '/opt/tomcat_helloworld/bin/non_standard_location.pid' }, { 'SOMETHING' => 'some_value' }]
BREAKS HERE
-      "Cleanup callbacks for #{@name}/#{resource_name}"
-      "Before callbacks for #{@name}/#{resource_name}"
-        Chef::Log.debug("Registering a before block for #{@name}")
-        Chef::Log.debug("Registering an cleanup block for #{@name}")
-      Chef::Log.warn("Registering on #{event} for #{@name}")
-          Chef::Recipe.new(:choregraphie, "dynamic_resource_for_#{resource.to_s}", run_context).instance_eval do
-            Chef::Recipe.new(:choregraphie, "dynamic_resource_for_#{resource.to_s}", run_context).instance_eval do
BREAKS HERE
-          mode 0640
BREAKS HERE
-default[:ark][:apache_mirror] = 'http://apache.mirrors.tds.net'
-default[:ark][:prefix_root] = "/usr/local"
-default[:ark][:prefix_home] = "share"
-default[:ark][:prefix_install] = "share"
-default[:ark][:prefix_src] = "src"
BREAKS HERE
-  ro_rw = new_resource.writeable ? "rw" : "ro"
-  sync_async = new_resource.sync ? "sync" : "async"
-  options = new_resource.options.join(',')
-  options = ",#{options}" unless options.empty?
-  export_line = "#{new_resource.directory} #{new_resource.network}(#{ro_rw},#{sync_async}#{options})"
-  unless node['nfs']['exports'].include?(export_line)
-    node['nfs']['exports'] << export_line
-    execute "notify_export_create" do
-      command "/bin/true"
-      notifies :create, resources("template[/etc/exports]"), :immediately
-      not_if "grep -q '#{export_line}' /etc/exports"
-      action :run
-    new_resource.updated_by_last_action(true)
-  else
-    Chef::Log.warn("Skipping an export for #{new_resource.directory}, it is already in the export list.")
BREAKS HERE
-            $mycreds = New-Object System.Management.Automation.PSCredential  ('#{new_resource.domain_user}', $secpasswd)
-        $mycreds = New-Object System.Management.Automation.PSCredential ('#{new_resource.domain_user}', $secpasswd)
-  ou_name << new_resource.ou.split("/").reverse.map { |k| "OU=#{k}" }.join(",") << ","
BREAKS HERE
-  timing :immediately
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-    fail
BREAKS HERE
-case node['platform_family']
-when 'debian'
-  service_provider = node['platform'] == 'ubuntu' ? Chef::Provider::Service::Upstart : nil
-  service 'procps' do
-    provider service_provider
-    supports restart: false, reload: false
-    action [:enable, :start]
-    only_if { cookbook_version('sysctl', '< 0.6.0') }
BREAKS HERE
-    curl -L http://registry.npmjs.org/npm/-/npm-#{node['nodejs']['npm']}.tgz | tar xzf - --strip-components=1 && \
BREAKS HERE
-          opts.on('-r', '--remote', String, 'The name of the git remote to push to') do |v|
-          opts.on('-b', '--branch', String, 'The name of the git branch to push to') do |v|
BREAKS HERE
-  let(:chef_run) do
-    runner = ChefSpec::ChefRunner.new
-    runner.converge('recipe[push-jobs::default]')
-  end
-
-  it 'Logs the incompatibility error message when the OS is unsupported' do
-    expect(chef_run).to log 'This cookbook is currently only supported on Windows, Debian-family linux, and Redhat-family linux.'
-  end
-
-      runner = ChefSpec::ChefRunner.new(platform: 'ubuntu', version: '12.04')
-    it 'Does not log the incompatibility error message' do
-      expect(chef_run).not_to log 'This cookbook is currently only supported on Windows, Debian-family linux, and Redhat-family linux.'
-      runner = ChefSpec::ChefRunner.new(platform: 'windows', version: '2008R2')
-    it 'Does not log the incompatibility error message' do
-      expect(chef_run).not_to log 'This cookbook is currently only supported on Windows, Debian-family linux, and Redhat-family linux.'
-end
BREAKS HERE
-  mode '0755'
BREAKS HERE
-    Chef::Log.debug("Clientlib response response body: #{http_resp.body}")
BREAKS HERE
-version           '10.0.0'
BREAKS HERE
-# Cookbook Name:: chef-client
-# Copyright 2010, Opscode, Inc.
BREAKS HERE
-# Cookbook Name:: dmg
-# Copyright 2011, Joshua Timberman
BREAKS HERE
-          :template_finder => template_finder(chef_run, cookbook_name),
BREAKS HERE
-      p find(name, version)[:file]
BREAKS HERE
-restart_on_update = node['openresty']['service']['restart_on_update'] ? ' && $( kill -QUIT `pgrep -U root nginx` || true )' : ''
-    make -j#{node['cpu']['total']} && make install #{restart_on_update}
-  if node['openresty']['restart_on_update']
-    notifies :restart, node['openresty']['resource']
BREAKS HERE
-    "neutron_l3_packages" => [ "neutron-l3-agent" ],
-    "neutron_openvswitch_agent_packages" => ["openstack-neutron-openvswitch-agent"],
-    "neutron_openvswitch_agent_service" => "openstack-neutron-openvswitch-agent",
BREAKS HERE
-      inner_deploy[:passenger_handler] = if File.exists?("#{inner_deploy[:deploy_to]}/current/config.ru")
BREAKS HERE
-  package 'apt-transport-https'
BREAKS HERE
-  pcre_opts = 'export PCRE_CONF_OPT="--enable-utf8 --enable-unicode-properties" && '
-  node.run_state['openresty_configure_flags'] |= [ "--with-pcre=#{pcre_path}", "--with-pcre-conf-opt='--enable-utf8 --enable-unicode-properties'", '--with-pcre-jit' ]
BREAKS HERE
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('keepalive_timeout 15;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-      expect(chef_run).to create_link("/etc/nginx/sites-enabled/#{aws_opsworks_app['shortname']}")
-      expect(chef_run).to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}").with_content(
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-  context 'Mysql + Puma' do
-        solo_node.set['nginx'] = node['nginx']
-    it 'creates nginx puma proxy handler config' do
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('upstream puma_dummy-project.example.com {')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('client_max_body_size 125m;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('client_body_timeout 30;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('keepalive_timeout 15;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_certificate_key /etc/nginx/ssl/dummy-project.example.com.key;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_dhparam /etc/nginx/ssl/dummy-project.example.com.dhparams.pem;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_ecdh_curve secp384r1;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_stapling on;')
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('ssl_session_tickets off;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('extra_config {}')
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('extra_config_ssl {}')
-      expect(chef_run).to create_link("/etc/nginx/sites-enabled/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .with_content('keepalive_timeout 15;')
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-        .not_to render_file("/etc/nginx/sites-available/#{aws_opsworks_app['shortname']}")
-      expect(chef_run).to create_link("/etc/nginx/sites-enabled/#{aws_opsworks_app['shortname']}")
BREAKS HERE
-      context 'template keystone contents' do
BREAKS HERE
-      fail 'Could not find secrets for kitchen-ec2 driver' \
-           ' in delivery-secrets data bag.' if secrets['ec2'].nil?
-      fail 'Could not find secrets for kitchen-azurerm driver' \
-           ' in delivery-secrets data bag.' if secrets['azurerm'].nil?
BREAKS HERE
-    library_file <<-EOF
-    library_file <<-EOF
-    library_file <<-EOF
BREAKS HERE
-    "quantum_dhcp_build_packages" => [ "build-essential", "pkg-config", "libidn11-dev", "libdbus-1-dev", "libnetfilter-conntrack-dev" ],
BREAKS HERE
-is_master_server = server_info.master_server?
BREAKS HERE
-
-# rebooting the must enter a password before being able to set command line boot parameters.
-# boot. Set the PROMPT parameter in /etc/sysconfig/init to no. PROMPT=no 
BREAKS HERE
-
-default[:bamboo][:mysql] = true
BREAKS HERE
-  remote_file "Retrieve certificate from ETCD Master[#{etcd_servers.first['fqdn']}]" do
BREAKS HERE
-end
BREAKS HERE
-          { '4.6' => %w(KB3083186), '4.7.1' => %w(KB4054856) }
-          { '4.6' => %w(KB3083184), '4.7.1' => %w(KB4054856) }
-          { '4.6' => %w(KB3083185), '4.7.1' => %w(KB4054856) }
-          { '4.7.1' => %w(KB4054856) }
BREAKS HERE
-
BREAKS HERE
-            'must be a power of 2' => proc { |value| Math.log2(value) % 1.zero? },
BREAKS HERE
-if node['openresty']['worker_auto_affinity']
BREAKS HERE
-depends          'java', '~> 1.39'
-depends          'runit', '~> 1.7'
-depends          'magic', '~> 1.1'
-depends          'ark', '~> 1.0'
BREAKS HERE
-end
-
-## Grant Service role to Service User for Service Tenant ##
-openstack_user service_user do
-  role_name service_role
-  project_name service_tenant_name
-  connection_params connection_params
-  action :grant_role
BREAKS HERE
-        )
-        )
BREAKS HERE
-      # Store a list of cookbooks to ungraph
-      to_ungraph = {}
-      to_ignore  = {}
-        unless berksfile.has_dependency?(dependency.name)
-          unlock(dependency)
-
-          # Keep a record. We know longer trust these dependencies, but simply
-          # unlocking them does not guarantee their removal from the graph.
-          # Instead, we keep a record of the dependency to unlock it later (in
-          # case it is actually removable because it's parent requirer is also
-          # being removed in this reduction). It's a form of science. Don't
-          # question it too much.
-          to_ungraph[dependency.name] = true
-          to_ignore[dependency.name]  = true
-        next if graphed.nil?
-              to_ungraph[name] = true
-
-              # We also want to ignore the top-level dependency. We can no
-              # longer trust the graph that we have been given for that
-              # dependency and therefore need to reduce it.
-              to_ignore[dependency.name] = true
-      # Now remove all the unlockable items
-      ignore = to_ungraph.merge(to_ignore).keys
-
-      to_ungraph.each do |name, _|
-        graph.remove(name, ignore: ignore)
BREAKS HERE
-	tempdir = ENV['TEMP']}
BREAKS HERE
-default["openstack"]["network"]["l3"]["router_id"] = ""
-default["openstack"]["network"]["l3"]["gateway_external_network_id"] = ""
-default["openstack"]["network"]["openvswitch"]["network_vlan_ranges"] = ""
-default["openstack"]["network"]["openvswitch"]["tunnel_id_ranges"] = ""
-# connectivity.
-default["openstack"]["network"]["openvswitch"]["integration_bridge"] = "br-int"
-# the server.  In most cases, the default value should be fine
-default["openstack"]["network"]["openvswitch"]["tunnel_bridge"] = "br-tun"
-# Peer patch port in integration bridge for tunnel bridge
-default["openstack"]["network"]["openvswitch"]["int_peer_patch_port"] = "patch-tun"
-# Peer patch port in tunnel bridge for integration bridge
-default["openstack"]["network"]["openvswitch"]["tun_peer_patch_port"] = "patch-int"
-# empty for the server. Set local-ip to be the local IP address of
-# this hypervisor
-default["openstack"]["network"]["openvswitch"]["local_ip"] = ""
-default["openstack"]["network"]["openvswitch"]["bridge_mappings"] = ""
BREAKS HERE
-  user "root"
BREAKS HERE
-  options = { :shutdown => true }
-  options = { :newmachine => false }
BREAKS HERE
-web_app 'postfixadmin-ssl' do
BREAKS HERE
-            override_name: 'chef-es',
-            override_name: 'auth-token',
-          override_name: 'single_peer',
-            override_name: 'multiple_peers',
-        expect(chef_run).to create_systemd_unit('hab-sup-default.service').with(
-              ExecStart: '/bin/hab sup run ',
-      it 'starts the hab-sup-default service' do
-        expect(chef_run).to start_service('hab-sup-default')
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('systemd_unit[hab-sup-default.service]')
-        expect(chef_run.service('hab-sup-default'))
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders a systemd_unit file with custom ExecStart' do
-        expect(chef_run).to create_systemd_unit('hab-sup-chef-es.service').with(
-          content: {
-            Unit: {
-              Description: 'The Habitat Supervisor',
-            },
-            Service: {
-              ExecStart: '/bin/hab sup run --listen-gossip 0.0.0.0:9998 --listen-http 0.0.0.0:9999 --override-name chef-es',
-              Restart: 'on-failure',
-            },
-            Install: {
-              WantedBy: 'default.target',
-            },
-          }
-        )
-      end
-
-      it 'starts the hab-sup-chef-es service' do
-        expect(chef_run).to start_service('hab-sup-chef-es')
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('systemd_unit[hab-sup-chef-es.service]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders a systemd_unit file with auth options' do
-        expect(chef_run).to create_systemd_unit('hab-sup-auth-token.service').with(
-          content: {
-            Unit: {
-              Description: 'The Habitat Supervisor',
-            },
-            Service: {
-              Environment: 'HAB_AUTH_TOKEN=test',
-              ExecStart: '/bin/hab sup run --listen-gossip 0.0.0.0:10000 --listen-http 0.0.0.0:10001 --override-name auth-token',
-              Restart: 'on-failure',
-            },
-            Install: {
-              WantedBy: 'default.target',
-            },
-          }
-        )
-      end
-
-      it 'starts the hab-sup-auth-token service' do
-        expect(chef_run).to start_service('hab-sup-auth-token')
-        expect(chef_run.service('hab-sup-auth-token'))
-          .to subscribe_to('systemd_unit[hab-sup-auth-token.service]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-auth-token'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-auth-token'))
-        expect(chef_run).to create_template('/etc/init/hab-sup-default.conf').with(
-          source: 'upstart/hab-sup.conf.erb',
-          cookbook: 'habitat',
-          owner: 'root',
-          group: 'root',
-          mode: '0644',
-          variables: {
-            exec_start_options: '',
-            auth_token: nil,
-          }
-        )
-      end
-
-      it 'starts the hab-sup-default service' do
-        expect(chef_run).to start_service('hab-sup-default')
-          .with(provider: Chef::Provider::Service::Upstart)
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('template[/etc/init/hab-sup-default.conf]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders a upstart config with custom options' do
-        expect(chef_run).to create_template('/etc/init/hab-sup-chef-es.conf').with(
-            exec_start_options: '--listen-gossip 0.0.0.0:9998 --listen-http 0.0.0.0:9999 --override-name chef-es',
-      it 'starts the hab-sup-chef-es service' do
-        expect(chef_run).to start_service('hab-sup-chef-es')
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('template[/etc/init/hab-sup-chef-es.conf]')
-        expect(chef_run.service('hab-sup-chef-es'))
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders a upstart config with auth options' do
-        expect(chef_run).to create_template('/etc/init/hab-sup-auth-token.conf').with(
-          source: 'upstart/hab-sup.conf.erb',
-          cookbook: 'habitat',
-          owner: 'root',
-          group: 'root',
-          mode: '0644',
-          variables: {
-            exec_start_options: '--listen-gossip 0.0.0.0:10000 --listen-http 0.0.0.0:10001 --override-name auth-token',
-            auth_token: 'test',
-          }
-        )
-      end
-
-      it 'starts the hab-sup-auth-token service' do
-        expect(chef_run).to start_service('hab-sup-auth-token')
-          .with(provider: Chef::Provider::Service::Upstart)
-        expect(chef_run.service('hab-sup-auth-token'))
-          .to subscribe_to('template[/etc/init/hab-sup-auth-token.conf]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-auth-token'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-auth-token'))
-        expect(chef_run).to create_template('/etc/init.d/hab-sup-default').with(
-            name: 'hab-sup-default',
-            exec_start_options: '',
-      it 'starts the hab-sup-default service' do
-        expect(chef_run).to start_service('hab-sup-default')
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('template[/etc/init.d/hab-sup-default]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-default'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders an init script with custom options' do
-        expect(chef_run).to create_template('/etc/init.d/hab-sup-chef-es').with(
-          source: 'sysvinit/hab-sup-debian.erb',
-          cookbook: 'habitat',
-          owner: 'root',
-          group: 'root',
-          mode: '0755',
-          variables: {
-            name: 'hab-sup-chef-es',
-            exec_start_options: '--listen-gossip 0.0.0.0:9998 --listen-http 0.0.0.0:9999 --override-name chef-es',
-            auth_token: nil,
-          }
-        )
-      end
-
-      it 'starts the hab-sup-chef-es service' do
-        expect(chef_run).to start_service('hab-sup-chef-es')
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('template[/etc/init.d/hab-sup-chef-es]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('hab_package[core/hab-sup]')
-          .on(:restart).delayed
-        expect(chef_run.service('hab-sup-chef-es'))
-          .to subscribe_to('hab_package[core/hab-launcher]')
-          .on(:restart).delayed
-      end
-
-      it 'renders an init script with auth options' do
-        expect(chef_run).to create_template('/etc/init.d/hab-sup-auth-token').with(
-          source: 'sysvinit/hab-sup-debian.erb',
-          cookbook: 'habitat',
-          owner: 'root',
-          group: 'root',
-          mode: '0755',
-          variables: {
-            name: 'hab-sup-auth-token',
-            exec_start_options: '--listen-gossip 0.0.0.0:10000 --listen-http 0.0.0.0:10001 --override-name auth-token',
-            auth_token: 'test',
-          }
-        )
-      end
-
-      it 'starts the hab-sup-auth-token service' do
-        expect(chef_run).to start_service('hab-sup-auth-token')
-        expect(chef_run.service('hab-sup-auth-token'))
-          .to subscribe_to('template[/etc/init.d/hab-sup-auth-token]')
-        expect(chef_run.service('hab-sup-auth-token'))
-        expect(chef_run.service('hab-sup-auth-token'))
BREAKS HERE
-      node_hash['disks'] = node['filesystem'].map { |d, o| d if d.to_s =~ /^\/dev/ && o['fs_type'] != 'swap' && o.key?('mount') }.compact
-      node_hash['custom_vars']['cpu'] = node['cpu']['total']
-      if node['memory']['total']
-        node_hash['custom_vars']['memory'] = (node['memory']['total'].gsub(/\D/, '').to_i / 1024).to_s + 'MB'
-      end
BREAKS HERE
-if node[:platform] == 'ubuntu' && node[:platform_version].to_f >= 13.10
-  default[:apache][:mpm] = 'event'
-end
-default[:bamboo][:apache2][:access_log]         = ''
-default[:bamboo][:apache2][:error_log]          = ''
-default[:bamboo][:apache2][:port]               = 80
-default[:bamboo][:apache2][:virtual_host_alias] = node[:fqdn]
-default[:bamboo][:apache2][:virtual_host_name]  = node[:hostname]
-default[:bamboo][:apache2][:error_docs][:e503]  = ''
-default[:bamboo][:apache2][:ssl][:access_log]       = ''
-default[:bamboo][:apache2][:ssl][:chain_file]       = ''
-default[:bamboo][:apache2][:ssl][:error_log]        = ''
-default[:bamboo][:apache2][:ssl][:port]             = 443
-case node[:platform_family]
-  default[:bamboo][:apache2][:ssl][:certificate_file] = '/etc/pki/tls/certs/localhost.crt'
-  default[:bamboo][:apache2][:ssl][:key_file]         = '/etc/pki/tls/private/localhost.key'
-  default[:bamboo][:apache2][:ssl][:certificate_file] = '/etc/ssl/certs/ssl-cert-snakeoil.pem'
-  default[:bamboo][:apache2][:ssl][:key_file]         = '/etc/ssl/private/ssl-cert-snakeoil.key'
BREAKS HERE
-version '14.0.0'
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
BREAKS HERE
-      (value.respond_to?(:empty?) ? value.empty? : !value) || value.instance_of?(Hash) && value.delete_blank.empty?
BREAKS HERE
-        ridley_options[:ssl]         = { verify: (options[:ssl_verify] || Berkshelf.config.ssl.verify) }
BREAKS HERE
-    property :password, [String, nil]
BREAKS HERE
-  [{ 'name' => 'hawkular-metrics', 'labels' => { 'metrics-infra' => 'hawkular-metrics' }, 'host' => node['cookbook-openshift3']['openshift_metrics_hawkular_hostname'], 'to' => { 'kind' => 'Service', 'name' => 'hawkular-metrics' }, 'tls' => true, 'tls_termination' => 'reencrypt', 'tls_key' => node['cookbook-openshift3']['openshift_metrics_hawkular_key'].empty? ? '' : `base64 --wrap 0 #{node['cookbook-openshift3']['openshift_metrics_hawkular_key']}`, 'tls_certificate' => node['cookbook-openshift3']['openshift_metrics_hawkular_cert'].empty? ? '' : `base64 --wrap 0 #{node['cookbook-openshift3']['openshift_metrics_hawkular_cert']}`, 'tls_ca_certificate' => node['cookbook-openshift3']['openshift_metrics_hawkular_ca'].empty? ? '' : `base64 --wrap 0 #{node['cookbook-openshift3']['openshift_metrics_hawkular_ca']}`, 'tls_destination_ca_certificate' => `base64 --wrap 0 #{Chef::Config['file_cache_path']}/hosted_metric/ca.crt` }].each do |route|
BREAKS HERE
-                            ssl: {verify: Berkshelf::Config.instance.ssl.verify, cert_store: ssl_policy.store},
BREAKS HERE
-        # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-        n.set['cpu']['total'] = 1
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS do |n|
-        # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-        n.set['cpu']['total'] = 1
-      end
-      # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-      node.set['cpu']['total'] = 1
-        chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS do |n|
-          # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-          n.set['cpu']['total'] = 1
-        end
-          # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-          n.set['cpu']['total'] = 1
-          # TODO: Remove work around once https://github.com/customink/fauxhai/pull/77 merges
-          n.set['cpu']['total'] = 1
BREAKS HERE
-    Chef::Log.debug("The object already exists")
-    cmd = "dsadd"
-    cmd << " group "
-    cmd << CmdHelper.dn(new_resource.name, new_resource.ou, new_resource.domain_name)
-    CmdHelper.shell_out(cmd, new_resource.cmd_user, new_resource.cmd_pass, new_resource.cmd_domain)
-    cmd = "dsmod"
-    cmd << " group "
-    cmd << CmdHelper.dn(new_resource.name, new_resource.ou, new_resource.domain_name)
-    CmdHelper.shell_out(cmd, new_resource.cmd_user, new_resource.cmd_pass, new_resource.cmd_domain)
-    Chef::Log.error("The object does not exist")
-    cmd = "dsmove "
-    cmd << CmdHelper.dn(new_resource.name, new_resource.ou, new_resource.domain_name)
-    CmdHelper.shell_out(cmd, new_resource.cmd_user, new_resource.cmd_pass, new_resource.cmd_domain)
-    Chef::Log.error("The object does not exist")
-    cmd = "dsrm "
-    cmd << CmdHelper.dn(new_resource.name, new_resource.ou, new_resource.domain_name)
-    cmd << " -noprompt"
-    CmdHelper.shell_out(cmd, new_resource.cmd_user, new_resource.cmd_pass, new_resource.cmd_domain)
-    Chef::Log.debug("The object has already been removed")
-  check = Mixlib::ShellOut.new("dsquery group -name \"#{new_resource.name}\"").run_command
-  check.stdout.downcase.include? "dc"
BREAKS HERE
-      ensure_cli_present!
BREAKS HERE
-        # appears to be dead code
-        #chefignore       = nil
-        #raw_metadata_files = []
-          files = FileSyncer.glob(File.join(src, "*"))
-          FileUtils.cp_r(files, cookbook_destination)
BREAKS HERE
-        new_resource.filename "#{new_resource.filename}.conf"
-        new_resource.subresource_rules.each do |block|
-          myname = block[0]
-          code = block[1]
-          # The resource used to be named after itself.  Instead now we'll just generate a generic name
-          # Obviously it would be nicer to jump inside ulimit_rule and rename it, however that's
-          # actually tricky to do while maintaining compatability
-          if myname.nil?
-            myname = "rule-#{seq}"
-            seq += 1
-          end
-          ulimit_rule "#{new_resource.name}:#{myname}" do
-            domain new_resource
-            instance_eval &code
-          end
-        end
-        new_resource.filename "#{new_resource.filename}.conf"
BREAKS HERE
-      node.set['openstack']['compute']['conf']['libvirt']['virt_type'] = 'kvm'
-      node.set['openstack']['compute']['conf']['libvirt']['virt_type'] = 'qemu'
-        node.set['openstack']['compute']['conf']['libvirt']['virt_type'] = virt_type
-        node.set['openstack']['compute']['platform']["#{virt_type}_compute_packages"] = ["my-nova-#{virt_type}"]
BREAKS HERE
-		  rv[k.dup] = v
BREAKS HERE
-      def run(cookbooks_to_update = [])
-          update_lock_and_install(cookbooks_to_update)
-      def update_lock_and_install(cookbooks_to_update)
-        ui.msg "Updating #{cookbooks_to_update.join(',')} cookbooks"
-        to_update = policyfile_lock.solution_dependencies.transitive_deps(cookbooks_to_update)
BREAKS HERE
-version '2.6.1'
BREAKS HERE
-  supports :restart => true, :status => false
BREAKS HERE
-      ::Chef::Recipe.any_instance.stub(:search).
-        with(:node, "roles:os-block-storage-scheduler").
-        and_return([OpenStruct.new(:name => "fauxhai.local")])
-      bin_str="/usr/bin/cinder-volume-usage-audit > /var/log/cinder/audit.log"
-      crontests = [ [:minute, '00'], [:hour, '*'], [:day, '*'],
-                    [:weekday, '*'], [:month, '*'], [:user, 'cinder'] ]
-      crontests.each do |k,v|
-      crontests = [ [:minute, '50'], [:hour, '23'], [:day, '6'],
-                    [:weekday, '5'], [:month, '11'], [:user, 'foobar'] ]
-      ::Chef::Recipe.any_instance.stub(:search).
-        with(:node, "roles:os-block-storage-scheduler").
-        and_return([OpenStruct.new(:name => "foobar")])
-        crontests.each do |k,v|
-      crontests.each do |k,v|
BREAKS HERE
-#Needed when installing x-pack plugin
-#Create the X-Pack Test User
BREAKS HERE
-
BREAKS HERE
-  not_if do File.exists?('/var/lib/apt/periodic/update-success-stamp') end
BREAKS HERE
-                                        '/usr/lib/nagios/plugins'
-                                      else
BREAKS HERE
-directory Chef::Config.platform_specific_path("/etc/chef") do
-  unless platform_family?("windows")
-    owner "root"
-    group "root"
-template Chef::Config.platform_specific_path("/etc/chef/push-jobs-client.rb") do
-  source "push-jobs-client.rb.erb"
-  unless platform_family?("windows")
-    owner "root"
-    group "root"
BREAKS HERE
-  if node['platform'] == 'ubuntu' && node['platform_version'].to_i < 12
-    default['openldap']['packages']['bdb'] = 'db4.8-util'
-  else
-    default['openldap']['packages']['bdb'] = 'db-util'
-  end
BREAKS HERE
-  store_with({"engine" => "S3", "settings" => { "s3.access_key_id" => "#{node[:bamboo][:backup][:s3_access_key_id]}", "s3.secret_access_key" => "#{node[:bamboo][:backup][:s3_secret_access_key]}", "s3.bucket" => "#{node[:bamboo][:backup][:s3_bucket]}", "s3.path" => "bamboo", "s3.keep" => 5, "s3.fog_options" => {  :host => "#{node[:bamboo][:backup][:s3_host]}", :scheme => "#{node[:bamboo][:backup][:s3_scheme]}", :port => "#{node[:bamboo][:backup][:s3_port]}" } } } )
-  options({"add" => ["#{node['bamboo']['data_dir']}"], "tar_options" => "-p"  })
-  store_with({"engine" => "S3", "settings" => { "s3.access_key_id" => "#{node[:bamboo][:backup][:s3_access_key_id]}", "s3.secret_access_key" => "#{node[:bamboo][:backup][:s3_secret_access_key]}", "s3.bucket" => "#{node[:bamboo][:backup][:s3_bucket]}", "s3.path" => "bamboo", "s3.keep" => 5, "s3.fog_options" => {  :host => "#{node[:bamboo][:backup][:s3_host]}", :scheme => "#{node[:bamboo][:backup][:s3_scheme]}", :port => "#{node[:bamboo][:backup][:s3_port]}" } } } )
BREAKS HERE
-connection_info = {:host => node[:nova][:db_host], :username => "root", :password => node['mysql']['server_root_password']}
BREAKS HERE
-    ChefSpec::SoloRunner.new(platform: 'mac_os_x',
-                             version: '10.10',
-                             step_into: ['osquery_conf']
-                            ) do |node|
BREAKS HERE
-  #notifies :restart, resources(:service => "drbd"), :immediate
-#drbdadm create-md resource
BREAKS HERE
-default['openresty']['source']['prefix']    = '/usr'
-  "--http-client-body-temp-path=#{node['nginx']['cache_dir']}/client_temp",
-  "--http-proxy-temp-path=#{node['nginx']['cache_dir']}/proxy_temp",
-  "--http-fastcgi-temp-path=#{node['nginx']['cache_dir']}/fastcgi_temp",
-  "--http-uwsgi-temp-path=#{node['nginx']['cache_dir']}/uwsgi_temp",
-  "--http-scgi-temp-path=#{node['nginx']['cache_dir']}/scgi_temp",
BREAKS HERE
-      let(:passing_foodcritic) { "\nRun with Foodcritic Version 7.0.1 with tags ~FC031 ~FC045" }
-        "FC064: Ensure issues_url is set in metadata:\nRun with Foodcritic Version 7.0.1 with tags ~FC031 ~FC045"
BREAKS HERE
-      "install #{package_name} --no-use-wheel --upgrade " \
BREAKS HERE
-version          '17.0.0'
-depends 'openstack-common', '>= 17.0.0'
BREAKS HERE
-  source "response.varfile.erb"
-  owner "root"
-  group "root"
-  mode "0644"
-  mode      "0755"
-execute "Generating Self-Signed Java Keystore" do
-if settings['database']['type'] == "mysql"
-  include_recipe "mysql_connector"
-template "/etc/init.d/confluence" do
-  source "confluence.init.erb"
-  mode   "0755"
-  notifies :restart, "service[confluence]", :delayed
-service "confluence" do
-  subscribes :restart, resources("java_ark[jdk]")
BREAKS HERE
-include_recipe 'mongodb3::default'
BREAKS HERE
-depends 'openldap', '~> 2.1'
BREAKS HERE
-  klass.new(::File.read(path))
BREAKS HERE
-    if File.file?(conf) && File.extname(entry) == ".conf" && !keys.include?(File.basename(entry, ".conf"))
-      file conf do
-        backup false
-        action :delete
-        notifies :restart, "service[collectd]"
-      end
BREAKS HERE
-               ['--no-doc', '--no-ri', '--system' ]
BREAKS HERE
-version '2.2.8'
BREAKS HERE
-  EOH
-  EOH
-  EOH
BREAKS HERE
-default[:rabbitmq][:port]  = nil
BREAKS HERE
-  preseed['add_kernel_opts'] = ''
BREAKS HERE
-# All rights reserved - Do Not Redistribute
-#
BREAKS HERE
-      chef_opts = {
-        rest_timeout: opts[:timeout], # opts[:open_timeout] is ignored on purpose
-        headers: opts[:headers],
-        client_name: opts[:client_name],
-        signing_key_filename: opts[:client_key],
-        ssl_verify_mode: opts[:verify] ? :verify_none : :verify_peer,
-        ssl_ca_path: opts[:ssl][:ca_path],
-        ssl_ca_file: opts[:ssl][:ca_file],
-        ssl_client_cert: opts[:ssl][:client_cert],
-        ssl_client_key: opts[:ssl][:client_key],
-      }
BREAKS HERE
-    let(:soloist_rc) { Soloist::RoyalCrown.new(:recipes => ["guts"], :node_attributes => {:reliable => "maybe"}) }
-    let(:other_rc) { Soloist::RoyalCrown.new(:recipes => ["chum"], :node_attributes => {:tasty => "maybe"}) }
-      config.royal_crown.node_attributes.keys.should =~ [:reliable, :tasty]
-      other_config.royal_crown.node_attributes.should == {:tasty => "maybe"}
BREAKS HERE
-  rhel_version = node['platform_version'].to_i
BREAKS HERE
-    default['openstack']['endpoints'][service][ep_type]['scheme'] = 'http'
-    default['openstack']['endpoints']['image_api'][ep_type]['path'] = ''
-    default['openstack']['endpoints']['image_registry'][ep_type]['path'] = '/v2'
-  end
-  %w(endpoints bind_service).each do |type|
-    default['openstack'][type]['image_registry'][ep_type]['host'] = '127.0.0.1'
-    default['openstack'][type]['image_registry'][ep_type]['port'] = 9191
-    default['openstack'][type]['image_api'][ep_type]['host'] = '127.0.0.1'
-    default['openstack'][type]['image_api'][ep_type]['port'] = 9292
BREAKS HERE
-        def method_missing(key, value = nil)
-          if value.nil?
-            store key.to_sym, value
BREAKS HERE
-      # cygwin rsync path must be adjusted to work
-      def adjust_rsync_path(path)
-        path_s.gsub(/^(\w):/) { "/cygdrive/#{$1}" }
-        adjust_rsync_path(path)
-        adjust_rsync_path(path)
BREAKS HERE
-version           '9.1.1'
BREAKS HERE
-    source "#{node['platform']}/prometheus.erb"
BREAKS HERE
-    DEFAULT_BERKSFILE_PATH = File.join(Dir.pwd, Berkshelf::DEFAULT_FILENAME).freeze
-
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
-      default: DEFAULT_BERKSFILE_PATH,
BREAKS HERE
-      deps.map{|dep| dep['value'].strip }
BREAKS HERE
-      File.delete(compiled_metadata) unless compiled_metadata.nil?
BREAKS HERE
-default[:passenger][:version] = '4.0.42'
BREAKS HERE
-  if node['platform'] == 'freebsd'
BREAKS HERE
-  service "example_service" do
BREAKS HERE
-    cookbook.update_attribute(:user_id, recipient.id)
-      collaborators.where(user_id: initiator.id).first_or_create!
BREAKS HERE
-  mode 00644
BREAKS HERE
-    Chef::Application.fatal!("You must set node['mysql']['database']['password'] in chef-solo mode.");
BREAKS HERE
-  use_ssl: node['openstack']['mq']['rabbitmq']['use_ssl']
BREAKS HERE
-    def download
-      if installed?
-        cookbook = CachedCookbook.from_store_path(install_path)
-        return super(cookbook)
-      end
-      unless install_path.join('.git').exist?
-        FileUtils.rm_rf(install_path)
-        git %|clone --no-checkout "#{cache_path}" "#{install_path}"|
-        install_path.chmod(0777 & ~File.umask)
-      end
-      Dir.chdir(install_path) do
-          git %|filter-branch --subdirectory-filter "#{rel}"|
-      cookbook = CachedCookbook.from_store_path(install_path)
-      super(cookbook)
-    # Determine if this revision is installed.
-    #
-    # @return [Boolean]
-    def installed?
-      revision && install_path.exist?
-    end
-
BREAKS HERE
-      include HealthInspector::Runner
-      checklist HealthInspector::Checklists::Cookbooks
BREAKS HERE
-        %w[
-        ]
-          current_resource.properties['jcr:primaryType']
BREAKS HERE
-depends           'openstack-common', '>= 11.0.0'
BREAKS HERE
-node['perl']['packages'].each do |perl_pkg|
-  package perl_pkg
-end
-cpanm = node['perl']['cpanm'].to_hash
-root_group = (node[:platform] == "mac_os_x") ? "admin" : "root"
-remote_file cpanm['path'] do
-  source cpanm['url']
-  checksum cpanm['checksum']
-  owner "root"
-  group root_group
-  mode 0755
BREAKS HERE
-  mode 0755
-
-
BREAKS HERE
-        require 'librarian/action'
-        require 'librarian/chef'
-        return unless File.exist? 'Cheffile'
-        ui.msg "Installing Librarian cookbooks..."
-        Librarian::Action::Resolve.new(librarian_env).run
-        Librarian::Action::Install.new(librarian_env).run
BREAKS HERE
-      print "environment : #{cpan_env} "
-def install_perl_code
-    cmd = 'CPAN::Shell->force("install",$ARGV[0])' 
-    cmd = 'CPAN::Shell->install($ARGV[0])' 
-   cmd = 'CPAN::Shell->test($ARGV[0])' 
-  bash "tar -zxf #{tarball_name}" do
-  cmd << install_perl_code
-  cmd << install_perl_code
-  cmd << "' '.'  2>&1 > #{install_log_file}"
BREAKS HERE
-default['postfixadmin']['map_files']['path'] = '/etc/postfix/sql'
BREAKS HERE
-    fail "You may only define a single heartbeat resource per node. Found #{res}: #{res.defined_at}" if res.is_a?(self.class) && res.name != name
-  fail 'No resource groups specified' if resource_groups.empty?
-  fail 'No resources found in group' if group.sub_resources.empty?
-    fail 'The first resource in each group must be distinct' if g.sub_resources.first.to_resource == group.sub_resources.first.to_resource
BREAKS HERE
-      # ascertain if current real-time-clock mode (utc or local) matches argument
BREAKS HERE
-require 'poise'
-  class Resource::KibanaWeb < Resource
-    include Poise
-  class Provider::KibanaWeb < Provider
-    include Poise
-    def action_create
-              notifies :reload, 'service[nginx]'
-    def action_remove
BREAKS HERE
-          @sv_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(sv_dir_name, run_context)
-              d.recursive(true)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-      manage_plugin('remove #{new_resource.plugin_name}')
BREAKS HERE
-      'registry_svc_ip' => `#{node['cookbook-openshift3']['openshift_common_client_binary']} get service docker-registry -o jsonpath='{.spec.clusterIP}' --config=admin.kubeconfig -n #{node['cookbook-openshift3']['openshift_hosted_registry_namespace']}`
-      'registry_svc_ip' => `#{node['cookbook-openshift3']['openshift_common_client_binary']} get service docker-registry -o jsonpath='{.spec.clusterIP}' --config=admin.kubeconfig -n #{node['cookbook-openshift3']['openshift_hosted_registry_namespace']}`
-    ) 
-    ) 
-    ) 
-    ) 
BREAKS HERE
-      path ::File.join(filebeat_install_resource.prospectors_dir, "lwrp-prospector-#{new_resource.name}.yml")
-      path ::File.join(filebeat_install_resource.prospectors_dir, "lwrp-prospector-#{new_resource.name}.yml")
-    path ::File.join(filebeat_install_resource.prospectors_dir, "lwrp-prospector-#{new_resource.name}.yml")
BREAKS HERE
-    block { ENV["JVM_ARGS"] = "-DautoAcceptCertificates=true" }
-    not_if { ENV["JVM_ARGS"] == "-DautoAcceptCertificates=true" }
BREAKS HERE
-      if self.sha == lockfile.sha
-        local_dependencies = locked_dependencies
-      else
-        local_dependencies = apply_lockfile(dependencies(options))
-      end
BREAKS HERE
-default['icinga2']['include_itl'] = ['itl', 'plugins']
BREAKS HERE
-# For other recipes to call to force an update
-e = execute 'apt-get-update' do
-  command 'apt-get update'
-  ignore_failure true
-  only_if { apt_installed? }
-  action :nothing
-end
-execute 'apt-get-update (first run)' do
BREAKS HERE
-# Cookbook Name:: resolver
-# Copyright 2009-2016, Chef Software, Inc.
BREAKS HERE
-case node['platform']
BREAKS HERE
-  owner 'root' 
-  cookbook node["bcpc"]["hadoop"]["zabbix"]["cookbook"] if node["bcpc"]["hadoop"]["zabbix"]["cookbook"]
-    
-    zbx=ZabbixApi.connect(:url => "https://#{node['bcpc']['management']['vip']}:#{node['bcpc']['zabbix']['web_port']}/api_jsonrpc.php", 
-                          :user => 'admin', 
-                          :password => "#{get_config!('password','zabbix-admin','os')}")
-    graphite_hosts = (get_node_attributes(MGMT_IP_ATTR_SRCH_KEYS,"graphite","bcpc").map {|v| v['mgmt_ip']}).join(",")
-    if zbx.hostgroups.get_id(:name => "#{node.chef_environment}").nil?
-      zbx.hostgroups.create(:name => "#{node.chef_environment}")
-      # Create host entries in Zabbix. 
-      if zbx.hosts.get_id(:host => "#{trigger_host}").nil?
-        zbx.hosts.create(:host => "#{trigger_host}", 
-                         :interfaces => [ {:type => 1,:main => 1,:ip => '127.0.0.1', :dns => '127.0.0.1', :port => 10050, :useip => 0}], 
-                         :groups => [ :groupid => zbx.hostgroups.get_id(:name => "#{node.chef_environment}") ])
-      
-      # FIXME: 
-      # Following zbx.applications.create only adds the first host to the application
-      # The items that are created latest are not added to the application. To add them one has to 
-      # specify "attributes => [ "<zabbix id for hadoop application>" ]" to the zbx.items.create_or_update call
-      # but when tried it failed complaining that application hadoop is not available on the host.
-      # This is for all the hosts other than the first one which was passed in while creating the application.
-      if zbx.applications.get_id(:name => "hadoop").nil?
-        zbx.applications.create(:name => "hadoop", 
-                                :hostid => zbx.hosts.get_id(:host => "#{trigger_host}"))
-        # Create zabbix items for each hosts which will accept data from zabbix sender processes
-        end  
-        if attrs['trend_days'].nil?             
-          value_type = 3
-        
-        # By default an item and its trigger & actions are disabled, which can be overwritten through attributes file
-        
-        # type, value_type and data_type can be made configurable through attributes
-        zbx.items.create_or_update(:name => trigger_key, 
-                                   :description => trigger_key, 
-                                   :key_ => trigger_key, 
-                                   :type => 2, 
-                                   :value_type => value_type, 
-                                   :data_type => 0, 
-                                   :history => history_days, 
-                                   :trends => trend_days, 
-                                   :hostid => zbx.hosts.get_id(:host => "#{trigger_host}"), 
-                                   :trapper_hosts => graphite_hosts,
-                                   :status => status)
-        # Create zabbix triggers on the items so that actions can be taken if a trigger even occurs
-        # For all triggers a companion trigger is created to check whether the zabbix sender cron job is active and sends data to zabbix
-            dependency = Hash.new
-            dependency['triggerid'] = zbx.triggers.get_id(:description => dep)
-            dependencies.push(dependency)
-        expr = "{"+"#{trigger_host}"+":"+trigger_key+"."+"#{attrs['trigger_val']}"+"}"+"#{attrs['trigger_cond']}"
-        if (trigger_id = zbx.triggers.get_id(:description => trigger_name)).nil?
-          zbx.triggers.create(:description => trigger_name,
-                              :expression => expr,
-                              :comments => attrs['trigger_desc'],
-                              :priority => attrs['severity'],
-                              :status => status,
-                              :dependencies => dependencies)
-          #cron_check_cond << "{"+"#{trigger_host}"+":"+trigger_key+".nodata(#{node["bcpc"]["hadoop"]["zabbix"]["cron_check_time"]})}=1"
-          #
-          # Create an action for each trigger which will inturn execute a shell script when the trigger status turns to PROBLEM state
-          #
-          zbx.query(method: 'action.create', 
-                    params: {"name" => "#{trigger_name}_action","eventsource" =>  0,"evaltype" => 1,"status" => status,"esc_period" => 120, 
-                    'conditions' => [{"conditiontype" => 3,"operator" => 2,"value" => trigger_name}, 
-                                     {"conditiontype" => 5,"operator" => 0,"value" => 1}, 
-                                     {"conditiontype" => 16,"operator" => 7}], 
-                    'operations' => [{"operationtype" => 1,"opcommand" => {"command" => "#{node['bcpc']['zabbix']['scripts']['mail']} {TRIGGER.NAME} #{node.chef_environment} #{attrs['severity']} '#{attrs['trigger_desc']}' #{trigger_host} #{attrs['route_to']}" ,"type" => "0","execute_on" => "1"},
-                    "opcommand_hst" => [ "hostid" => 0]}]})            
-          zbx.triggers.update(:triggerid => trigger_id, :expression => expr, :comments => attrs['trigger_desc'], :priority => attrs['severity'], :status => status, :dependencies => dependencies)
-          action =  zbx.query(method: 'action.get', params: { "filter"=> { "name"=> "#{trigger_name}_action" } } )
-          if not action.empty? and action[0].has_key?('actionid')
-            zbx.query(method: 'action.update', 
-                      params: {"actionid" => "#{action[0]['actionid']}", "status" => status, 
-                               'operations' => [
-                                { "operationtype" => 1,
-                                  "opcommand" => {"command" => "#{node['bcpc']['zabbix']['scripts']['mail']} {TRIGGER.NAME} #{node.chef_environment} #{attrs['severity']} '#{attrs['trigger_desc']}' #{trigger_host} #{attrs['route_to']}" ,"type" => "0","execute_on" => "1"},
-                                  "opcommand_hst" => [ "hostid" => 0]           
-                                }
-                               ]
-                              }
-                      )            
-          end # if not action.empty? and action[0].has_key?('actionid')
-        end
-    end #node["bcpc"]["hadoop"]["graphite"]["queries"].each 
-    # Create a dummy trigger using all the items defined during the first run of this recipe to perform cron status check
-    # Change reverted back due to issue https://www.zabbix.com/forum/showthread.php?t=46276
-    #  zbx.triggers.create(:description => "cron_check", :expression => cron_check_expr, :comments => "Cron down", :priority => 4, :status => 0)
BREAKS HERE
-    DEFAULT_LOCATIONS = [
-      {
-        type: :site,
-        value: :opscode,
-        options: Hash.new
-      }
-    ].freeze
-
-    attr_reader :locations
-    # @option options [Array<Hash>] locations
-      @locations = options[:locations] || DEFAULT_LOCATIONS
-      set_source(source)
-        add_source(CookbookSource.new(name, constraint: constraint, locations: locations))
-      # @param [CookbookSource] source
-      def set_source(source)
-        @sources[source.name] = source
-      end
-
BREAKS HERE
-cookbook_path            [File.expand_path("~/.berkshelf/cookbooks"), File.expand_path("../../cookbooks", __FILE__)]
BREAKS HERE
-  if platform_version.to_f < 7
BREAKS HERE
-      let(:chefdk_config) { double("Mixlib::Config context for ChefDK", generator_cookbook: generator_cookbook_path) }
-
BREAKS HERE
-default['nfs']['exports'] = Array.new
BREAKS HERE
-  def self.honor_local_mode(local_mode_default = true)
BREAKS HERE
-    let(:cookbook1_versionA) do 
BREAKS HERE
-          files = FileSyncer.glob(File.join(src, '*'))
BREAKS HERE
-        'action' => op
BREAKS HERE
-      @after  = []
-    def after_block_name(resource_name)
-      "After callbacks for #{@name}/#{resource_name}"
-    def after(&block)
-        Chef::Log.debug("Registering an after block for #{@name}")
-        @after << block
-      @after
-        after_events  = after
-        ruby_block after_block_name(event) do
-          block do
-            Chef::Log.debug "Resource #{resource_name} has converged"
-            before_events.each { |b| b.call(resource_name) }
-          action :nothing
-          subscribes :create, event, :immediately
BREAKS HERE
-depends          'apt'
BREAKS HERE
-['/usr/local', '/opt/homebrew-cask', '/opt/homebrew-cask/Caskroom'].each do |dir|
BREAKS HERE
-  environment 'PATH' => "/usr/local/go/bin:#{ENV['PATH']}", 'GOPATH' => "/opt/go:#{node['go']['gopath']}"
BREAKS HERE
-version          "7.0.1"
BREAKS HERE
-          Chef::Log.debug('Using region from Ohai attributes')
BREAKS HERE
-if node['platform'] == "windows"
-  include_recipe "ntp::windows_client"
-    "0.pool.ntp.org",
-    "1.pool.ntp.org",
-    "2.pool.ntp.org",
-    "3.pool.ntp.org"
-  log "No NTP servers specified, using default ntp.org server pools"
-  source "ntp.conf.erb"
BREAKS HERE
-          list_data(request)
-        end
BREAKS HERE
-        # Update to the constraint to be a hard one
-        locked.version_constraint = Solve::Constraint.new(locked.locked_version.to_s)
-        dependencies.collect do |dependency|
-          if dependency.path_location?
-            dependency
-          else
-            dependency_from_lockfile(dependency) || dependency
-        end
BREAKS HERE
-          @run_script ||=
-            begin
-              t = Chef::Resource::Template.new(::File.join(sv_dir_name, 'run'), run_context)
-              t.owner(new_resource.owner)
-              t.group(new_resource.group)
-              t.source("sv-#{new_resource.run_template_name}-run.erb")
-              t.cookbook(template_cookbook)
-              t.mode(00755)
-              t.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-              t
-            end
BREAKS HERE
-    # @param [String] which formatter to use
BREAKS HERE
-    fail 'use_data_bag_cache is set but the configured data bag was not found'
BREAKS HERE
-# The Dynatrace Collector will be installed into the directory node['dynatrace']['collector']['linux']['installer']['prefix_dir']/dynatrace-$major-$minor-$rev, where $major, $minor and $rev are given by the installer. A symbolic link to the actual installation directory will be created in node['dynatrace']['collector']['linux']['installer']['prefix_dir']/dynatrace.
BREAKS HERE
-if platform_family?('rhel') && node['platform_version'].to_i < 6
-  include_recipe 'yum::epel'
-end
BREAKS HERE
-  include Chef Software::RabbitMQ # rubocop:enable all
BREAKS HERE
-# nrpe packge options
BREAKS HERE
-    hashbang: ::File.exist?(system_ruby) ? system_ruby : '/opt/chef/embedded/bin/ruby'
-# debian based systems load iptables during the interface activation
-template '/etc/network/if-pre-up.d/iptables_load' do
-  source 'iptables_load.erb'
-  mode '0755'
-  variables iptables_save_file: '/etc/iptables/general'
-  only_if { platform_family?('debian') }
-end
-
BREAKS HERE
-        directory etc_dir do
-          owner new_resource.run_user
-          group new_resource.run_group
-          mode '0750'
-          recursive true
-          action :create
-        end
-
-        directory new_resource.include_dir do
-          owner new_resource.run_user
-          group new_resource.run_group
-          mode '0750'
-          recursive true
-          action :create
-        directory log_dir do
-          owner new_resource.run_user
-          group new_resource.run_group
-          mode '0750'
-          recursive true
-          action :create
-        end
-
-        directory new_resource.data_dir do
-          owner new_resource.run_user
-          group new_resource.run_group
-          mode '0750'
-          recursive true
-          action :create
-        end
-
BREAKS HERE
-        uses_apt?
-      def self.uses_apt?
-        ENV["PATH"] ||= ""
-        paths = %w{ /bin /usr/bin /sbin /usr/sbin } + ENV["PATH"].split(::File::PATH_SEPARATOR)
-        paths.any? { |path| ::File.executable?(::File.join(path, "apt-get")) }
-      end
-
BREAKS HERE
-      def filter_ignored(filename)
-        @ignore = Ridley::Chef::Chefignore.new(path)
-        @ignore.ignored?(filename)
-      end
-
-          Dir.glob(path.join('*'), File::FNM_DOTMATCH).select {|f| filter_ignored(f) }.each do |file|
-          Dir.glob(file_spec, File::FNM_DOTMATCH).select {|f| filter_ignored(f) }.each do |file|
-          Dir[path.join(*path_glob)].select {|f| filter_ignored(f) }.each do |file|
BREAKS HERE
-  if Mixlib::ShellOut.new("grub2-set-default #{boot_entry}").error
-    ::Chef::Application.fatal!(
-      "Unable to change grub2 default to #{boot_entry}")
-  else
BREAKS HERE
-    include_recipe 'powershell::windows_reboot' unless node['powershell']['installation_reboot_mode'] == 'no_reboot'
-
BREAKS HERE
-	action :restart
BREAKS HERE
-      cmd_current_values = "#{appcmd(node)} list app \"#{site_identifier}\" /config:* /xml"
BREAKS HERE
-attribute :name,      :kind_of => String, :name_attribute => true
-attribute :version,   :kind_of => String, :default => nil
BREAKS HERE
-# Override maven attributes
BREAKS HERE
-  if node[:platform_version] >= "9.10"
BREAKS HERE
-          '2014.09' => {
-            '5.1' => {
-              'package_name' => 'mysql51-server'
-            },
-            '5.5' => {
-              'package_name' => 'mysql-server'
-            },
-            '5.6' => {
-              'package_name' => 'mysql-server'
-            },
-          },          
BREAKS HERE
-#
-# Cookbook Name:: openresty
-# Provider:: site
-#
-# Copyright 2012, Panagiotis Papadomitsos <pj@ezgr.net>
-#
-
-action :enable do
-  timing = [:delayed, :immediately].include?(new_resource.timing) ? new_resource.timing : :delayed
-  link_name = (new_resource.name == "default") ? "000-default" : new_resource.name
-  a = execute "nxensite #{new_resource.name}" do
-    command "/usr/sbin/nxensite #{new_resource.name}"
-    notifies :reload, 'service[nginx]', timing
-    not_if { ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{link_name}") }
-  end
-
-  new_resource.updated_by_last_action(a.updated_by_last_action?)
-end
-
-action :disable do
-  timing = [:delayed, :immediately].include?(new_resource.timing) ? new_resource.timing : :delayed
-  link_name = (new_resource.name == "default") ? "000-default" : new_resource.name
-  a = execute "nxdissite #{new_resource.name}" do
-    command "/usr/sbin/nxdissite #{new_resource.name}"
-    notifies :reload, 'service[nginx]', timing
-    only_if { ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{link_name}") }
-  end
-
-  new_resource.updated_by_last_action(a.updated_by_last_action?)    
-end
BREAKS HERE
-       (auth[type].is_a?(Hash) || auth[type].is_a?(Array))
BREAKS HERE
-default['dovecot']['sensitive_files'] = [
-  '*.conf.ext',
-]
-default['dovecot']['conf_files']['core'] = [
-  'conf.d/10-auth.conf',
-  'conf.d/10-director.conf',
-  'conf.d/10-logging.conf',
-  'conf.d/10-mail.conf',
-  'conf.d/10-master.conf',
-  'conf.d/10-ssl.conf',
-  'conf.d/10-tcpwrapper.conf',
-  'conf.d/15-lda.conf',
-  'conf.d/15-mailboxes.conf',
-  'conf.d/90-acl.conf',
-  'conf.d/90-plugin.conf',
-  'conf.d/90-quota.conf',
-  'conf.d/auth-checkpassword.conf.ext',
-  'conf.d/auth-deny.conf.ext',
-  'conf.d/auth-dict.conf.ext',
-  'conf.d/auth-master.conf.ext',
-  'conf.d/auth-passwdfile.conf.ext',
-  'conf.d/auth-sql.conf.ext',
-  'conf.d/auth-static.conf.ext',
-  'conf.d/auth-system.conf.ext',
-  'conf.d/auth-vpopmail.conf.ext',
-  'dovecot.conf',
-  'dovecot-db.conf.ext',
-  'dovecot-dict-auth.conf.ext',
-  'dovecot-dict-sql.conf.ext',
-  'dovecot-sql.conf.ext',
-]
-default['dovecot']['conf_files']['imap'] = [
-  'conf.d/20-imap.conf',
-]
-default['dovecot']['conf_files']['pop3'] = [
-  'conf.d/20-pop3.conf',
-]
-default['dovecot']['conf_files']['lmtp'] = [
-  'conf.d/20-lmtp.conf',
-]
-default['dovecot']['conf_files']['sieve'] = [
-  'conf.d/20-managesieve.conf',
-  'conf.d/90-sieve.conf',
-]
-default['dovecot']['conf_files']['ldap'] = [
-  'dovecot-ldap.conf.ext',
-  'conf.d/auth-ldap.conf.ext',
-]
-
BREAKS HERE
-    unless node['iis']['source'].nil?; source node['iis']['source'] end
BREAKS HERE
-      Chef::Log.error 'auth issue: see audit cookbook TROUBLESHOOTING.md'
BREAKS HERE
-when 'windows'
-  'Administrator'
-else
-  'root'
-when 'windows'
-  'Administrators'
-else
-  'root'
BREAKS HERE
- @resource =  Chef::Resource::CatalystApplication.new(new_resource.name)
- @resource.npoc(new_resource.nproc)
- perl5lib = @resource.new_resource.perl5lib
- npoc = @resource.nproc
- template "/etc/conf.d/#{service_name}/" do
BREAKS HERE
-default['bcpc']['hadoop']['namenode']['jmx']['port'] = 10111
-default['bcpc']['hadoop']['namenode']['http']['port'] = 50070
-default['bcpc']['hadoop']['namenode']['https']['port'] = 50470
BREAKS HERE
-          %w(debug verbose notification_driver
-              expect(chef_run).to render_file(file.name).with_content(/^#{attr_key}=#{attr_key}_value$/)
BREAKS HERE
-inspec_path = File.join(cookbook_dir, "test", "recipes", "#{context.new_file_basename}.rb")
-directory "#{cookbook_dir}/test/recipes" do
-
BREAKS HERE
-      def action_create # rubocop:disable MethodLength,Metrics/PerceivedComplexity,Metrics/AbcSize
-            mount_spec = { :location => new_resource.mount_point }
-      def action_resize # rubocop:disable Metrics/AbcSize,Metrics/PerceivedComplexity,MethodLength
BREAKS HERE
-case node['platform']
-when "redhat","centos","scientific"
BREAKS HERE
-      expect(undeploy).to notify('service[nginx]').to(:restart).delayed
-      expect(undeploy_debian).to notify('service[apache2]').to(:restart).delayed
-      expect(undeploy_rhel).to notify('service[httpd]').to(:restart).delayed
BREAKS HERE
-version '2.3.0'
BREAKS HERE
-      global_configuration: 
-      jobs: (new_resource.jobs.empty? ? '' : new_resource.jobs.to_yaml),
BREAKS HERE
-include_recipe "iptables"
-
-  when "CentOS","RedHat","Fedora"
-  when "CentOS","RedHat","Fedora"
-iptables_rule "port_ssh"
-
BREAKS HERE
-        TasteTester::Config.testing_until.strftime('%y%m%d%H%M.%S')
-        (Time.now + TasteTester::Config.testing_time).strftime('%y%m%d%H%M.%S')
BREAKS HERE
-      @name   = name
BREAKS HERE
-      prepend ChefCompat::Monkeypatches::Chef::RunContext
BREAKS HERE
-every_enabled_application do |application, _deploy|
BREAKS HERE
-        graph.artifact(cookbook.name, cookbook.version).tap do |artifact|
-          cookbook.dependencies.each do |dependency|
-            name, requirements = dependency
-            artifact.depends(name, requirements)
-          end
-        end
BREAKS HERE
-  #endpoints = [
-  #]
BREAKS HERE
-default[:ntp][:servers]   = ["0.pool.ntp.org", "1.pool.ntp.org"]
BREAKS HERE
-      raise Ridley::Errors::FrozenCookbook, ex
-          raise Ridley::Errors::FrozenCookbook, msg
-      sandbox   = sandbox.create(checksums.keys)
BREAKS HERE
-    Chef::Log.fatal("Installation of OpenResty LUA rock [#{rock}] #{('version [' + version + ']') if version} failed")
BREAKS HERE
-    %w{ rhel fedora } => %w{ openssl-devel make tar },
-    'debian' => %w{ libssl-dev make tar },
-    'default' => %w{ libssl-dev make tar }
BREAKS HERE
-default['kibana']['version'] = '4.0.0-linux-x64' # must match version number of kibana being installed
-default['kibana']['file']['url'] = 'https://download.elasticsearch.org/kibana/kibana/kibana-4.0.0-linux-x64.tar.gz'
BREAKS HERE
-  bbox [[16.23, -35.12], [,33.18, -22.1]]
BREAKS HERE
-  Chef::Log.warn "createController called but not implemented."
-  Chef::Log.warn "joinMember called but not implemented."
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.75.0/}) }
BREAKS HERE
-  execute "Wait for enabled #{service}" do
-    command "#{describe_services} --filter service-type=#{service} | grep enabled"
-    retries 15
-    retry_delay 20
BREAKS HERE
-recipe 'openstack-block-storage::api', 'Installs the cinder-api, sets up the cinder database, and cinder service/user/endpoints in keystone'
-recipe 'openstack-block-storage::client', 'Install packages required for cinder client'
-recipe 'openstack-block-storage::common', 'Defines the common pieces of repeated code from the other recipes'
-recipe 'openstack-block-storage::keystone_registration', 'Registers cinder service/user/endpoints in keystone'
-recipe 'openstack-block-storage::scheduler', 'Installs the cinder-scheduler service'
-recipe 'openstack-block-storage::volume', 'Installs the cinder-volume service and sets up the iscsi helper'
-recipe 'openstack-block-storage::backup', 'Installs the cinder-backup service'
-
-depends 'selinux', '~> 0.9.0'
BREAKS HERE
-            @lsb_init = Chef::Resource::Template.new(::File.join( '/etc',
-                                                                  'init.d',
-                                                                  new_resource.service_name),
-                                                      run_context)
-            @lsb_init = Chef::Resource::Link.new(::File.join( '/etc',
-                                                              'init.d',
-                                                              new_resource.service_name),
-                                                  run_context)
BREAKS HERE
-default['sql_server']['shared_wow_dir']   = 'C:\Program Files (x86)\Microsoft SQL Server'
BREAKS HERE
-              test_import('attrs', 'attr', python: nil, virtualenv: test_venv, user: test_user)
BREAKS HERE
-    get '/data_bag_item/:data_bag_item' do
-      bags = chef_server.data_bag.all
-      bag = "parent data bag" #should store the bag to which the item from
-                              #the url belongs to
-      bags: bags,
-      bag: bag
BREAKS HERE
-        Tilt::ERBTemplate.new(template_file(template_name))
BREAKS HERE
-            'pop3, auth, auth-worker, dict, tcpwrap, managesieve-login and '\
-            'managesieve.',
BREAKS HERE
-if platform_family?('windows')
-  windows_path node['terraform']['win_install_dir'] do
-    action :add
-  end
BREAKS HERE
-    default['splunk']['forwarder']['url'] = 'https://download.splunk.com/products/universalforwarder/releases/6.4.2/linux/splunkforwarder-6.4.2-00f5bb3fa822-linux-2.6-x86_64.rpm'
-    default['splunk']['server']['url'] = 'https://download.splunk.com/products/splunk/releases/6.4.2/linux/splunk-6.4.2-00f5bb3fa822-linux-2.6-x86_64.rpm'
-    default['splunk']['forwarder']['url'] = 'https://download.splunk.com/products/universalforwarder/releases/6.4.2/linux/splunkforwarder-6.4.2-00f5bb3fa822.i386.rpm'
-    default['splunk']['forwarder']['url'] = 'https://download.splunk.com/products/universalforwarder/releases/6.4.2/linux/splunkforwarder-6.4.2-00f5bb3fa822-linux-2.6-amd64.deb'
-    default['splunk']['server']['url'] = 'https://download.splunk.com/products/splunk/releases/6.4.2/linux/splunk-6.4.2-00f5bb3fa822-linux-2.6-amd64.deb'
-    default['splunk']['forwarder']['url'] = 'https://download.splunk.com/products/universalforwarder/releases/6.4.2/linux/splunkforwarder-6.4.2-00f5bb3fa822-linux-2.6-intel.deb'
-  default['splunk']['forwarder']['url'] = 'https://download.splunk.com/products/universalforwarder/releases/6.4.2/solaris/splunkforwarder-6.4.2-00f5bb3fa822-solaris-10-intel.pkg.Z'
-  default['splunk']['server']['url'] = 'https://download.splunk.com/products/splunk/releases/6.4.2/solaris/splunk-6.4.2-00f5bb3fa822-solaris-10-intel.pkg.Z'
BREAKS HERE
-default['ark']['prefix_bin'] = "/usr/local"
-default['ark']['prefix_home'] = "/usr/share"
BREAKS HERE
-cmd += "--policy='#{node['threatstack']['policy']}' " if node['threatstack']['policy']
BREAKS HERE
-        tmp_dir = Dir.mktmpdir
-        cb_dir_name = "#{name}-#{version}"
-        url = URI("https://codeload.github.com/#{remote_cookbook.location_path}/tar.gz/v#{version}")
-        Net::HTTP.start(url.host, :use_ssl => url.scheme == 'https') do |http|
-          open("#{tmp_dir}/#{cb_dir_name}.tar.gz", "wb") do |file|
-            file.write(resp.body)
-          end
-        tgz = Zlib::GzipReader.new(File.open("#{tmp_dir}/#{cb_dir_name}.tar.gz", 'rb'))
-        "#{tmp_dir}/#{cb_dir_name}"
BREAKS HERE
-  binaries = ['bin/iojs', 'bin/node', 'bin/npm']
-  binaries = ['bin/node', 'bin/npm']
BREAKS HERE
-        if request.rest_path[2] == "_latest" || request.rest_path[2] == "latest"
-          request.rest_path[2] = latest_version(list_data(request, request.rest_path[0..1]))
-        name = request.rest_path[1]
-        version = request.rest_path[2]
-        
-        set_data(request, ['cookbooks', name, version], request.body, :create_dir, :create)
-        if request.rest_path[2] == "_latest" || request.rest_path[2] == "latest"
-          request.rest_path[2] = latest_version(list_data(request, request.rest_path[0..1]))
-        cookbook_name = request.rest_path[1]
-        if exists_data_dir?(request, [ 'cookbooks', cookbook_name ]) && list_data(request, ['cookbooks', cookbook_name]).size == 0
-          delete_data_dir(request, ['cookbooks', cookbook_name])
-        data_store.list(['cookbooks']).each do |cookbook_name|
-          data_store.list(['cookbooks', cookbook_name]).each do |version|
-            cookbook = data_store.get(['cookbooks', cookbook_name, version], request)
-            data_store.delete(['file_store', 'checksums', checksum])
-        cookbook = DataNormalizer.normalize_cookbook(cookbook, request.rest_path[1], request.rest_path[2], request.base_uri, request.method)
BREAKS HERE
-packages.each do |pkg|
-  package pkg do
-    action :upgrade
-  end
BREAKS HERE
-            hoover_unused_checksums(missing_checksums)
-        delete_data_dir(request, ['cookbooks', cookbook_name]) if list_data(request, ['cookbooks', cookbook_name]).size == 0
-        hoover_unused_checksums(get_checksums(deleted_cookbook))
-      def hoover_unused_checksums(deleted_checksums)
-            cookbook = data_store.get(['cookbooks', cookbook_name, version])
-          data_store.delete(['file_store', 'checksums', checksum])
BREAKS HERE
-        downloader.download(source)
-        Berkshelf.formatter.install source.name, source.cached_cookbook.version, source.location
BREAKS HERE
-    mongo_pid_file = '/var/run/mongodb.pid'
-default['mongodb3']['config']['mongod']['processManagement']['fork'] = true # default : false
BREAKS HERE
-  log "stop #{node['rabbitmq']['serice_name']} to change erlang cookie" do
BREAKS HERE
-  service "sumo-collector" do
BREAKS HERE
-default['couch_db']['src_checksum']   = 'b54e643f3ca5f046cfd2f329a001efeaae8a3094365fa6c1cb5dcf68c1b25ccd'
-default['couch_db']['src_version']    = '1.5.0'
-default['couch_db']['config']['couchdb']['batch_save_interval'] = 1000  # In ms (1 second)
BREAKS HERE
-    it 'upgrades postgresql python packages if explicitly told' do
-      node.set['openstack']['db']['block-storage']['service_type'] = 'postgresql'
-
-      expect(chef_run).to upgrade_package('python-psycopg2')
-      expect(chef_run).not_to upgrade_package('python-mysqldb')
-    end
-
BREAKS HERE
-
-include_recipe 'datadog::system-probe'
BREAKS HERE
-  openstack_identity_register "Register '#{role_name.to_s}' Role" do
-Chef::Log.info "Keystone AdminURL: #{identity_admin_endpoint.to_s}"
-Chef::Log.info "Keystone InternalURL: #{identity_internal_endpoint.to_s}"
-Chef::Log.info "Keystone PublicURL: #{identity_public_endpoint.to_s}"
BREAKS HERE
-              "Expected #{new_resource.count} instances of "\
-              "#{new_resource.factory_pid}, but found #{copies.length} of "\
-              'them. enforce_count is off, so please either turn it on to '\
BREAKS HERE
-default['openstack']['auth']['strategy'] = 'uuid'
BREAKS HERE
-'<% confs = [ @conf ].flatten(1)
-      listeners = [ @conf["listeners"] ].flatten(1)
BREAKS HERE
-    database = Drivers::Db::Factory.build(application, node, rds: rds)
-    database.shutdown(self)
-  if rdses.blank?
-    database = Drivers::Db::Factory.build(application, node)
-    database.shutdown(self)
-  end
-  scm.shutdown(self)
-  framework.shutdown(self)
-  appserver.shutdown(self)
-  worker.shutdown(self)
-  webserver.shutdown(self)
BREAKS HERE
-# Copyright:: 2012-2016, Chef Software Inc.
-actions :install, :put
-default_action :install
-
-attribute :artifact_id,  kind_of: String, name_property: true
-attribute :group_id,     kind_of: String, required: true
-attribute :dest,         kind_of: String
-attribute :version,      kind_of: String, required: true
-attribute :packaging,    kind_of: String, default: 'jar'
-attribute :classifier,   kind_of: String
-attribute :owner,        kind_of: String, default: 'root'
-attribute :group,        kind_of: String, default: node['root_group']
-attribute :timeout,      kind_of: Integer, default: 600
-attribute :mode,         kind_of: [Integer, String], default: '0644'
-attribute :repositories, kind_of: Array, default: lazy { node['maven']['repositories'] }
-attribute :transitive,   kind_of: [TrueClass, FalseClass], default: false
BREAKS HERE
-          default: true
BREAKS HERE
-# 1.5.4 Require Authentication for Single-User Mode. Since /etc/init determines 
-# what run state the system is in, setting the entry in /etc/sysconfig/init will 
-# force single user authentication.
-
-ruby_block "insert_line_sulogin" do
-  block do
-    file = Chef::Util::FileEdit.new("/etc/sysconfig/init")
-    file.insert_line_if_no_match("/SINGLE/s/sushell/sulogin/", "/SINGLE/s/sushell/sulogin/")
-    file.write_file
-  end
-  not_if "grep -q /SINGLE/s/sushell/sulogin/ /etc/sysconfig/init"
-end
-
-ruby_block "insert_line_prompt" do
-  block do
-    file = Chef::Util::FileEdit.new("/etc/sysconfig/init")
-    file.insert_line_if_no_match("/PROMPT/s/yes/no/", "/PROMPT/s/yes/no/")
-    file.write_file
-  end
-  not_if "grep -q /PROMPT/s/yes/no/ /etc/sysconfig/init"
-end
-
-# 1.5.5 Disable Interactive Boot. The PROMPT option provides console users the 
-# ability to interactively boot the system and select which services to start on 
-# boot. Set the PROMPT parameter in /etc/sysconfig/init to no. PROMPT=no
-
-ruby_block "set_prompt_no" do
-  block do
-    file = Chef::Util::FileEdit.new("/etc/sysconfig/init")
-    file.search_file_replace_line("PROMPT=yes", "PROMPT=no")
-    file.write_file
-  end
-  not_if "grep -q PROMPT=no /etc/sysconfig/init"
BREAKS HERE
-    # @param [Downloader] downloader
-    def initialize(downloader, options = {})
-      @downloader = downloader
-      @graph = Solve::Graph.new
-      @sources = Hash.new
-        add_source(CookbookSource.new(name, constraint: constraint))
BREAKS HERE
-  unless node['drbd']['custom_repo'] include_recipe 'yum-elrepo'
BREAKS HERE
-    # @return [Berkshelf::SourceURI]
-    attr_accessor :uri
-
-    # @return [Berkshelf::APIClient]
-    attr_accessor :api_client
-
-    # @param [String, Berkshelf::SourceURI] uri
BREAKS HERE
-  code <<-EOT
-  ./configure --prefix=#{node['openresty']['source']['prefix']}/luajit \\
-      make build
-  EOT
-  creates "#{src_filepath}/#{src_filename}/src/bin/luarocks"
BREAKS HERE
-      property :container_name,    String,       name_property: true
-      property :repo,              String,       default: lazy { container_name }
-      property :tag,               String,       default: 'latest'
-      property :command,           ShellCommand
-
-      property :attach_stderr,     Boolean,      default: lazy { detach }
-      property :attach_stdin,      Boolean,      default: false
-      property :attach_stdout,     Boolean,      default: lazy { detach }
-      property :autoremove,        Boolean
-      property :binds,             ArrayType
-      property :cap_add,           NonEmptyArray
-      property :cap_drop,          NonEmptyArray
-      property :cgroup_parent,     String,        default: ''
-      property :cpu_shares,        [Fixnum, nil], default: 0
-      property :cpuset_cpus,       String,        default: ''
-      property :detach,            Boolean,       default: true
-      property :devices,           ArrayType
-      property :dns,               NonEmptyArray
-      property :dns_search,        ArrayType
-      property :domain_name,       String, default: ''
-      property :entrypoint,        ShellCommand
-      property :env,               UnorderedArrayType
-      property :extra_hosts,       NonEmptyArray
-      property :exposed_ports,     [Hash, nil]
-      property :force,             Boolean
-      property :host,              [String, nil], desired_state: false
-      property :hostname,          [String, nil]
-      property :labels,            [Hash, nil],   coerce: proc { |v| coerce_labels(v) }
-      property :links,             [Array, nil],  coerce: (proc do |v|
-        v = Array(v)
-        if v.empty?
-          nil
-        else
-          # Parse docker input of /source:/container_name/dest into source:dest
-          v.map do |link|
-            if link =~ %r{^/(?<source>.+):/#{name}/(?<dest>.+)}
-              link = "#{Regexp.last_match[:source]}:#{Regexp.last_match[:dest]}"
-            end
-            link
-          end
-        end
-      end)
-      property :log_opts, [Hash, nil], coerce: (proc do |v|
-        case v
-        when Hash, nil
-          v
-        else
-          Array(v).each_with_object({}) do |log_opt, memo|
-            key, value = log_opt.split('=', 2)
-            memo[key] = value
-          end
-        end
-      end)
-      property :mac_address,       String,         default: '' # FIXME: needs tests
-      property :memory,            Fixnum,         default: 0
-      property :memory_swap,       Fixnum,         default: -1
-      property :network_disabled,  Boolean,        default: false
-      property :network_mode,      [String, nil],  default: (lazy do
-        case api_version
-        when '1.20'
-          'default'
-        when '1.19'
-          'bridge'
-        else
-          ''
-        end
-      end)
-      property :open_stdin,        Boolean,         default: false
-      property :outfile,           [String, nil],   default: nil
-      property :port_bindings,     [String, Array, Hash, nil]
-      property :privileged,        Boolean
-      property :remove_volumes,    Boolean
-      property :restart_policy,    String,          default: 'no'
-      property :security_opts,     [String, Array], default: lazy { [''] }
-      property :signal,            String,          default: 'SIGKILL'
-      property :stdin_once,        [Boolean, nil],  default: lazy { !detach }
-      property :timeout,           [Fixnum, nil]
-      property :tty,               Boolean
-      property :ulimits,           [Array, nil], coerce: (proc do |v|
-        if v.nil?
-          v
-        else
-          Array(v).map do |u|
-            u = "#{u['Name']}=#{u['Soft']}:#{u['Hard']}" if u.is_a?(Hash)
-            u
-          end
-        end
-      end)
-      property :user,              String,         default: ''
-      property :volumes,           [Hash, nil],    coerce: (proc do |v|
-        case v
-        when nil, Hash
-          v
-        else
-          Array(v).sort.each_with_object({}) { |volume, h| h[volume] = {} }
-        end
-      end)
-      property :volumes_from,      ArrayType
-      property :working_dir,       [String, nil]
-      property :container,         Docker::Container, desired_state: false
-      # If the container takes longer than this many seconds to stop, kill it instead.
-      # -1 (the default) means never kill the container.
-      property :kill_after,        Numeric, default: -1, desired_state: false
-
-      def state
-        container ? container.info['State'] : {}
-      end
-      # port_bindings and exposed_ports really handle this
-      # TODO infer `port` from `port_bindings` and `exposed_ports`
-      def port(ports = NOT_PASSED)
-        if ports != NOT_PASSED
-          ports = Array(ports)
-          ports = nil if ports.empty?
-          @port = ports
-          port_bindings to_port_bindings(ports)
-          exposed_ports to_port_exposures(ports)
-        end
-        @port
-      end
-
-      # log_driver and log_opts really handle this
-      def log_config(value = NOT_PASSED)
-        if value != NOT_PASSED
-          @log_config = value
-          log_driver value['Type']
-          log_opts value['Config']
-        end
-        return @log_config if defined?(@log_config)
-        default = {}
-        default['Type'] = log_driver if property_is_set?(:log_driver)
-        default['Config'] = log_opts if property_is_set?(:log_opts)
-        default = nil if default.empty?
-        default
-      end
-
-      #
-      # TODO: test image property in serverspec and kitchen
-      #
-      # If you say:    `repo 'blah'`
-      # Image will be: `blah:latest`
-      #
-      # If you say:    `repo 'blah'; tag '3.1'`
-      # Image will be: `blah:3.1`
-      #
-      # If you say:    `image 'blah'`
-      # Repo will be:  `blah`
-      # Tag will be:   `latest`
-      #
-      # If you say:    `image 'blah:3.1'`
-      # Repo will be:  `blah`
-      # Tag will be:   `3.1`
-      #
-      def image(image = nil)
-        if image
-          r, t = image.split(':', 2)
-          repo r
-          tag t if t
-        end
-        "#{repo}:#{tag}"
-      end
-      include DockerHelpers::Container
-
-
-      def to_snake_case(name)
-        # ExposedPorts -> _exposed_ports
-        name = name.gsub(/[A-Z]/) { |x| "_#{x.downcase}" }
-        # _exposed_ports -> exposed_ports
-        name = name[1..-1] if name.start_with?('_')
-        name
-      end
-
-      def to_shellwords(command)
-        return nil if command.nil?
-        Shellwords.shellwords(command)
-      end
-
-      def ulimits_to_hash
-        return nil if ulimits.nil?
-        ulimits.map do |u|
-          name = u.split('=')[0]
-          soft = u.split('=')[1].split(':')[0]
-          hard = u.split('=')[1].split(':')[1]
-          { 'Name' => name, 'Soft' => soft.to_i, 'Hard' => hard.to_i }
-        end
-      end
BREAKS HERE
-      if config[:private_keys][name].is_a?(String)
-        Chef::Log.info("Got key #{name} from Chef::Config.private_keys.#{name}, which points at #{config[:private_keys[name]]}.  Reading key from there ...")
-        return [ IO.read(config[:private_keys][name]), config[:private_keys][name] ]
-        return [ config[:private_keys][name].to_pem, nil ]
BREAKS HERE
-  swift_store_key = service_password "#{swift_store_user}"
BREAKS HERE
-        new_content = content.reject { |line| line =~ /^name .*/ }
BREAKS HERE
-      if Chef::VERSION >= '11.0.0'
-        include Chef::DSL::PlatformIntrospection
-        CHEF_SERVER_USER = 'chef_server'
-      else
-        include Chef::Mixin::Language
-        CHEF_SERVER_USER = 'chef'
-          CHEF_SERVER_USER
-          CHEF_SERVER_USER
BREAKS HERE
-        make_config('keepalived-router-id', "#{(rand * 1000).to_i%256}/2*2")
BREAKS HERE
-%w{ ubuntu debian redhat centos fedora freebsd mac_os_x }.each do |os|
BREAKS HERE
-  if Gem::Requirement.new('< 13.7.0').satisfied_by?(Gem::Version.new(Chef::VERSION))
-    full_command = "cmd /c \"#{client_cmd}\""
-  else
-    full_command = "cmd /c \'#{client_cmd}\'"
-  end
BREAKS HERE
-      sums = checksum_map[version]
BREAKS HERE
-# We need a /tmp in HDFS
-dfs = node['hadoop']['core_site']['fs.defaultFS']
-execute 'hdfs-tmpdir' do
-  command "hdfs dfs -mkdir -p #{dfs}/tmp && hdfs dfs -chmod 1777 #{dfs}/tmp"
-  timeout 300
-  user 'hdfs'
-  group 'hdfs'
-  action :nothing
-end
-
BREAKS HERE
-  mode  00750
-  owner  'root'
-  group  'root'
-  mode   00644
BREAKS HERE
-#
-# Cookbook Name::       ark
-# Description::         Base configuration for ark
-# Recipe::              default
-# Author::              Philip (flip) Kromer - Infochimps, Inc
-#
-# Copyright 2011, Philip (flip) Kromer, infochimps.com
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-# FIXME -- these need to be done immediately
-
-package "unzip"
-
-package "tar"
BREAKS HERE
-recipe           "db"
-recipe           "server"
BREAKS HERE
-
BREAKS HERE
-          expect(Ridley).to receive(:open).with(
-            server_url:  chef_config.chef_server_url,
-            client_name: chef_config.node_name,
-            client_key:  chef_config.client_key,
-            ssl: {
-              verify: berkshelf_config.ssl.verify
-            }
-          )
BREAKS HERE
-    ensure_only_gem_version('passenger', node[:passenger][:version])
BREAKS HERE
-  # this should be the case, but FC061 has a bug
-  # context "with a cookbook with metadata that does not include a version keyword" do
-  #   metadata_file("name 'something'")
-  #   it { is_expected.to violate_rule("FC061") }
-  # end
BREAKS HERE
-      when 'no_reboot' || 'delayed_reboot'
BREAKS HERE
-    node['security']['suid_sgid']['dry_run_on_unknown']
BREAKS HERE
-ActiveRecord::Schema.define(version: 20160511224519) do
-  
BREAKS HERE
-include_recipe "maven::maven#{node['maven']['version']}"
-if node['maven']['setup_bin']
-  link '/usr/bin/mvn' do
-    to "#{node['maven']['m2_home']}/bin/mvn"
-  end
BREAKS HERE
-
BREAKS HERE
-  comp.stdout.match("#{new_resource.name}")
BREAKS HERE
-    mode 00755
-    mode 00755
BREAKS HERE
-    command "#{node['cookbook-openshift3']['openshift_common_client_binary']} adm registry --selector=${selector_router} -n ${namespace_registry} --config=admin.kubeconfig"
BREAKS HERE
-      desc "Start all servers (if needed) and deploy with chef"
-      task :default => [:start, :chef]
-      desc "Start all servers"
-      task :start do
-        default_cluster.launch
-      desc "Run chef on all servers"
-      task :chef => [:check_syntax] do
-        default_cluster.each do |server|
-          server.cook
-      end
-      task :cook => [:chef]
-      desc "Check your cookbooks and config files for syntax errors"
-      task :check_syntax do
-        Dir["**/*.rb"].each do |recipe|
-          RakeFileUtils.verbose(false) do
-            sh %{ruby -c #{recipe} > /dev/null} do |ok, res|
-              raise "Syntax error in #{recipe}" if not ok 
-      end
-      desc "Create a new cookbook (with cookbook=name)"
-      task :new_cookbook do
-        create_cookbook("cookbooks")
BREAKS HERE
-version          "2.2.0"
BREAKS HERE
-          :severity, arg,
BREAKS HERE
-    not_if { Mixlib::ShellOut.new("rpm -qa gpg-pubkey*").include? zypp["repo-key"].downcase }
-    not_if { Mixlib::ShellOut.new("zypper repos --export -").include? repo_uri }
BREAKS HERE
-default['jira']['home_backup']    = "/tmp/atlassian-jira-home-backup.tgz"
-default['jira']['home_path']      = "/var/atlassian/application-data/jira"
-default['jira']['install_backup'] = "/tmp/atlassian-jira-backup.tgz"
-default['jira']['install_path']   = "/opt/atlassian/jira"
-default['jira']['install_type']   = "installer"
-default['jira']['url_base']       = "http://www.atlassian.com/software/jira/downloads/binary/atlassian-jira"
-default['jira']['user']           = "jira"
-default['jira']['version']        = "6.1"
-if node['kernel']['machine'] == "x86_64"
-  default['jira']['arch'] = "x64"
-  default['jira']['arch'] = "x32"
-when "windows"
-  when "installer"
-    when "5.2"; node['jira']['arch'] == "x64" ? "55161ba22f51b168fc33e751851de099911b5f648b02c43d77b37ed4f3d88586" : "9d57ecb6d487754b965a0ffed8b644122fef500af0c068ddb755a4685df21ca4"
-    when "5.2.11"; node['jira']['arch'] == "x64" ? "a3ac923ff8563d178853222f4ebf246f78af6d1e1f4ea503b3b6443ecbdc9258" : "336297395d6cb0f0b80503bb88e545f441608a31d9af492b27fa4e4045e04c0f"
-    when "6.0"; node['jira']['arch'] == "x64" ? "971f0d6242eb8aa02e47b086428d1f1fe46ea6c7a0859412303be2cc909487c7" : "0d7e6dc83e4fbca5b5ec5a62d40ac18c6b81d9dda470251e954a0035bee328e6"
-    when "6.0.1"; node['jira']['arch'] == "x64" ? "47f0e16cdce30900135e425e978359db13fb5b913d8c8aadcfa7e6b4870c30c2" : "651b5bac996575c153e0dd2310a390b403aa28bd0c3a0d197dcdf5772155df65"
-    when "6.0.2"; node['jira']['arch'] == "x64" ? "34f462e24dc9dea5a413d6a287b513624dec4a6e8ad37240a7dd586e43c6402f" : "8b286e809c42bb80c5a98bc9440cfabb219ec01bbdd895005e866941ea5662e0"
-    when "6.0.3"; node['jira']['arch'] == "x64" ? "a50ba6428c8692948a26ff1098538f7c4968b9b55d801d6a810b6a80228ad1d8" : "819626e6882dd2fd3aa763d1ae765783a34a20e51fb71d6b0438b05729b9541d"
-    when "6.0.4"; node['jira']['arch'] == "x64" ? "8a990fa09cb8c7952195a0adb3a1139cfce3f4a59ed0c97bf9d693091ec3dd6e" : "24067f9cc9629e4abc69d53be870c91a40246dd15c8313464053c02b548dbcbc"
-    when "6.0.5"; node['jira']['arch'] == "x64" ? "470de9a8a3f14c9cf5cde0b950c7cdfc4019c9cb55f1566ada136a2b8737a7c5" : "565385605da0fa5e4158e1e42cedcb2bda3a40f18732594f077a7a921ac86354"
-    when "6.0.6"; node['jira']['arch'] == "x64" ? "0c62209c7564b64b6cbd176804169959df13817a8d2e0285583ba35bc4131541" : "95e692b444b97c69c18326318d76b3452aaa04b6a4883a16aa14ef84adb03c29"
-    when "6.0.7"; node['jira']['arch'] == "x64" ? "48eb2264ddc48b03edd2b0c3f26f2de2cb281e76e1892e8fb62cb015556a8943" : "fcd6b1621cf64bd0668b978e51092ec787773f842b8124472a01c96b2e67cb7b"
-    when "6.0.8"; node['jira']['arch'] == "x64" ? "a3fefd20ba4b14bb6d99877f645439f8f392adc819bea8b34b2f668c110fa3c5" : "f6ea152b9bdf7eb834a7c467e52a1cc42225d8b9e2c35a0b6248d6eac31068be"
-    when "6.1"; node['jira']['arch'] == "x64" ? "4bae29a79cc76b6845be5149bfa18a82918a0bfcfa7bd621514bc73cdfa7690f" : "c484ffcb4f9fb14e490273d655f6659bcf8de3b0b74439245408099bc32b70ac"
-  when "standalone"
-    when "5.2"; "a8ef62077f87d9f22d60c3e558436b11cf5e8664d4a417f622a33257d46ba3f1"
-    when "5.2.11"; "7ea1a106e9d70f6d9a53a4c7d49a975cdfeadbae75f6452542e192c897f1faf0"
-    when "6.0"; "bdd47d3e30827e445288faf211992d7e96170ebae11e2451cc0362afe8de6ab1"
-    when "6.0.1"; "367dcb92f2e006cda86997b363f0835d3bfd75d4492404c1a496aad1251bdf9b"
-    when "6.0.2"; "702d0e67fce623de9d7c3da880d7b6dc810faa5e10ae63b6189d10d01e708fbe"
-    when "6.0.3"; "3c917b8c828c54785b4dec36a073a9c587ed71669ff5c6e792d7f6f3ac338bb6"
-    when "6.0.4"; "39e89c69f539c0e0404ebeffa40fc784129a221ca2a1c2da535691b865d706a9"
-    when "6.0.5"; "2ce8e65247dbb5d09e3b7f54e9ee827459229c2d52b73ec60ee8c2e557b6127b"
-    when "6.0.6"; "9d037c9666cfb606308be3af1f70447db978ecbe8032f0d0961cbcad2b848b79"
-    when "6.0.7"; "4bc901c9e6d01291936cd2c1de9692582edfbc476ec256865cc37e936813e899"
-    when "6.0.8"; "410d77cb66f9a3972609a41f407ca2dc5bfaee41c477f4b06f90a9588f9546f2"
-    when "6.1"; "51131e1c7a453468b14dccf86560b8e023dc840fdc9f44a88a89793ca76cd54f"
-  when "war"
-    when "5.2"; "e3ef2c555accfa40399b287a46c7ffd75b3d87d9a691b33e2b9cd359f7a3d433"
-    when "5.2.11"; "b372a1c1e7f7983a3413adcaa0f027b03c6f986cc5c7d833f52488350dc65c93"
-    when "6.0"; "6a46035d2fd9b9425df631d2fdeca13ab2e36814de30a3a50b88a234eabd3f66"
-    when "6.0.1"; "d6b63f05d5ce2530592e5e174411a9a5104007e92a84a3f032f73526efabb10f"
-    when "6.0.2"; "f8060b1dfc059025652bbc87d5f2440012024aa97b018cf269410ac5866f5b6c"
-    when "6.0.3"; "768b73d58fac78b83495cc6918c28e60d68417f4a6d2ceb70ccc7927f8cff6b5"
-    when "6.0.4"; "8214851759cd5b6034d5064c4f181bc36eaeaa54421d3206a49c42d0ef55640f"
-    when "6.0.5"; "55f06fae0525291b18e65da2c82a26aa2f4d300f6830fd08554eab89b5081e07"
-    when "6.0.6"; "54f516dc835d7e4f99409ebf39095960273b45dec98f86c5dc6923eb5cc8f258"
-    when "6.0.7"; "ea1a60a2585dcb97ddf0e9dc0c4755e842bed40b2ae11ac0e9044412b4bae6b0"
-    when "6.0.8"; "82b92df5337a7f0fd4c8aa95a56594b675050f3b066a8dec0563dccebe15fd30"
-    when "6.1"; "2377e4c3546760773d8e2f9d22d5d7bafd05980bf27b8f6d22a7126863d9da9a"
-  when "installer"
-    when "5.2"; node['jira']['arch'] == "x64" ? "95841d1b222db63c5653b81583837a5d90e315a2ff2661534b310113afcff33f" : "05335145554cc446adfb90e318139f9408b41cacb57d90d0e11b788718ed8734"
-    when "5.2.11"; node['jira']['arch'] == "x64" ? "ad4a851e7dedd6caf3ab587c34155c3ea68f8e6b878b75a3624662422966dff4" : "7088a7d123e263c96ff731d61512c62aef4702fe92ad91432dc060bab5097cb7"
-    when "6.0"; node['jira']['arch'] == "x64" ? "915b773c9870ebacbee4712e26d1c9539b48210b6055cb1b2d81e662deae2e60" : "3967f8f663c24ff51bf30300ae0f2fb27320c9b356ed4dbf78fce7cc1238eccb"
-    when "6.0.1"; node['jira']['arch'] == "x64" ? "4e56ef7980b8f3b5b434a7a440d663b9d08e5588d635214e4434eabc3a8d9623" : "e383961667e6ef6b5bc387123fa76620a5bdf71413283de5b79cd0ae71248922"
-    when "6.0.2"; node['jira']['arch'] == "x64" ? "fee8fe6804ace532abb805eea5ae0df342526eaf45b2c3e8e34978c97b5aa3aa" : "bfa7d8731ef2ec5b7e802c119d5a68b1b93505d904c831801236eacff9fa1f5e"
-    when "6.0.3"; node['jira']['arch'] == "x64" ? "cdbd679e70097120c0083e9e0949c66b842742a3a4ccbae0db01b81d9e9fce9e" : "cda9499247c43c0f812bd2924e569ba3dd08c088e03455ec9c1f79bd30c1509a"
-    when "6.0.4"; node['jira']['arch'] == "x64" ? "d7b845cb21461f032e1563e40f7daa220277809c53e14e4342728f04d0fa039a" : "4f60c69a13d3d66b0864849d9d3d5a8dfe240830b332cdd8848ae14055709984"
-    when "6.0.5"; node['jira']['arch'] == "x64" ? "0826bf54c7765b053e571d3118b8b48f899d60a76518dc4df34da14a66930e37" : "10f9cc9ebb702f01d44f315eabfa4bc1af75dadf161a2cf6d5439c720d604fed"
-    when "6.0.6"; node['jira']['arch'] == "x64" ? "bf7145fbbbe0446f3a349e85b7b1277cab3cbe1dfc85029a2fb974f8fac3be59" : "030f25f6ab565d66b9f390dced8cafafe0d338ea792d942a6d1901888fa91b7d"
-    when "6.0.7"; node['jira']['arch'] == "x64" ? "89da53718d80aad4680e48559ff126ffb35addccfed556c022d5450fb8e44cbb" : "159f143a1d15c9764b05f0b07f5ea24e4afe851f276ba5290eadabcf5f404a53"
-    when "6.0.8"; node['jira']['arch'] == "x64" ? "b7d14d74247272056316ae89d5496057b4192fb3c2b78d3aab091b7ba59ca7aa" : "ad1d17007314cf43d123c2c9c835e03c25cd8809491a466ff3425d1922d44dc0"
-    when "6.1"; node['jira']['arch'] == "x64" ? "72e49cc770cc2a1078dd60ad11329508d6815582424d16836efd873f3957e2c8" : "c879e0c4ba5f508b4df0deb7e8f9baf3b39db5d7373eac3b20076c6f6ead6e84"
-  when "standalone"
-    when "5.2"; "80e05e65778ce2e3d91422da9d30a547e174fe2b9ba920b7dcdff78e29f353da"
-    when "5.2.11"; "8d18b1da9487c1502efafacc441ad9a9dc55219a2838a1f02800b8a9a9b3d194"
-    when "6.0"; "791a8a4a65e40cd00c1ee2a3207935fbcc2c103416e739ad4e3ed29e39372383"
-    when "6.0.1"; "492e46119310f378d7944dea0a92c470f0d0b794219d6647a92ea08f8e99f80e"
-    when "6.0.2"; "89b0178bf33488040c032d678ffcdeebc9b9d4565599a31b35515e3aaa391667"
-    when "6.0.3"; "0f94b9d31b8825e91c05e06538dce5891801b83549adbc1dfd26f5b9100c24cf"
-    when "6.0.4"; "ca0f80c36ab408131e283b5c00aead949ce37c4ef8a870b2726eb55882ea6821"
-    when "6.0.5"; "9050297a28059468a9a3ddfcc8b788aaf62210b341f547d4aebbab92baa96dd3"
-    when "6.0.6"; "27e699692e107a9790926d5f6fb0ddb89a1bd70e1d6877ce23991c0701495d67"
-    when "6.0.7"; "6de5ac1a06116de2c95d5944eab1da416170e8b6bea3a0a7a641b52836100946"
-    when "6.0.8"; "2ca0eb656a348c43b7b9e84f7029a7e0eed27eea9001f34b89bbda492a101cb6"
-    when "6.1"; "e63821f059915074ff866993eb5c2f452d24a0a2d3cf0dccea60810c8b3063a0"
-  when "war"
-    when "5.2"; "521f0f60500b8f9e1700af3024e5d51a378e3a63a3c6173a66ae298ddadb3d4b"
-    when "5.2.11"; "11e34312389362260af26b95aa83a4d3c43705e56610f0f691ceaf46e908df6a"
-    when "6.0"; "53583c56e6697201813eca07ca87c0d2010359f68d29f6b20b09d1ecad8c185b"
-    when "6.0.1"; "525f62eee680e3a0f6e602dbb8c9ed83b7e17c730009530dd1a88f175e2bed85"
-    when "6.0.2"; "083d055b86b86df485829d4d8848a4354818b4ee410aff8c9c3bfa300de61f9a"
-    when "6.0.3"; "e1038bfba3365ccd85d1ba86bb9c5c36591d56637e5f9acab9fa01654386c588"
-    when "6.0.4"; "f994ed71ea29764187a1cb1eb12d726182cd404d0a77dfb585ad70789d75e80f"
-    when "6.0.5"; "4a7eda7da278be778add316bd783a5564ae931f7d77ad6078217dd3d8b49f595"
-    when "6.0.6"; "d6ce6bfe41275887cf6004827916b43d29a9c1b8a1b2029c18d9a4e54c9b199b"
-    when "6.0.7"; "d75d798021038584a8f987142ac161c2d467329a430a3573538d8600d8805005"
-    when "6.0.8"; "4bcee56a7537a12e9eeec7a9573f59fd37d6a631c5893152662bef2daa54869d"
-    when "6.1"; "7beb69e3b66560b696a3c6118b79962614d17cd26f9ff6df626380679c848d29"
-default['jira']['apache2']['access_log']         = ""
-default['jira']['apache2']['error_log']          = ""
-default['jira']['apache2']['ssl']['access_log']       = ""
-default['jira']['apache2']['ssl']['chain_file']       = ""
-default['jira']['apache2']['ssl']['error_log']        = ""
-  default['jira']['apache2']['ssl']['certificate_file'] = "/etc/pki/tls/certs/localhost.crt"
-  default['jira']['apache2']['ssl']['key_file']         = "/etc/pki/tls/private/localhost.key"
-  default['jira']['apache2']['ssl']['certificate_file'] = "/etc/ssl/certs/ssl-cert-snakeoil.pem"
-  default['jira']['apache2']['ssl']['key_file']         = "/etc/ssl/private/ssl-cert-snakeoil.key"
-default['jira']['database']['host']     = "localhost"
-default['jira']['database']['name']     = "jira"
-default['jira']['database']['password'] = "changeit"
-default['jira']['database']['type']     = "mysql"
-default['jira']['database']['user']     = "jira"
-default['jira']['jvm']['minimum_memory']  = "256m"
-default['jira']['jvm']['maximum_memory']  = "768m"
-default['jira']['jvm']['maximum_permgen'] = "256m"
-default['jira']['jvm']['java_opts']       = ""
-default['jira']['jvm']['support_args']    = ""
-default['jira']['tomcat']['keyAlias']     = "tomcat"
-default['jira']['tomcat']['keystorePass'] = "changeit"
-default['jira']['tomcat']['port']     = "8080"
-default['jira']['tomcat']['ssl_port'] = "8443"
BREAKS HERE
-      args = ['--no-document', '--system' ]
BREAKS HERE
-        return @iis_version
-      def default_documents default_document, default_documents_enabled, add = true, remove = true, specifier = ''
-          current_default_documents = XPath.match(doc.root, 'CONFIG/system.webServer-defaultDocument/files/add/@value').map{ |x| x.value }
-              if !default_document.include? document
-      def mime_maps new_resource_mime_maps, add = true, remove = true, specifier = ''
-          current_mime_maps = XPath.match(doc.root, 'CONFIG/system.webServer-staticContent/mimeMap').map{ |x| "fileExtension='#{x.attribute 'fileExtension'}',mimeType='#{x.attribute 'mimeType'}'" }
-              if !new_resource_mime_maps.include? mime_map
-        def get_default_documents_command specifier = ''
-          "#{appcmd(node)} list config #{specifier} /section:defaultDocument /config:* /xml"
-        end
-        def set_default_documents_command specifier = ''
-          "#{appcmd(node)} set config #{specifier} /section:defaultDocument"
-        end
-        def get_mime_map_command specifier = ''
-          "#{appcmd(node)} list config #{specifier} /section:staticContent /config:* /xml"
-        end
-        def set_mime_map_command specifier = ''
-          "#{appcmd(node)} set config #{specifier} /section:staticContent"
-        end
BREAKS HERE
-  ['rhel','fedora','amazon','scientific'] => [ 'openssl-devel', 'readline-devel', 'ncurses-devel' ],
-  'debian' => [ 'libperl-dev', 'libssl-dev', 'libreadline-dev', 'libncurses5-dev']
BREAKS HERE
-        ['kafka-topics.sh --list', '--zookeeper', zookeeper, '| grep ^', topic_name, '$'].join(' ')
BREAKS HERE
-    attribute :install_deps,
-              kind_of: [TrueClass, FalseClass],
-              default: true
-        if new_resource.source
-          install_plugin_from_url(
-            new_resource.source,
-            new_resource.name,
-            nil,
-            cli_opts: new_resource.options
-          )
-        else
-          install_plugin_from_update_center(
-            new_resource.name,
-            new_resource.version,
-            cli_opts: new_resource.options,
-            install_deps: new_resource.install_deps
-          )
-        end
-    # Installs a plugin along with all of it's dependencies using the
-    # update-center.json data.
-    #
-    # @param [String] name of the plugin to be installed
-    # @param [String] version of the plugin to be installed
-    # @param [Hash] opts the options install plugin with
-    # @option opts [Boolean] :cli_opts additional flags to pass the jenkins cli command
-    # @option opts [Boolean] :install_deps indicates a plugins dependencies should be installed
-    #
-    def install_plugin_from_update_center(plugin_name, plugin_version, opts = {})
-      remote_plugin_data = plugin_universe[plugin_name]
-
-      # Compute some versions; Parse them as `Gem::Version` instances for easy
-      # comparisons.
-      latest_version = plugin_version(remote_plugin_data['version'])
-
-      # Brute-force install all dependencies
-      if opts[:install_deps] && remote_plugin_data['dependencies'].any?
-        Chef::Log.debug "Installing plugin dependencies for #{plugin_name}"
-
-        remote_plugin_data['dependencies'].each do |dep|
-          # continue if any version of the dependency is installed
-          if plugin_installation_manifest(dep['name'])
-            Chef::Log.debug "A version of dependency #{dep['name']} is already installed - skipping"
-            next
-          elsif dep['optional'] == false
-            # only install required dependencies
-            install_plugin_from_update_center(dep['name'], dep['version'], opts)
-          end
-        end
-      end
-
-      # Replace the latest version with the desired version in the URL
-      source_url = remote_plugin_data['url']
-      source_url.gsub!(latest_version.to_s, desired_version(plugin_name, plugin_version).to_s)
-
-      install_plugin_from_url(source_url, plugin_name, desired_version(plugin_name, plugin_version), opts)
-    end
-
-    #
-    # Install a plugin from a given hpi (or jpi) source url.
-    # @option opts [Boolean] :install_deps indicates a plugins dependencies should be installed
-    #
-    def install_plugin_from_url(source_url, plugin_name, plugin_version = nil, opts = {})
-      version = plugin_version || Digest::MD5.hexdigest(source_url)
-
-      # Use the remote_file resource to download and cache the plugin (see
-      # comment below for more information).
-      path   = ::File.join(Chef::Config[:file_cache_path], "#{plugin_name}-#{version}.plugin")
-      plugin = Chef::Resource::RemoteFile.new(path, run_context)
-      plugin.source(source_url)
-      plugin.owner(node['jenkins']['master']['user'])
-      plugin.group(node['jenkins']['master']['group'])
-      plugin.backup(false)
-      plugin.run_action(:create)
-
-      # Install the plugin from our local cache on disk. There is a bug in
-      # Jenkins that prevents Jenkins from following 302 redirects, so we
-      # use Chef to download the plugin and then use Jenkins to install it.
-      # It's a bit backwards, but so is Jenkins.
-      executor.execute!('install-plugin', escape('file://' + plugin.path), '-name', escape(plugin_name), opts[:cli_opts])
BREAKS HERE
-#  require_chef_omnibus: 12.5.0
BREAKS HERE
-default['drbd']['fs_type'] = "ext3"
-default['drbd']['dev'] = "/dev/drbd0"
BREAKS HERE
-default['openstack']['endpoints']['image-api']['path'] = '/v2'
BREAKS HERE
-version          '1.0'
-depends 'file'
BREAKS HERE
-  url "#{node['terraform']['url_base']}/#{node['terraform']['version']}/#{node['terraform']['zipfile']}"
-  	win_install_dir node['terraform']['win_install_dir']
-  	owner node['terraform']['owner']
-   windows_path node['terraform']['win_install_dir'] do
-     action :add
-   end
BREAKS HERE
-          r = file "#{main_resource.name} SSL certificate key" do
-            path main_resource.key_path
-            owner 'root'
-            group 'root'
-            mode 00600
-            content main_resource.key_content
-            action :create
-          end
-          r = file "#{main_resource.name} SSL public certificate" do
-            path main_resource.cert_path
-            owner 'root'
-            group 'root'
-            mode 00644
-            content main_resource.cert_content
-            action :create
-          end
BREAKS HERE
-include_recipe "java"
-  # I don't understand why these are needed when installing from a package? Certainly broken on Centos. 
-    yum_repository "datastax" do
-      description   "DataStax Repo for Apache Cassandra"
-      baseurl       "http://rpm.datastax.com/community"
-      gpgcheck      false
-# These are required irrespective of package construction. 
-# node.cassandra.root_dir sub dirs need not to be managed by Chef, 
BREAKS HERE
-  Before do  
BREAKS HERE
-               when "redhat", "centos", "scientific", "fedora", "amazon"
-                 node['platform_version'].to_f >= 6.0 ? "cronie" : "vixie-cron"
-               else
-                 "cron"
-               end
-  action :upgrade
-end
BREAKS HERE
-  owner  'root'
-  group  'root'
-  mode   '0644'
BREAKS HERE
-            ::Chef::Cookbook::Chefignore.any_instance.stub(:remove_ignores_from).and_return(['metadata.rb'])
-            ::Chef::Cookbook::Chefignore.should_receive(:new).with(File.expand_path('chefignore'))
BREAKS HERE
-group node['cassandra']['group'] do
BREAKS HERE
-Chef::Log.debug("Homebrew owner is '#{homebrew_owner}'")
-
BREAKS HERE
-version          "1.4.2"
BREAKS HERE
-# I don't understand why these are needed when installing from a package? Certainly broken on Centos. 
-[node.cassandra.installation_dir,
-  node.cassandra.bin_dir,
-  node.cassandra.lib_dir,
-  node.cassandra.conf_dir].each do |dir|
-
-  directory dir do
-    owner     node.cassandra.user
-    group     node.cassandra.user
-    recursive true
-    action    :create
-  end
-end
-
-  node.cassandra.commitlog_dir].each do |dir|
BREAKS HERE
-          regex: /^[\w-]+(?:\/[\w-]+)+$/
BREAKS HERE
-unless server_ip
BREAKS HERE
-version          "7.0.0"
BREAKS HERE
-define :splunk_installer, :url => nil do
BREAKS HERE
-    a = execute "nxensite #{new_resource.name}" do
-      command "/usr/sbin/nxensite #{new_resource.name}"
-      notifies :reload, 'service[nginx]'
-      not_if do ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{new_resource.name}") end
-    end
-
-    new_resource.updated_by_last_action(a.updated_by_last_action?)
-    a = execute "nxdissite #{new_resource.name}" do
-      command "/usr/sbin/nxdissite #{new_resource.name}"
-      notifies :reload, 'service[nginx]'
-      only_if do ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{new_resource.name}") end
-    end
-
-    new_resource.updated_by_last_action(a.updated_by_last_action?)
-    
BREAKS HERE
-      redirect '/nodes'
BREAKS HERE
-  Chef::Log.fatal "rabbitmq_vhost_exists?: rabbitmqctl list_vhosts |grep '#{name}\\b'"
-  Chef::Log.fatal "rabbitmq_vhost_exists?: #{cmd.stdout}"
BREAKS HERE
-    link "#{node[:apache][:libexecdir]}/mod_dispatcher.so" do
BREAKS HERE
-    notify :restart, "service[mapserv-fcgi-#{new_resource.site}]"
BREAKS HERE
-    resource = chef_run.template('/opt/prometheus/prometheus.conf')
-        node.set['prometheus']['source']['version'] = '0.12.0'
-      expect(chef_run).to checkout_git("#{Chef::Config[:file_cache_path]}/prometheus-0.12.0").with(
-        revision: '0.12.0'
-        node.set['prometheus']['source']['version'] = '0.12.0'
-        url: 'https://sourceforge.net/projects/prometheusbinary/files/prometheus-ubuntu14.tar.bz2/',
-        checksum: '10b24708b97847ba8bdd41f385f492a8edd460ec3c584c5b406a6c0329cc3a4e',
-        version: '0.12.0',
-      chef_run.node.set['prometheus']['file_extension'] = 'tar.bz2'
-        extension: 'tar.bz2'
BREAKS HERE
-          :kind_of => [String, Integer],
-          :default => true
BREAKS HERE
-    expect(package).to notify('execute[osqueryd permissions]').to(:run).immediately
-    expect(chef_run).to_not run_execute('chown root:wheel /usr/local/bin/osqueryd')
BREAKS HERE
-      result = jb_cli("deploy #{source} --name=#{deploy_name} --runtime-name=#{runtime_name}", new_resource.instance)
BREAKS HERE
-  '<!-- QUICKSTART_HOMEPAGE - (string used for readyness detection, do not '\
-  'remove) -->'
BREAKS HERE
-        alert_type, event_priority, event_title, event_data = build_event_data(hostname, run_status)
-          evt = @dog.emit_event(Dogapi::Event.new(event_data,
-                                                  :msg_title => event_title,
-                                                  :event_type => 'config_management.run',
-                                                  :event_object => hostname,
-                                                  :alert_type => alert_type,
-                                                  :priority => event_priority,
-                                                  :source_type_name => 'chef'
-          ), :host => hostname)
-
-          begin
-            # FIXME: nice-to-have: abstract format of return value away a bit
-            # in dogapi directly. See https://github.com/DataDog/dogapi-rb/issues/18
-            if evt.length < 2
-              Chef::Log.warn("Unexpected response from Datadog Event API: #{evt}")
-            else
-              # [http_response_code, {"event" => {"url" => "...", ...}}]
-              # 2xx means ok
-              if evt[0].to_i / 100 != 2
-                Chef::Log.warn("Could not submit event to Datadog (HTTP call failed): #{evt[0]}")
-              else
-                Chef::Log.debug("Successfully submitted Chef event to Datadog for #{hostname} at #{evt[1]['event']['url']}")
-              end
-            end
-          rescue
-            Chef::Log.warn("Could not determine whether chef run was successfully submitted to Datadog: #{evt}")
-          end
-          Chef::Log.error(event_data)
-      # @return [Array] alert_type, event_priority, event_title, event_data
-        # This is the first line of the Event data, the rest is appended here.
-        event_data = "Chef updated #{run_status.updated_resources.length} resources out of #{run_status.all_resources.length} resources total."
-          event_data << "\n@@@\n#{run_status.formatted_exception}\n@@@\n"
-          event_data << "\n@@@\n#{run_status.backtrace.join("\n")}\n@@@\n"
-          event_data << "\n@@@\n"
-            event_data << "- #{r} (#{r.defined_at})\n"
-          event_data << "\n@@@\n"
-        [alert_type, event_priority, event_title, event_data]
BREAKS HERE
-version '1.3.0'
BREAKS HERE
-    options ( gem_info_hash[:options]) if gem_info_hash[:options]
BREAKS HERE
-depends 'mysql', '>= 4.0.20'
BREAKS HERE
-      Cheffish.enclosing_chef_server = { :url => server_url, :options => options }
BREAKS HERE
-      @search_query || params['q']
BREAKS HERE
-  if node['partitions'].nil? or not node['partitions'].any?{|s| s.include?(new_resource.device)}
-    disk_total_size new_resource
-    partition_start_size new_resource
-    if new_resource.start_size.eql?(new_resource.total_size)
-      create_file_partition new_resource
-    else
-      create_disk_partition new_resource
-    new_resource.updated_by_last_action(true)
BREAKS HERE
-r = node['systemd']['resolved']
-
-  dns r['dns']
-  fallback_dns r['fallback_dns']
-  llmnr r['llmnr']
BREAKS HERE
-        ip_addresses = open("http://169.254.169.254/latest/meta-data/network/interfaces/macs/#{mac}/local-ipv4s", options = { proxy: false }) { |f| f.read.split("\n") }
-        eni_id = open("http://169.254.169.254/latest/meta-data/network/interfaces/macs/#{mac}/interface-id", options = { proxy: false }, &:gets)
BREAKS HERE
-
-  exec_cmd(get_chown_link_cmd(new_resource.installer_prefix_dir + '/' + new_resource.target_symlink, new_resource.dynatrace_owner, new_resource.dynatrace_group))
-
-
-
-def exec_cmd(cmd2exec) 
-  puts "execute: #{cmd2exec}"
-  %x[ #{cmd2exec} ]
-end
BREAKS HERE
-    # Chef attributes
-    identity_attr :name
-    # Set the resource name
-    self.resource_name = :jenkins_view
-
-      if current_view
-        @current_resource.exists = true
-      else
-        @current_resource.exists = false
-      end
-         '' == new_resource.code
-
-Chef::Platform.set(
-  resource: :jenkins_view,
-  provider: Chef::Provider::JenkinsView,
-)
BREAKS HERE
-      data_bag_item = params[:data_bag_item]
-      parent_data_bag = data_bag.item.find(data_bag_item)
-
-      data_bag_item: data_bag_item,
-      data_bag: data_bag,
-      parent_data_bag: parent_data_bag
BREAKS HERE
-  systemd_packages += %w{libsystemd0 libpam-systemd}
BREAKS HERE
-            'stop program = "/bin/su - deploy -c \"ps -ax | grep \'bundle exec sidekiq\' | grep sidekiq_1.yml | ' \
-            'grep -v grep | awk \'{print $1}\' | xargs kill\"" with timeout 8 seconds'
-            'stop program = "/bin/su - deploy -c \"ps -ax | grep \'bundle exec sidekiq\' | grep sidekiq_2.yml | ' \
-            'grep -v grep | awk \'{print $1}\' | xargs kill\"" with timeout 8 seconds'
-            'stop program = "/bin/su - deploy -c \"ps -ax | grep \'bundle exec sidekiq\' | grep sidekiq_1.yml | ' \
-            'grep -v grep | awk \'{print $1}\' | xargs kill\"" with timeout 8 seconds'
-            'stop program = "/bin/su - deploy -c \"ps -ax | grep \'bundle exec sidekiq\' | grep sidekiq_2.yml | ' \
-            'grep -v grep | awk \'{print $1}\' | xargs kill\"" with timeout 8 seconds'
BREAKS HERE
-
BREAKS HERE
-          # rubocop:disable Lint/UselessAssignment
BREAKS HERE
-        cookbooks = Dir['${path}/*'].reject { |o| !File.directory?(o) }
BREAKS HERE
-    'hive_conf_dir' => hive_conf_dir
-    'logfile' => "${HIVE_LOG_DIR}/#{pkg}.log"
BREAKS HERE
-
BREAKS HERE
-      # respect chef proxy settings unless they have been disabled explicitly
-      proxy_arguments = get_java_proxy_arguments(new_resource.chef_proxy)
-      manage_plugin("install #{new_resource.url} #{proxy_arguments}")
BREAKS HERE
-  default[:ruby][:patch] = 'p451'
BREAKS HERE
-    Pathname.new(File.join(ENV["BERKSHELF_PATH"],"cookbooks"))
BREAKS HERE
-chef_version '>= 13.4.19'
BREAKS HERE
-          enterprise: ['test'],
BREAKS HERE
-        'linux_statement' => tpl[:type] == 'efi' ? 'linuxefi' : 'linux',
-        'initrd_statement' => tpl[:type] == 'efi' ? 'initrdefi' : 'initrd',
BREAKS HERE
-    components [node['lsb']['codename'], 'nginx']
BREAKS HERE
-    notifies :restart, "service[#{apache_daemon}]", :immediately
BREAKS HERE
-license 'Apache 2.0'
BREAKS HERE
-action :add do
-action :remove do
-      auth_users
-      comment
-      dont_compress
-      exclude
-      exclude_from
-      fake_super
-      gid
-      hosts_allow
-      hosts_deny
-      include
-      include_from
-      list
-      lock_file
-      log_file
-      log_format
-      max_connections
-      munge_symlinks
-      numeric_ids
-      path
-      read_only
-      refuse_options
-      secrets_file
-      strict_modes
-      timeout
-      transfer_logging
-      uid
-      use_chroot
-      write_only
-  rsync_resources.reduce({}) do |hash, resource|
-  node['rsyncd']['globals'].reduce({}) do |hash, (key, value)|
BREAKS HERE
-    only_if {  }
BREAKS HERE
-#
-# XXX this keeps breaking Chef12 knife default['ohai']['disabled_plugins'] = [ 'passwd' ]
-  config['node_name'] = node[:fqdn]
-  config['client_name'] = node[:fqdn]
-    if node[:fqdn] == get_bootstrap
-      "https://#{node[:bcpc][:bootstrap][:server]}"
-      "https://#{node[:bcpc][:bootstrap][:vip]}"
-  if node[:bcpc][:bootstrap][:proxy]
-    no_proxy_array = [
-                      'localhost',
-                      node[:ipaddress],
-                      node[:hostname],
-                      node[:fqdn],
-                      node[:bcpc][:bootstrap][:server],
-                      node[:bcpc][:management][:vip],
-                      node[:domain] ? "*#{node[:domain]}" : nil
-                     ].compact.uniq
-
-    config['http_proxy'] = node[:bcpc][:bootstrap][:proxy]
-    config['https_proxy'] = node[:bcpc][:bootstrap][:proxy].sub('http','https')
-    config['no_proxy'] = no_proxy_array.join(',')
-  if node[:fqdn] == get_bootstrap
-
-    if node[:bcpc][:bootstrap][:proxy]
-      no_proxy_array = [
-                        'localhost',
-                        node[:ipaddress],
-                        node[:hostname],
-                        node[:fqdn],
-                        node[:bcpc][:bootstrap][:server],
-                        node[:domain] ? "*#{node[:domain]}" : nil
-                       ].compact.uniq
-      
-      config['http_proxy'] = node[:bcpc][:bootstrap][:proxy]
-      config['https_proxy'] = node[:bcpc][:bootstrap][:proxy]
-      config['no_proxy'] = no_proxy_array.join(',')
-    end
-  end    
BREAKS HERE
-  options options
BREAKS HERE
-default[:sysctl][:params][:net][:ipv4][:ip_forward] = 0
BREAKS HERE
-depends 'openstack-common', '>= 11.0.0'
BREAKS HERE
-require "buff/config/json"
-  class Config < Buff::Config::JSON
-        ssl = @instance.ssl
-    # @param [Hash] options
-    #   @see {Buff::Config::JSON}
-    def initialize(path = self.class.path, options = {})
-      super(path, options).tap do
-        # if we need to add deprecation warnings in the future they can go here, right now we have none
-      end
-    attribute "api.timeout",
-      type: String,
-      default: "30"
-    attribute "chef.chef_server_url",
-      type: String,
-      default: Berkshelf.chef_config.chef_server_url
-    attribute "chef.validation_client_name",
-      type: String,
-      default: Berkshelf.chef_config.validation_client_name
-    attribute "chef.validation_key_path",
-      type: String,
-      default: Berkshelf.chef_config.validation_key
-    attribute "chef.client_key",
-      type: String,
-      default: Berkshelf.chef_config.client_key
-    attribute "chef.node_name",
-      type: String,
-      default: Berkshelf.chef_config.node_name
-    attribute "chef.trusted_certs_dir",
-      type: String,
-      default: Berkshelf.chef_config.trusted_certs_dir
-    attribute "chef.artifactory_api_key",
-      type: String,
-      default: Berkshelf.chef_config.artifactory_api_key
-    attribute "cookbook.copyright",
-      type: String,
-      default: Berkshelf.chef_config.cookbook_copyright
-    attribute "cookbook.email",
-      type: String,
-      default: Berkshelf.chef_config.cookbook_email
-    attribute "cookbook.license",
-      type: String,
-      default: Berkshelf.chef_config.cookbook_license
-    attribute "allowed_licenses",
-      type: Array,
-      default: Array.new
-    attribute "raise_license_exception",
-      type: Buff::Boolean,
-      default: false
-    attribute "vagrant.vm.box",
-      type: String,
-      default: "bento/ubuntu-14.04",
-      required: true
-    attribute "vagrant.vm.forward_port",
-      type: Hash,
-      default: Hash.new
-    attribute "vagrant.vm.provision",
-      type: String,
-      default: "chef_solo"
-    attribute "vagrant.omnibus.version",
-      type: String,
-      default: "latest"
-    attribute "ssl.verify",
-      type: Buff::Boolean,
-      default: true,
-      required: true
-    attribute "ssl.cert_store",
-      type: Buff::Boolean,
-      default: false,
-      required: false
-    attribute "ssl.ca_file",
-      type: String,
-      default: nil,
-      required: false
-    attribute "ssl.ca_path",
-      type: String,
-      default: nil,
-      required: false
-    attribute "ssl.client_cert",
-      type: String,
-      default: nil,
-      required: false
-    attribute "ssl.client_key",
-      type: String,
-      default: nil,
-      required: false
-    attribute "github",
-      type: Array,
-      default: [],
-      required: false
-    attribute "gitlab",
-      type: Array,
-      default: [],
-      required: false
-    attribute "github_protocol",
-      # :git, :ssh, or :https
-      type: Symbol,
-      default: :https,
-      required: false
BREAKS HERE
-  first_run_file = File.join(Chef::Config[:file_cache_path], 'apt_compile_time_update_first_run')
-    apt_update("compile time").run_action(:periodic)
-  apt_update "periodic"
BREAKS HERE
-        require 'pp'
-            pp cookbook_data
BREAKS HERE
-      #Wait here until the peer reaches connected status (needed for volume create later)
-        (1..volume_values['replica_count']).each do |i|
-          volume_bricks.each do |peer, vbricks|
-            options << " #{peer}:#{vbricks[i - 1]}"
-            if vbricks.count > 1
-              Chef::Log.warn("We have multiple bricks on the same peer, adding force flag to volume create")
-              force = true
-            end
-          end
-        end
-          (1..volume_values['replica_count']).each do |i|
-            volume_bricks.each do |peer, vbricks|
-              options << " #{peer}:#{vbricks[i - 1]}"
-              if vbricks.count > 1
-                Chef::Log.warn("We have multiple bricks on the same peer, adding force flag to volume create")
-                force = true
-              end
-        options << " force"
-        #Gluster still requires cli confirmation even if you use force for some odd reason.
BREAKS HERE
-        Dir.chdir(path)  # http://stackoverflow.com/a/808285/830426
-        cookbook_dirs=Dir["*"].reject{|o| not File.directory?(o)}
-        cookbook_dirs.each do |dir|
-          @logger.warn("Running berkshelf on cookbook: #{dir}")
-          exec!("cd #{path}/#{dir} && #{@berks} install && #{@berks} upload", 
BREAKS HERE
-  %(default example_ssl).each do |f|
BREAKS HERE
-attribute :metadata_expire, :kind_of => Integer, :regex => [/^\d+[d|h|m]?$/], :default => 300
BREAKS HERE
-  Berkshelf::Config.new.from_json(contents).save
BREAKS HERE
-  plugin_templates << "template[#{File.join(plugin['path'], plugin['filename'])}"
-  ]
BREAKS HERE
-require 'chef_zero/data_store/memory_store'
-        result = @options[:data_store] || DataStore::MemoryStore.new
-    # @param [Boolean] publish
-    #   publish the server information to STDOUT
-        puts <<-EOH.gsub(/^ {10}/, '')
-      Timeout.timeout(wait) do
-        @thread.join(wait) if @thread
BREAKS HERE
-  notifies :restart, 'service[systemd-timesyncd]', :delayed
-end
-
-abled = node['systemd']['enable_ntp']
-
-execute "timedatectl set-ntp #{abled}" do
-  not_if { Systemd::Helpers::NTP.ntp_abled?(abled) }
-  action [:enable, :start]
BREAKS HERE
-		options.merge!({ ssl_verify_mode: (Berkshelf::Config.instance.ssl.verify.nil? || Berkshelf::Config.instance.ssl.verify) ? OpenSSL::SSL::VERIFY_PEER : OpenSSL::SSL::VERIFY_NONE })
BREAKS HERE
-    def unit_drop_in_root(unit)
-      ::File.join(unit_conf_root, "#{unit.override}.#{unit.unit_type}.d")
-    end
-
-      ::File.join(
-        local_conf_root, "#{conf.conf_type}.conf.d"
-      )
-    end
-
-    def unit_path(unit)
-      if unit.drop_in
-        ::File.join(unit_drop_in_root(unit), "#{unit.name}.conf")
-        ::File.join(unit_conf_root, "#{unit.name}.#{unit.unit_type}")
-        ::File.join(local_conf_root, "#{conf.conf_type}.conf")
-    module_function :ini_config, :local_conf_root, :unit_conf_root, :unit_path,
-                    :unit_drop_in_root, :conf_drop_in_root, :conf_path
BREAKS HERE
-      def default_version_for(platform, platform_family, platform_version)
-        keyname = keyname_for(platform, platform_family, platform_version)
-        PlatformInfo.mysql_info[platform_family][keyname]['default_version']
-      rescue NoMethodError
-        nil
-      end
-
-      def service_name_for(platform, platform_family, platform_version, version)
-        keyname = keyname_for(platform, platform_family, platform_version)
-        PlatformInfo.mysql_info[platform_family][keyname][version]['service_name']
-      rescue NoMethodError
-        nil
-      end
-
-      def default_data_dir_for(platform_family)
-        PlatformInfo.mysql_info[platform_family]['default_data_dir']
-      rescue NoMethodError
-        nil
-      end
-
-            'default_data_dir' => '/var/lib/mysql',
-              'default_version' => '5.0',
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql51-mysql-server',
-                'service_name' => 'mysql51-mysqld'
-                'package_name' => 'mysql55-mysql-server',
-                'service_name' => 'mysql55-mysqld'
-              'default_version' => '5.1',
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysqld'
-              'default_version' => '5.1',
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql51-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-                'package_name' => 'mysql-community-server',
-                'service_name' => 'mysqld'
-            'default_data_dir' => '/var/lib/mysql',
-              'default_version' => '5.5',
-                'package_name' => 'community-mysql-server',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'community-mysql-server',
-                'service_name' => 'mysqld'
-            'default_data_dir' => '/var/lib/mysql',
-              'default_version' => '5.5',
-                'package_name' => 'mysql',
-                'service_name' => 'mysql'
-            'default_data_dir' => '/var/lib/mysql',
-              'default_version' => '5.1',
-                'package_name' => 'mysql-server-5.1',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysqld'
-              'default_version' => '5.1',
-                'package_name' => 'mysql-server-5.1',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysqld'
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server-5.5',
-                'service_name' => 'mysql'
-                'package_name' => 'mysql-server-5.6',
-                'service_name' => 'mysql'
-            'default_data_dir' => '/opt/local/lib/mysql',
-            # Do this or now, until Ohai correctly detects a
-            # smartmachine vs global zone (base64 13.4.0) from /etc/product
-              'default_version' => '5.5',
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysql'
-                'package_name' => 'mysql-server',
-                'service_name' => 'mysql'
-            'default_data_dir' => '/var/lib/mysql',
-              'default_version' => '5.5',
-                'package_name' => 'database/mysql-55',
-                'service_name' => 'mysql'
-                'package_name' => 'database/mysql-56',
-                'service_name' => 'mysql'
-            'default_data_dir' => '/var/db/mysql',
-              'default_version' => '5.5',
-                'package_name' => 'mysql55-server',
-                'service_name' => 'mysql-server'
-              'default_version' => '5.5',
-                'package_name' => 'mysql55-server',
-                'service_name' => 'mysql-server'
BREAKS HERE
-default[:sysctl][:params][:kernel][:modules][:disabled] =
BREAKS HERE
-        new(nil, path, nil)
-    # name and metadata are now ignored and should be removed
-    def initialize(name, path, metadata)
-      puts "compiling #{rb_file} to #{json_file}"
BREAKS HERE
-  # remove row_cache_provider is row_cache_provider == SerializingCacheProvider
-  # remove commitlog_sync_period_in_ms is commitlog_sync_batch_window_in_ms is not set
BREAKS HERE
-  elsif joined_cluster?(var_node_name, var_cluster_status)
-    Chef::Log.warn("[rabbitmq_cluster] Node is already member of #{current_cluster_name(var_cluster_status)}. Joining cluster will be skipped.")
BREAKS HERE
-        cmd = %Q|rsync -rl #{rsync_permissions} --rsh="ssh #{ssh_args}" #{extra_opts} #{rsync_excludes.collect{ |ignore| "--exclude #{ignore} " }.join} #{source_path} :#{target_path}|
BREAKS HERE
-default['openstack']['orchestration']['conf']['trustee']['auth_plugin'] = 'v3password'
BREAKS HERE
-        new_resource.updated_by_last_action(object_template)
-        new_resource.updated_by_last_action(object_template)
BREAKS HERE
-    print 'Please enter your full name (for Git config): '
-    print 'Please enter your email (for Git config): '
-    print 'Please enter your Github username (for Git config): '
BREAKS HERE
-
BREAKS HERE
-
-  package 'rsync'
BREAKS HERE
-  config_path = 'config/kibana.yml'
BREAKS HERE
-# see helpers.rb
BREAKS HERE
-  Chef::Log.debug("exists? value is #{exists?}")
-    Chef::Log.debug("computer_exists? value is #{computer_exists?}")
-  Chef::Log.debug("computer_exists? value is #{computer_exists?}")
-        cmd_text
-      Chef::Log.debug("***** cmd_text ***** #{cmd_text}")
-    end
-    Chef::Log.debug('The computer is not a member of the domain, unable to unjoin.')
BREAKS HERE
-        def generate_key(length=2048)
-          
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
BREAKS HERE
-    source get_artifact_url
-    checksum get_artifact_checksum
BREAKS HERE
-chef_version '>= 13.0' if respond_to?(:chef_version)
-version '2.10.1'
BREAKS HERE
-file 'hosts' do
-  path '/etc/hosts'
-  atomic_update false
-  content "127.0.0.1\tlocalhost boulder boulder-rabbitmq boulder-mysql test.example.com new.example.com web.example.com mail.example.com"
-include_recipe 'letsencrypt-boulder-server'
-# awaiting https://github.com/customink-webops/hostsfile/pull/78
-# edit_resource is a chef 12.10/compat_resource feature
-edit_resource(:hostsfile_entry, '127.0.0.1') do
-  action :nothing
BREAKS HERE
-    include_recipe 'powershell::windows_reboot' if node['powershell']['installation_reboot_mode'] == "immediate_reboot"
-    
BREAKS HERE
-        before(:each) do
-          File.stub(:exists?).and_return(true)
-          Berkshelf::Chef::Cookbook::Chefignore.any_instance.stub(:remove_ignores_from).and_return(['metadata.rb'])
-        end
-
-          Berkshelf::Chef::Cookbook::Chefignore.should_receive(:new).with(File.expand_path('chefignore'))
-        it "removes files in chefignore" do
-          cached_cookbooks = [ Berkshelf::CachedCookbook.from_path(fixtures_path.join('cookbooks/example_cookbook')) ]
-          FileUtils.should_receive(:cp_r).with(['metadata.rb'], anything()).exactly(1).times
-          FileUtils.should_receive(:cp_r).with(anything(), anything(), anything()).once
BREAKS HERE
-version          '16.0.0'
BREAKS HERE
-            },            
BREAKS HERE
-      parsed_version.gsub('.', '') if node['platform_family'] == 'omnios'
BREAKS HERE
-  source_checksum node['git']['0f30984828d573da01d9f8e78210d5f4c56da1697fd6d278bad4cfa4c22ba271']
BREAKS HERE
-    WantedBy' => 'multi-user.target'
BREAKS HERE
-  context 'Postgresql + Git + Unicorn + Nginx' do
BREAKS HERE
-log node['rsyslog']['group']
-
BREAKS HERE
-    let(:output) do
-The directory below is not a valid cookbook:
-/path
-    it 'prints out a helpful error message with a path' do
-      expect(subject.to_s).to eql(output)
BREAKS HERE
-
-bashd_entry 'setup-git-ps1-prompt' do
-  user vm_user
-  source 'git_ps1.erb'
-end
BREAKS HERE
-openstack_endpoint service_type do
-openstack_endpoint 'cloudformation' do
BREAKS HERE
-default['openstack']['endpoints']['block-storage-api']['path'] = '/v1/%(tenant_id)s'
BREAKS HERE
-    action_class.class_eval do
-          install = mysql_server_installation(name, &block)
-          install = mysql_server_installation_package(name, &block)
-          svc = mysql_service_manager(name, &block)
-          svc = mysql_service_manager_sysvinit(name, &block)
-          svc = mysql_service_manager_upstart(name, &block)
-          svc = mysql_service_manager_systemd(name, &block)
BREAKS HERE
-    # Finds a solution for the currently added sources and their dependencies
-    # @example
-    #   { 
-    #     "nginx" => 0.101.0,
-    #     "build-essential" => 1.0.2,
-    #     "runit" => 0.15.0,
-    #     "bluepill" => 1.0.4,
-    #     "ohai" => 1.0.2
-    #   }
-    #
-    # @return [Hash]
-    #   a solution containing Cookbook names for keys and a locked version for values
-      quietly { selector.find_solution(solution_constraints) }
BREAKS HERE
-    ChefSpec.define_matcher("systemd_#{misc}").to_sym)
BREAKS HERE
-        from_file(options[:berksfile], options.slice(:except, :only, :delete))
BREAKS HERE
-version          '11.1.0'
BREAKS HERE
-default['icinga2']['disable_conf_d'] = false
BREAKS HERE
-# Cookbook Name:: openstack-utils
BREAKS HERE
-package 'postfix'
BREAKS HERE
-# Cookbook Name:: openstack-client
BREAKS HERE
-  only_if { IO.read('/proc/1/comm').chomp == 'systemd' }
BREAKS HERE
-directory "creating st2 log directory" do
BREAKS HERE
-  creates keyring
BREAKS HERE
-      q = if search_query == node['cassandra']['seed_discovery']['search_query']
-            search_query
-          else
-            "chef_environment:#{node.chef_environment} AND role:#{node['cassandra']['seed_discovery']['search_role']} AND cassandra_cluster_name:#{node['cassandra']['cluster_name']}"
-          end
BREAKS HERE
-    def vault_secret(vault, secret_name, spn = {})
-      request_url = vault_request_url(vault, secret_name)
-      @provider ||= begin
-    def vault_request_url(vault, secret_name, resource = 'secrets', version = nil, api_version = '2015-06-01')
-      fail ArugmentError 'Invalid SPN info provided' unless spn['tenant_id'] && spn['client_id'] && spn['secret']
BREAKS HERE
-describe Soloist::RemoteConfig do
BREAKS HERE
-name 'macos-cookbook-cookbook'
BREAKS HERE
-    execute 'start_iptables' do
-      command 'systemctl start iptables'
-      user 'root'
-      not_if 'systemctl is-active iptables.service | grep -q -w active'
-    execute 'start_ip6tables' do
-      command 'systemctl start ip6tables'
-      user 'root'
-      not_if 'systemctl is-active ip6tables.service | grep -q -w active'
BREAKS HERE
-  components %w(main)
-package %w(cmake)
BREAKS HERE
-    PORT = 8889
-
BREAKS HERE
-  command "#{systemd_prefix}/bin/systemd-tmpfiles --create"
BREAKS HERE
-        # If we're on ec2, use the instance by default, unless instructed otherwise
-        @use_ec2_instance_id = !config.has_key?(:use_ec2_instance_id) || config.has_key?(:use_ec2_instance_id) && config[:use_ec2_instance_id]
-        hostname = run_status.node.name
-        if @use_ec2_instance_id && run_status.node.attribute?("ec2") && run_status.node.ec2.attribute?("instance_id")
-          hostname = run_status.node.ec2.instance_id
-        end
BREAKS HERE
-      :full_name => "Adobe CQ #{node['cq']['version']} "\
-                    "#{local_id.to_s.capitalize}",
BREAKS HERE
-  apt_components = node['openstack']['apt']['components']
-
-  # Simple variable substitution for LSB codename and OpenStack release
-  apt_components.each do | comp |
-    comp.gsub! '%release%', node['openstack']['release']
-    comp.gsub! '%codename%', node['lsb']['codename']
-  end
-
-  apt_repository 'openstack-ppa' do
-    uri node['openstack']['apt']['uri']
-    components apt_components
-
BREAKS HERE
-        "vagrant.chef.chef_server_url",
-        "vagrant.chef.validation_client_name",
-        "vagrant.chef.validation_key_path",
BREAKS HERE
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiqctl stop ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiqctl stop ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiqctl stop ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiq ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" bundle exec sidekiqctl stop ' \
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" QUEUE=test_queue VERBOSE=1 ' \
-          'PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid COUNT=2 ' \
-          'bundle exec rake environment resque:work 2>&1 | logger -t resque-dummy_project-1\'" with timeout 90 seconds'
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" QUEUE=test_queue VERBOSE=1 ' \
-          'PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid COUNT=2 ' \
-          'bundle exec rake environment resque:work 2>&1 | logger -t resque-dummy_project-2\'" with timeout 90 seconds'
-            'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" QUEUE=test_queue VERBOSE=1 ' \
-            'PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-1.pid COUNT=2 ' \
-            'bundle exec rake environment resque:work 2>&1 | logger -t resque-dummy_project-1\'" ' \
-            'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" QUEUE=test_queue VERBOSE=1 ' \
-            'PIDFILE=/srv/www/dummy_project/shared/pids/resque_dummy_project-2.pid COUNT=2 ' \
-            'bundle exec rake environment resque:work 2>&1 | logger -t resque-dummy_project-2\'" ' \
-          'data.sqlite3" bin/delayed_job start --pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 --queues=test_queue' \
-          'data.sqlite3" bin/delayed_job stop --pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" ' \
-          'data.sqlite3" bin/delayed_job start --pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 --queues=test_queue' \
-          'data.sqlite3" bin/delayed_job stop --pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" ' \
-            'data.sqlite3" bin/delayed_job start --pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 ' \
-            'data.sqlite3" bin/delayed_job stop --pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" ' \
-            'data.sqlite3" bin/delayed_job start --pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 ' \
-            'data.sqlite3" bin/delayed_job stop --pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" ' \
BREAKS HERE
-      not_if { registry_data_exists?('HKLM\SOFTWARE\Microsoft\PowerShell\3\PowerShellEngine', { :name => 'PowerShellVersion', :type => :string, :data => node['powershell']['powershell5']['version'] }) }
BREAKS HERE
-    default['sysctl']['params']['kernel']['exec-shield'] = 1
BREAKS HERE
-when "rhel", "fedora", "amazon"
BREAKS HERE
-name 'chef-reference'
-run_list 'chef-reference::provisioning-cluster'
-default_source :community
-
-cookbook 'chef-reference', path: '.'
BREAKS HERE
-
-      def foo(content)
-        filename = '/Users/sethvargo/Desktop/output.txt'
-        if File.exists?(filename)
-          File.open(filename, 'a') { |f| f.write("\n\n") }
-          File.open(filename, 'a') { |f| f.write(content.to_s) }
-        else
-          File.open(filename, 'w') { |f| f.write(content.to_s) }
-        end
-      end
BREAKS HERE
-        if cookbook = locked.cached_cookbook
-      locks = graph.locks.inject({}) do |hash, (name, dependency)|
-        hash[name] = "= #{dependency.locked_version}"
-        if cookbook = dependency.cached_cookbook
-            item.dependencies.sort.each do |name, constraint|
-              out << "    #{name} (#{constraint})\n"
BREAKS HERE
-Then /^the metadata defines valid version warning 061 should be (shown|not shown) against the metadata file$/ do |show_warning|
-  expect_warning('FC061', :file => "metadata.rb", :expect_warning => show_warning == 'shown')
BREAKS HERE
-# Read:
-#  http://blog.packagecloud.io/eng/2016/03/21/apt-hash-sum-mismatch/
-#  https://packagecloud.io/computology/apt-backport
-package 'apt' do
-  version '1.2.10'
-  action :nothing
-end
-
-execute 'Ubuntu Precise and Trusty: APT hash sum mismatch workaround' do
-  command 'curl -s https://packagecloud.io/install/repositories/computology/apt-backport/script.deb.sh | bash'
-  only_if { node['platform'] == 'ubuntu' }
-  only_if { %w(trusty precise).include? node['lsb']['codename'] }
-  creates '/etc/apt/sources.list.d/computology_apt-backport.list'
-  notifies :install, 'package[apt]', :immediately
-end
-
BREAKS HERE
-property :options_file, String, default: lazy { default_property_for(:options_file) }
-property :conf_file, String, default: lazy { default_property_for(:conf_file) }
-property :query_log, String
-  cookbook_file "#{bind_service.sysconfdir}/named.rfc1912.zones" do
-    cookbook_file "#{bind_service.vardir}/#{var_file}" do
-  rndc_key = default_property_for(:rndc_key_file)
-    command "rndc-confgen -a -c #{rndc_key} -r /dev/urandom; chown #{bind_service.run_user}:#{bind_service.run_group} #{rndc_key}"
-    creates rndc_key
-      mode 0o644
-        vardir: bind_service.vardir,
-        query_log: new_resource.query_log,
-      notifies :restart, 'bind_service[default]', :immediately
-        sysconfdir: bind_service.sysconfdir,
-      notifies :restart, 'bind_service[default]', :immediately
BREAKS HERE
-      validate_respose(http_resp, '302')
-      validate_respose(http_resp, '302')
-      validate_respose(http_resp, '200')
BREAKS HERE
-default['postfix']['packages'] = %w[postfix]
BREAKS HERE
-# Copyright 2009-2011, Opscode, Inc.
-default['activemq']['home']  = '/opt'
BREAKS HERE
-  default["chef_client"]["run_path"]    = "C:/var/run/chef"
-  default["chef_client"]["cache_path"]  = "C:/var/chef/cache"
-  default["chef_client"]["backup_path"] = "C:/var/chef/backup"
-  default["chef_client"]["log_dir"]     = "C:/var/log/chef"
-  default["chef_client"]["bin"]         = File.join(Gem.bindir, "chef-client")
BREAKS HERE
-    @slackr_options[:icon_url] = config[:icon_url] if config[:icon_url]
-    @slackr_options[:icon_emoji] = config[:icon_emoji] unless config[:icon_url]
-    slackr_options[:username] = node_name unless slackr_options[:username]
-    slack = Slackr.connect(team, api_key, slackr_options)
-    when "off"
-      return
-    else
-      return
BREAKS HERE
-    # @param [String] path
-    #   path on disk to the file containing the contents of this Berksfile
BREAKS HERE
-  if node[:platform_version].to_f < 8.04 && node[:platform] =~ /ubuntu/i
BREAKS HERE
-
-    RSSVCPASSWORD:  new_resource.rs_account_pwd,
BREAKS HERE
-          :host_name, arg,
BREAKS HERE
-  case node['platform_version'].to_i
-  when 5
-    default['perl']['packages'] = %w(perl perl-libwww-perl)
-  else
-    default['perl']['packages'] = %w(perl perl-libwww-perl perl-CPAN)
-  end
BREAKS HERE
-unless node['kernel']['machine'] == 'x86_64'
BREAKS HERE
-version          "1.7.2"
BREAKS HERE
-    default['splunk']['forwarder']['url'] = 'http://download.splunk.com/products/universalforwarder/releases/6.4.0/linux/splunkforwarder-6.4.0-f2c836328108-linux-2.6-x86_64.rpm'
-    default['splunk']['server']['url'] = 'http://download.splunk.com/products/splunk/releases/6.4.0/linux/splunk-6.4.0-f2c836328108-linux-2.6-x86_64.rpm'
-    default['splunk']['forwarder']['url'] = 'http://download.splunk.com/products/universalforwarder/releases/6.4.0/linux/splunkforwarder-6.4.0-f2c836328108.i386.rpm'
-    default['splunk']['forwarder']['url'] = 'http://download.splunk.com/products/universalforwarder/releases/6.4.0/linux/splunkforwarder-6.4.0-f2c836328108-linux-2.6-amd64.deb'
-    default['splunk']['server']['url'] = 'http://download.splunk.com/products/splunk/releases/6.4.0/linux/splunk-6.4.0-f2c836328108-linux-2.6-amd64.deb'
-    default['splunk']['forwarder']['url'] = 'http://download.splunk.com/products/universalforwarder/releases/6.4.0/linux/splunkforwarder-6.4.0-f2c836328108-linux-2.6-intel.deb'
-  default['splunk']['forwarder']['url'] = 'http://download.splunk.com/products/universalforwarder/releases/6.4.0/solaris/splunkforwarder-6.4.0-f2c836328108-solaris-10-intel.pkg.Z'
-  default['splunk']['server']['url'] = 'http://download.splunk.com/products/splunk/releases/6.4.0/solaris/splunk-6.4.0-f2c836328108-solaris-10-intel.pkg.Z'
BREAKS HERE
-    checksum    new_resource.checksum if property_is_set? :checksum
BREAKS HERE
-      def docker_kernel
-        node['kernel']['name']
-      end
-
-      def docker_arch
-        node['kernel']['machine']
-      end
-
-      def default_checksum
-        case docker_kernel
-        when 'Darwin'
-          case version
-          when '1.6.0' then '9e960e925561b4ec2b81f52b6151cd129739c1f4fba91ce94bdc0333d7d98c38'
-          when '1.6.2' then 'f29b8b2185c291bd276f7cdac45a674f904e964426d5b969fda7b8ef6b8ab557'
-          when '1.7.0' then '1c8ee59249fdde401afebc9a079cb75d7674f03d2491789fb45c88020a8c5783'
-          when '1.7.1' then 'b8209b4382d0b4292c756dd055c12e5efacec2055d5900ac91efc8e81d317cf9'
-          when '1.8.1' then '0f5db35127cf14b57614ad7513296be600ddaa79182d8d118d095cb90c721e3a'
-          when '1.8.2' then 'cef593612752e5a50bd075931956075a534b293b7002892072397c3093fe11a6'
-          end
-        when 'Linux'
-          case version
-          when '1.6.0' then '526fbd15dc6bcf2f24f99959d998d080136e290bbb017624a5a3821b63916ae8'
-          when '1.6.2' then 'e131b2d78d9f9e51b0e5ca8df632ac0a1d48bcba92036d0c839e371d6cf960ec'
-          when '1.7.1' then '4d535a62882f2123fb9545a5d140a6a2ccc7bfc7a3c0ec5361d33e498e4876d5'
-          when '1.8.1' then '843f90f5001e87d639df82441342e6d4c53886c65f72a5cc4765a7ba3ad4fc57'
-          when '1.8.2' then '97a3f5924b0b831a310efa8bf0a4c91956cd6387c4a8667d27e2b2dd3da67e4d'
-          end
-        end
-      end
-
-      def default_source
-        "https://get.docker.com/builds/#{docker_kernel}/#{docker_arch}/docker-#{version}"
-      end
-
-      def default_version
-        if node['platform'] == 'amazon' ||
-           node['platform'] == 'ubuntu' && node['platform_version'].to_f < 15.04 ||
-           node['platform_family'] == 'rhel' && node['platform_version'].to_i < 7 ||
-           node['platform_family'] == 'debian' && node['platform_version'].to_i <= 7
-          '1.6.2'
-        else
-          '1.8.2'
-        end
-      end
-
-      # Path to docker executable
-      def docker_bin
-        '/usr/bin/docker'
-      end
-
BREAKS HERE
-# require 'spiceweasel/environments'
-# require 'spiceweasel/roles'
-# require 'spiceweasel/data_bags'
-# require 'spiceweasel/nodes'
-# require 'spiceweasel/clusters'
BREAKS HERE
-  replace /.*bamboo.home=.*/
-  with    "bamboo.home=#{node[:bamboo][:data_dir]}"
BREAKS HERE
-          STDERR.puts "ERROR: Environment '#{environment}' listed in the manifest does not match the name '#{name}' within the #{file} file."
BREAKS HERE
-require 'berkshelf/ui'
-      @ui ||= ::Thor::Shell::Color.tap { |c| c.send(:include, ::Berkshelf::UI) }.new
BREAKS HERE
-default['postfixadmin']['version'] = '2.3.6'
-default['postfixadmin']['checksum'] = 'ea505281b6c04bda887eb4e6aa6c023b354c4ef4864aa60dcb1425942bf2af63'
BREAKS HERE
-smarter_sysctl = node.in_shard?(35)
BREAKS HERE
-    # TODO: tests
-    # TODO: implement actual behavior
-      { "run_list" => [], "Policyfile" => [], "dependencies" => [] }
BREAKS HERE
-# Copyright:: 2013-2017, Chef Software, Inc.
-    use_inline_resources # ~FC113
-    #
-    # This provider supports why-run mode.
-    #
-    def whyrun_supported?
-      true
-    end
-
BREAKS HERE
-    File.expand_path(File.join('..', '..', 'cookbooks', 'git'), __FILE__)
BREAKS HERE
-			pkgin_package package do 
-      	action :install 
-    	end
-		end
BREAKS HERE
-directory node['rsyslog']['working_dir']  do
BREAKS HERE
-# Cookbook Name:: nodejs
-# Copyright 2010-2012, Promet Solutions
BREAKS HERE
-case node['platform_family']
-    when 'debian'
-      # bypass dpkg errors about pre-existing init or conf file
-      packager_opts = '-o Dpkg::Options::="--force-confold" --force-yes'
-    else
-      packager_opts = ''
-end
-
-    options packager_opts
BREAKS HERE
-    webserver = node['kibana']['webserver']
-  template 'kibana-nginx_file.conf.erb'
BREAKS HERE
-        "attributes":[{"name":"syslog_pkg", "options":{"default":"rsyslog", "description":"syslog package...", "type":"string"}}]}],
BREAKS HERE
-          'repo' => SUPPORT_DIR
-          'pipeline' => 'pipe',
BREAKS HERE
-          args: '-jar \"/opt/selenium/server/selenium-server-standalone.jar\" -role node '\
-            '-nodeConfig \"/opt/selenium/config/selenium_node.json\"',
BREAKS HERE
-case context.license
-  when "apachev2"
-    spdx_license = "Apache-2.0"
-  when "mit"
-    spdx_license = "MIT"
-  when "gplv2"
-    spdx_license = "GPL-2.0"
-  when "gplv3"
-    spdx_license = "GPL-3.0"
-  else
-    spdx_license = "All Rights Reserved"
-end
BREAKS HERE
-  if keystone.length > 0
BREAKS HERE
-        tabs: %w(basic recipes files metadata),
BREAKS HERE
-if node["ntp"].has_key?("listen_network")
-  if node["ntp"]["listen_network"] == "primary"
-    node.set["ntp"]["listen"] = node["ipaddress"]
-    net = IPAddr.new(node["ntp"]["listen_network"])
-    node["network"]["interfaces"].each do |interface|
-      unless interface[1]['addresses'].nil?
-        interface[1]["addresses"].each do |k, v|
-          if v["family"] == "inet6" or v["family"] == "inet" then
-            addr=IPAddr.new(k)
-            if net.include?(addr) then
-              node.set["ntp"]["listen"] = addr
-            end
-          end
-        end
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.62.1/}) }
BREAKS HERE
-# Copyright 2012, Kirill Kouznetsov.
-actions :run, :disable
-attribute :path, kind_of: String, name_attribute: true
-# vim: ts=2 sts=2 sw=2 sta et
BREAKS HERE
-  class DownloadFailure < BerkshelfError; status_code(102); end
-
-  class DuplicateLocationDefined < BerkshelfError; status_code(114); end
BREAKS HERE
-        x86_64: ( !(node['kernel']['machine'] =~ /x86_64/).nil?),
BREAKS HERE
-depends 'yum', '~> 3.0'
BREAKS HERE
-def user_has_correct_permissions?(name, vhost, perm_list = nil)
-  Chef::Log.debug "rabbitmq_user_has_correct_permissions?: #{cmd}"
-  Chef::Log.debug "rabbitmq_user_has_correct_permissions?: #{cmd.stdout}"
-  Chef::Log.debug "rabbitmq_user_has_correct_permissions?: #{cmd.exitstatus}"
-  if perm_list.nil? && cmd.stdout.empty? # looking for empty and found nothing
-    Chef::Log.debug 'rabbitmq_user_has_correct_permissions?: no permissions found'
-  if perm_list == cmd.stdout.split.drop(1) # existing match search
-    Chef::Log.debug 'rabbitmq_user_has_correct_permissions?: matching permissions already found'
-  Chef::Log.debug 'rabbitmq_user_has_correct_permissions?: permissions found but do not match'
-  vhosts.each do |vhost|
-    next if user_has_correct_permissions?(new_resource.user, vhost, perm_list)
-  vhosts.each do |vhost|
-    next if user_has_correct_permissions?(new_resource.user, vhost)
BREAKS HERE
-  if node['powershell']['winrm']['enable_https_transport']
-    winrm_cmd = 'powershell.exe winrm get winrm/config/listener?Address=*+Transport=HTTPS'
-  else
-    winrm_cmd = 'powershell.exe winrm get winrm/config/listener?Address=*+Transport=HTTP'
-  end
BREAKS HERE
-      mode node['dovecot']['conf_files_mode']
BREAKS HERE
-version '0.1.9'
-depends 'chef-ingredient'
BREAKS HERE
-user node['openresty']['user'] do
-  system true
-  shell '/bin/false'
-  home '/var/www'
-end
-
BREAKS HERE
-  # Static class to make PostfixAdmin HTTP API requests
-  module API
-    # rubocop:disable Style/ClassVars
-    @@cookie = nil
-    @@authenticated = nil
-    # rubocop:enable Style/ClassVars
-
-    def self.request(method, path, body, ssl = false)
-      proto = ssl ? 'https' : 'http'
-      port = ssl ? 443 : 80
-      uri = URI.parse("#{proto}://localhost:#{port}#{path}")
-      http = Net::HTTP.new(uri.host, uri.port)
-      if ssl
-        require 'net/https'
-        http.use_ssl = true
-        http.verify_mode = OpenSSL::SSL::VERIFY_NONE
-      end
-      http.set_debug_output $stderr if Chef::Config[:log_level] == :debug
-
-      case method.downcase
-      when 'post'
-        request = Net::HTTP::Post.new(uri.request_uri)
-        request['Content-Type'] = 'application/x-www-form-urlencoded'
-      else
-        request = Net::HTTP::Get.new(uri.request_uri)
-      end
-      request['User-Agent'] =
-        if defined?(Chef::HTTP::HTTPRequest)
-          Chef::HTTP::HTTPRequest.user_agent
-        else
-          Chef::REST::RESTRequest.user_agent
-        end
-      request['Cookie'] = @@cookie unless @@cookie.nil? # rubocop:disable Style/ClassVars
-      request.set_form_data(body) unless body.nil?
-
-      response = http.request(request)
-      if response['Set-Cookie'].is_a?(String)
-        @@cookie = response['set-cookie'].split(';')[0] # rubocop:disable Style/ClassVars
-        Chef::Log.debug("#{name}##{__method__} cookie: #{@@cookie}") # rubocop:disable Style/ClassVars
-      end
-      if response.code.to_i >= 400
-        error_msg = "#{name}##{__method__}: #{response.code} #{response.message}"
-        Chef::Log.fatal(error_msg)
-        fail error_msg
-      elsif response.body.match(/^.*class=['"]error_msg['"][^>]*>([^<]*)<.*$/)
-        error_msg = response.body.gsub(
-          /^.*class=['"]error_msg['"][^>]*>([^<]*)<.*$/m,
-          '\1'
-        )
-        Chef::Log.fatal("#{name}##{__method__}: #{error_msg}")
-        fail "#{name}##{__method__}"
-      elsif response.body.match(/^.*class=['"]standout['"][^>]*>([^<]*)<.*$/)
-        response.body.gsub(
-          /^.*class=['"]standout['"][^>]*>([^<]*)<.*$/m,
-          '\1'
-        )
-      else
-        nil
-      end
-    end
-
-    def self.get(path, ssl = false)
-      request('get', path, nil, ssl)
-    def self.post(path, body, ssl = false)
-      request('post', path, body, ssl)
-    end
-
-    def self.index(ssl = false)
-      get('/login.php', ssl)
-    end
-
-    def self.setup(body, ssl = false)
-      post('/setup.php', body, ssl)
-    end
-
-    def self.login(username, password, ssl = false)
-      return if @@authenticated # rubocop:disable Style/ClassVars
-      index(ssl)
-      body = {
-        fUsername: username,
-        fPassword: password,
-        lang: 'en',
-        submit: 'Login'
-      }
-      post('/login.php', body, ssl)
-      @@authenticated = true # rubocop:disable Style/ClassVars
-    end
-
-    def self.create_admin(username, password, setup_password, ssl = false)
-      body = {
-        form: 'createadmin',
-        setup_password: setup_password,
-        fUsername: username,
-        fPassword: password,
-        fPassword2: password,
-        submit: 'Add+Admin'
-      }
-      setup(body, ssl)
-    def self.create_domain(
-      domain, description, aliases, mailboxes, login_username, login_password,
-      ssl = false
-    )
-      login(login_username, login_password, ssl)
-      post('/create-domain.php', body, ssl)
-    def self.create_mailbox(
-      username, domain, password, name, active, mail, login_username,
-      login_password, ssl = false
-    )
-      login(login_username, login_password, ssl)
-        fPassword: password,
-        fPassword2: password,
-      post('/create-mailbox.php', body, ssl)
-    def self.create_alias(
-      address, domain, goto, active, login_username, login_password, ssl = false
-    )
-      login(login_username, login_password, ssl)
-      post('/create-alias.php', body, ssl)
-    def self.create_alias_domain(
-      alias_domain, target_domain, active, login_username, login_password,
-      ssl = false
-    )
-      login(login_username, login_password, ssl)
-      post('/create-alias-domain.php', body, ssl)
BREAKS HERE
-  before { compute_stubs }
-    before do
-      @chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-      @chef_run.converge 'openstack-compute::compute'
-    end
-    expect_runs_nova_common_recipe
-      expect(@chef_run).to include_recipe 'openstack-compute::api-metadata'
-      expect(@chef_run).to include_recipe 'openstack-compute::network'
-    # stubbing the run_context properly is non-trivial, fix with ChefSpec 3.0
-    # it 'doesn't run network recipe with openstack-network::server' do
-    #   chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-    #   node = chef_run.node
-    #   node.run_list.stub('include?').and_return true
-    #   chef_run.converge 'openstack-compute::compute'
-    #   expect(chef_run).not_to include_recipe 'openstack-compute::network'
-    # end
-
-      expect(@chef_run).to upgrade_package 'nova-compute'
-      expect(@chef_run).to upgrade_package 'nfs-common'
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-      node = chef_run.node
-      chef_run.converge 'openstack-compute::compute'
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-      node = chef_run.node
-      chef_run.converge 'openstack-compute::compute'
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-      node = chef_run.node
-      chef_run.converge 'openstack-compute::compute'
-      chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-      node = chef_run.node
-      chef_run.converge 'openstack-compute::compute'
-        chef_run = ::ChefSpec::Runner.new ::UBUNTU_OPTS
-        node = chef_run.node
-        chef_run.converge 'openstack-compute::compute'
-      before do
-        @file = @chef_run.cookbook_file '/etc/nova/nova-compute.conf'
-      end
-        expect(sprintf('%o', @file.mode)).to eq '644'
-      expect(@chef_run).to enable_service 'nova-compute'
-      expect(@chef_run).to start_service 'nova-compute'
-      expect(@chef_run).to include_recipe 'openstack-compute::libvirt'
BREAKS HERE
-if powershell_out('Get-Command WebpiCmd.exe').exitstatus == 0
BREAKS HERE
-
-    def self.value(v)
-      if v.nil?
-        'NULL'
-      elsif v === true
-        "'YES'"
-      elsif v === false
-        "'NO'"
-      elsif v.kind_of?(Fixnum) or v.kind_of?(Float)
-        v
-      elsif v.kind_of?(Array)
-        PostfixAdmin::PHP.array(v)
-      elsif v.kind_of?(Hash)
-        PostfixAdmin::PHP.hash(v)
-        "'#{v.to_s}'"
-
-
BREAKS HERE
-  no_fallback_secret = {"auth" => "exception raised"}
-  content no_fallback_secret["auth"]
BREAKS HERE
-  db_type = "unencrypted" if db_type == "vault" and Chef::Config[:solo]
BREAKS HERE
-default[:mysql][:autofs_options] = "-fstype=none,bind,rw"
-default[:mysql][:autofs_entry] = "#{node[:mysql][:datadir]} #{node[:mysql][:autofs_options]} :#{node[:mysql][:ec2_path]}"
-
BREAKS HERE
-    'name' => 'cirros',
-    'id' => nil,
-    'name' => 'cirros',
-    'id' => nil,
-    'tempest_packages' => %w(git libxslt-devel
-                             libxml2-devel python-testrepository
-                             libffi-devel python-setuptools),
-    'package_overrides' => ''
-    'tempest_packages' => %w(git libxml2-dev libxslt-dev testrepository
-                             python-dev libffi-dev),
-    'package_overrides' => "-o Dpkg::Options::='--force-confold' -o Dpkg::Options::='--force-confdef'"
BREAKS HERE
-  code <<-EOH
-  EOH
BREAKS HERE
-          parts = label.split(':')
-          a << "#{parts[0]}=\"#{parts[1]}\""
BREAKS HERE
-      @berksfile = berksfile
-      @filepath  = File.expand_path("#{berksfile.filepath}.lock")
-      @dependencies   = {}
BREAKS HERE
-            'Healthcheck' => new_resource.health_check,
BREAKS HERE
-def automount; yield; end
BREAKS HERE
-    provider Chef::Provider::Service::Upstart if node['platform'].eql?('ubuntu')
BREAKS HERE
-    '3.pool.ntp.org'
BREAKS HERE
-        h[:key]      = private_key if private_key_given?
-    def private_key
-      return if node.run_state[:jenkins_private_key_present]
-      content = node['jenkins']['executor']['private_key']
-      destination = File.join(Chef::Config[:file_cache_path], 'jenkins-key')
-      file = Chef::Resource::File.new(destination, run_context)
-      file.content(content)
-      file.backup(false)
-      file.mode('0600')
-      file.run_action(:create)
-
-      node.run_state[:jenkins_private_key_present] = true
-
-      destination
-      return if node.run_state[:jenkins_cli_present]
-      source = File.join(endpoint, 'jnlpJars', 'jenkins-cli.jar')
-      remote_file = Chef::Resource::RemoteFile.new(cli, run_context)
-      remote_file.source(source)
-      remote_file.backup(false)
-      remote_file.mode('0755')
-      remote_file.run_action(:create)
-
-      node.run_state[:jenkins_cli_present] = true
BREAKS HERE
-default["glance"]["syslog"]["use"] = true
BREAKS HERE
-      token = token.unpack('L')[0]
BREAKS HERE
-# resolver and is required for systemd-resolved to work.
-    node.default['fb_nsswitch']['databases']['hosts'].insert(idx + 1, 'resolve')
BREAKS HERE
-default['wix']['url']       = 'http://wixtoolset.org/releases/v3.6.2928.0/wix36-binaries.zip'
-default['wix']['checksum']  = 'c90319e4b6f4f1626f9e417f925497fe9b4af0ce221d3d8023f8276468e3044d'
BREAKS HERE
-set['couch_db']['src_checksum']      = "6ef82a7ba0f132d55af7cc78b30658d5b3a4f7be3f449308c8d7fa2ad473677c"
-set['couch_db']['src_version']       = "1.0.2"
-set['couch_db']['src_mirror']        = "http://archive.apache.org/dist/couchdb/#{node['couch_db']['src_version']}/apache-couchdb-#{node['couch_db']['src_version']}.tar.gz"
BREAKS HERE
-    'unknown'
BREAKS HERE
-action_class.eval do
BREAKS HERE
-      @@delivery_change ||= DeliverySugar::Change.new(node)
BREAKS HERE
-    url "http://repos.sensuapp.org/yum"
-  options "--force-yes"
BREAKS HERE
-        hank = create(:user)
-        sally = create(:admin)
-        expect(cookbook.owner).to eql(jimmy)
-          hank = create(:user)
-          sally = create(:admin)
-          expect(cookbook.owner).to eql(hank)
BREAKS HERE
-if !node[:sumologic][:credentials].nil?
-  creds = node[:sumologic][:credentials]
-  if !creds[:secret_file].nil?
-    secret = Chef::EncryptedDataBagItem.load_secret(creds[:secret_file])
-    edbag = Chef::EncryptedDataBagItem.load(creds[:bag_name], creds[:item_name], secret)
-    credentials[:accessID],credentials[:accessKey] = edbag[:accessID.to_s], edbag[:accessKey.to_s] # Chef::DataBagItem 10.28 doesn't work with symbols
-    credentials[:accessID],credentials[:accessKey] = bag[:accessID.to_s], bag[:accessKey.to_s] # Chef::DataBagItem 10.28 doesn't work with symbols
-  bag = data_bag_item(creds[:bag_name], creds[:item_name])
-  credentials[:accessID],credentials[:accessKey] = bag[:accessID.to_s], bag[:accessKey.to_s]
-if node['sumologic']['conf_template'].nil?
-        conf_source = 'sumo.conf.accessID.erb'
-else
-    conf_source = node['sumologic']['conf_template']
-end
-  source conf_source
BREAKS HERE
-default['ruby-ng']['ruby_version'] = node['ruby'].try(:[], 'version') || '2.5'
BREAKS HERE
-  vaildate_install
BREAKS HERE
-service "systemd-resolved" do
-  action [:disable, :stop]
-end
-
BREAKS HERE
-            "--size #{$1}" # rubocop:disable PerlBackrefs
BREAKS HERE
-depends          "openstack-common", ">=0.1.4"
BREAKS HERE
-  package 'logcheck'
BREAKS HERE
-# Boolean to enable debug_mode, which outputs massive amounts of log messages
-# to the /tmp/ directory.
-default['datadog']['debug'] = false
BREAKS HERE
-require 'berkshelf/core_ext'
-require 'berkshelf/errors'
-    # @return [Stirng]
-
-require 'dep_selector'
-require 'zlib'
-require 'archive/tar/minitar'
-
-require 'berkshelf/version'
-require 'berkshelf/dsl'
-require 'berkshelf/berksfile'
-require 'berkshelf/lockfile'
-require 'berkshelf/git'
BREAKS HERE
-
BREAKS HERE
-
-    new_resource.updated_by_last_action(false)
-
-    new_resource.updated_by_last_action(true)
-  stdout.include?(new_resource.name.downcase) or stdout.include?(new_resource.name.downcase)
BREAKS HERE
-attribute :listen, :kind_of => [String, NilClass]  # Listening port, ip, etc.
BREAKS HERE
-  case node[:platform]
-  when "centos","redhat","fedora"
-    package_name "net-snmp-utils"
-  when "debian","ubuntu"
-    package_name "snmp"
-  action :install
BREAKS HERE
-depends 'openstack-common', '>= 10.2.0'
BREAKS HERE
-        supports :restart => false
BREAKS HERE
-# Copyright:: Copyright (c) 2014-2018 Chef Software Inc.
-          expected_error = <<-E
-Invalid ruby syntax in policyfile 'TestPolicyfile.rb':
-
-TestPolicyfile.rb:1: syntax error, unexpected :: at EXPR_BEG, expecting tCONSTANT
-{{{{::::{{::
-        ^
-TestPolicyfile.rb:1: syntax error, unexpected end-of-input, expecting tCONSTANT
-{{{{::::{{::
-            ^
-E
-          expect(policyfile.errors.first).to eq(expected_error.chomp)
BREAKS HERE
-      @supported_versions ||= %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-          core? ? %w(netFx4-Server-Core) : %w(NetFx4)
-        when /^6\.2/ then %w(4.0 4.5)
-        when /^6\.3/ then %w(4.0 4.5 4.5.1)
-        when '10.0.10240' then %w(4.0 4.5 4.5.1 4.5.2 4.6)
-        when '10.0.10586' then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1)
-        when '10.0.14393' then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2)
-        when '10.0.15063' then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7)
-        when '10.0.16299' then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1)
-        when '10.0.17134' then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-          { '4.0' => %w(KB2468871) }
-          { '4.6' => %w(KB3083186), '4.7.1' => %w(KB4054852) }
-          { '4.6' => %w(KB3083184), '4.7.1' => %w(KB4054853) }
-          { '4.6' => %w(KB3083185), '4.7.1' => %w(KB4054854) }
-          { '4.7.1' => %w(KB4054855) }
-        when /^5\.0/, /^5\.1/ then %w(4.0)
-        when /^6\.0/ then %w(4.0 4.5 4.5.1 4.5.2 4.6)
-        when /^6\.1/ then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-        when /^6\.2/ then %w(4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-        when /^6\.3/ then %w(4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-        when '10.0.10240' then %w(4.6.1 4.6.2 4.7 4.7.1 4.7.2)
-        when '10.0.10586' then %w(4.6.2 4.7 4.7.1 4.7.2)
-        when '10.0.14393' then %w(4.7 4.7.1 4.7.2)
-        when '10.0.15063' then %w(4.7.1 4.7.2)
-        when '10.0.16299' then %w(4.7.2)
-          prerequisites46 = %w(KB2919442 KB2919355 KB3173424)
BREAKS HERE
-      lockfile.update(dependencies)
BREAKS HERE
-                                    'abuse' =>          'postmaster'
BREAKS HERE
-      def self.remove_suid_sgid_from_unkown(whitelist = [], root = '/', dry_run = false)
BREAKS HERE
-default[:ruby][:patch] = 'p392'
BREAKS HERE
-      edition = if debuntu?
-                  '~ce'
-                elsif amazon?
-                  'ce'
-                else
-                  '.ce'
-                end
-      test_versioning = v.to_f > 18.03 ? '3' : '1'
-
-      centos_extra = v.to_f > 18.03 ? '' : '.centos'
-
-      return "#{v}#{edition}-#{test_versioning}.el7#{centos_extra}" if el7?
-      return "#{v}#{edition}" if fedora?
-      return "#{v}#{edition}~#{test_versioning}-0~debian" if node['platform'] == 'debian' && v.to_f > 18.03
-      return "#{v}#{edition}~#{test_versioning}-0~ubuntu" if node['platform'] == 'ubuntu' && v.to_f > 18.03
-      return "#{v}#{edition}-0~debian" if node['platform'] == 'debian'
-      return "#{v}#{edition}-0~ubuntu" if node['platform'] == 'ubuntu'
-      v
BREAKS HERE
-default['chef-server']['configuration'] = ""
BREAKS HERE
-default['cookbook-openshift3']['adhoc_redeploy_certificates'] = false
-default['cookbook-openshift3']['adhoc_redeploy_etcd_ca'] = false
-default['cookbook-openshift3']['adhoc_redeploy_cluster_ca'] = false
-
-default['cookbook-openshift3']['redeploy_etcd_ca_control_flag'] = '/to_be_replaced_ca_etcd'
-default['cookbook-openshift3']['redeploy_etcd_certs_control_flag'] = '/to_be_replaced_certs'
-
-default['cookbook-openshift3']['redeploy_cluster_ca_certserver_control_flag'] = '/to_be_replaced_ca_cluster'
-default['cookbook-openshift3']['redeploy_cluster_ca_masters_control_flag'] = '/to_be_replaced_masters'
-default['cookbook-openshift3']['redeploy_cluster_ca_nodes_control_flag'] = '/to_be_replaced_nodes'
-
BREAKS HERE
-            Reporter::ChefServer.new(opts).send_report(report)
BREAKS HERE
-# 
-if %w{rhel fedora centos}.include?(node["platform"])
-  if node["platform"] == "centos" && node["platform_version"][0,1].to_i > 6
-    
-    execute "disable_selinux" do
-      command "setenforce 0"
-      user "root"
-    execute "mask_firewalld" do
-      command "systemctl mask firewalld"
-      user "root"
-    execute "enable_iptables" do
-      command "systemctl enable iptables"
-      user "root"
-    execute "enable_ip6tables" do
-      command "systemctl enable ip6tables"
-      user "root"
-    execute "stop_firewalld" do
-      command "systemctl stop firewalld"
-      user "root"
-    execute "start_iptables" do
-      command "systemctl start iptables"
-      user "root"
-    execute "stop_ip6tables" do
-      command "systemctl stop ip6tables"
-      user "root"
-    execute "enable_selinux" do
-      command "setenforce 1"
-      user "root"
-  template "/etc/sysconfig/network" do
-    source "etc_sysconfig_network.erb"
-    user "root"
-    group "root"
-    mode 0644
-  if node["stig"]["network"]["ipv6"] == "no"
-    ipv6OnOff = "off"
-    ipv6OnOff = "on"
-  template "/etc/modprobe.d/ipv6.conf" do
-    source "etc_modprobe.d_ipv6.conf.erb"
-    user "root"
-    group "root"
-    mode 0644
-    variables(:ipv6 => ipv6)
-    notifies :run, "execute[chkconfig_ip6tables_off]", :immediately
-  execute "chkconfig_ip6tables_off" do
-    user "root"
-
BREAKS HERE
-master_servers = node['cookbook-openshift3']['master_servers']
-node_servers = node['cookbook-openshift3']['node_servers']
-    source "http://#{master_servers.first['ipaddress']}:#{node['cookbook-openshift3']['httpd_xfer_port']}/generated-configs/#{node['fqdn']}.tgz"
BREAKS HERE
-  mode "755"
BREAKS HERE
-    product_name: 'chef',
-  windows? ? 'c:/opscode/chef' : '/opt/chef'
-  windows? ? 'c:/opscode/chef.upgrade' : '/opt/chef.upgrade'
BREAKS HERE
-      elsif file
BREAKS HERE
-      find('#cookbook_user_id').set(new_owner.id)
BREAKS HERE
-  directory install_dir do
-    recursive true
-
-  ark 'zookeeper' do
-    url         "#{mirror}/zookeeper-#{new_resource.version}/zookeeper-#{new_resource.version}.tar.gz"
-    version     new_resource.version
-    prefix_root install_dir
-    prefix_home install_dir
-    checksum    new_resource.checksum if property_is_set? :checksum
-  end
BREAKS HERE
-  options "--bindir /usr/local/bin"
BREAKS HERE
-depends 'selinux', '~> 0.7.2'
BREAKS HERE
-when "debian", "ubuntu"
BREAKS HERE
-when 'rhel'
-      force_os 'rhel' if node['platform'].eql?('oracle')
BREAKS HERE
-    property :log_driver, %w( json-file syslog journald gelf fluentd awslogs splunk none )
BREAKS HERE
-          if ext == '' || ext == '.pem'
-            if key_name == name
BREAKS HERE
-    node[:security][:kernel][:enable_sysrq] ? node[:security][:kernel][:secure_sysrq] || 0
BREAKS HERE
-default['kibana']['git']['reference'] = 'v' + node['kibana']['kibana5_version']
BREAKS HERE
-# issue with openjdk and ssl
BREAKS HERE
-    package 'init-system-helpers'
-
BREAKS HERE
-  not_if { node[:nominatim][:state] != "slave" and File.exist?("#{source_directory}/README.md") }
BREAKS HERE
-      # force when gluster is on rootfs
-      if system("df #{node['gluster']['server']['brick_mount_path']}/#{volume_name}/ --output=target |grep -q '^/$'")
-        Chef::Log.warn("Directory #{node['gluster']['server']['brick_mount_path']}/#{volume_name}/ on root filesystem, force creating volume #{volume_name}")
-        force = true
-      end
-      if force == true
-        options << ' force'
-        # Gluster still requires cli confirmation even if you use force for some odd reason.
-        execute "echo y | gluster volume create #{volume_name} #{options}" do
-          action :run
-          not_if options.empty?
-        end
-      else
-        execute "gluster volume create #{volume_name} #{options}" do
-          action :run
-          not_if options.empty?
-        end
BREAKS HERE
-      resource(:poise_test_inversion, step_into: false) do
-        provides(:poise_test_inversion)
-      provider(:poise_test_inversion) do
-        inversion_resource(:poise_test_inversion)
-      provider(:poise_test_inversion_other, parent: :poise_test_inversion) do
-          poise_test_inversion 'test'
-        let(:test_resource) { chef_run.poise_test_inversion('test') }
-        its(:enabled_handlers) { is_expected.to eq [provider(:poise_test_inversion), provider(:poise_test_inversion_other)] }
-        its(:resolve) { is_expected.to eq provider(:poise_test_inversion) }
-        resource(:poise_inversion_sub, parent: :poise_test_inversion, step_into: false) do
-        resource(:poise_inversion_subproviders, parent: :poise_test_inversion, step_into: false) do
-        its(:enabled_handlers) { is_expected.to eq [provider(:poise_test_inversion), provider(:poise_test_inversion_other)] }
-        its(:resolve) { is_expected.to eq provider(:poise_test_inversion) }
-          poise_test_inversion 'test' do
-        let(:test_resource) { chef_run.poise_test_inversion('test') }
-        its(:resolve) { is_expected.to eq provider(:poise_test_inversion_other) }
-        provider(:poise_test_inversion_subclass, parent: :poise_test_inversion) do
-          node.run_state['poise_inversion'][:poise_test_inversion] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion]['test'] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion]['test']['*'] ||= {}
-          node.run_state['poise_inversion'][:poise_test_inversion]['test']['*']['provider'] = :inverted_subclass
-          poise_test_inversion 'test'
-        let(:test_resource) { chef_run.poise_test_inversion('test') }
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
BREAKS HERE
-        # TODO: replace dnsimple_client.certificates.certificates with .all_certificates when it is added
-        # to the API client
-        certificates = dnsimple_client.certificates.certificates(dnsimple_client_account_id, @new_resource.domain)
BREAKS HERE
-rescue =>
-    Chef::Log.warn("Failed to populate Sensu state with Enterprise repository credentials from data bag: " + e.inspect)
BREAKS HERE
-    only_if {  }
BREAKS HERE
-if etcd_servers.find { |server_etcd| server_etcd['fqdn'] == node['fqdn'] }
-  if etcd_servers.first['fqdn'] == node['fqdn']
BREAKS HERE
-# frozen_string_literal: true
-
BREAKS HERE
-        command "kill `cat #{pid_file}`"
BREAKS HERE
-state_attrs :patch_id, :oracle_home_dir
BREAKS HERE
-  group  node['openstack']['orchestration']['group']
-  owner  node['openstack']['orchestration']['user']
-  group  node['openstack']['orchestration']['group']
-  owner  node['openstack']['orchestration']['user']
-  group  node['openstack']['orchestration']['group']
-  owner  node['openstack']['orchestration']['user']
-  mode   00640
-  group  node['openstack']['orchestration']['group']
-  owner  node['openstack']['orchestration']['user']
-  mode   00644
BREAKS HERE
-default['homebrew']['formula'] = []
BREAKS HERE
-              node[:td_agent][:version].to_f >= 2
BREAKS HERE
-      solo_node.set['defaults'] = { 'appserver' => node['defaults']['appserver'] }
-    it 'creates proper application.yml file' do
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/application.yml")
-        .with_content('ENV_VAR1: "test"')
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/application.yml")
-        .with_content('ENV_VAR2: "some data"')
-      expect(chef_run)
-        .to create_link("/srv/www/#{aws_opsworks_app['shortname']}/current/config/application.yml")
-    end
-
-    it 'creates proper dot_env file' do
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/dot_env")
-        .with_content('ENV_VAR1="test"')
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/dot_env")
-        .with_content('ENV_VAR2="some data"')
-      expect(chef_run)
-        .to create_link("/srv/www/#{aws_opsworks_app['shortname']}/current/.env")
-    end
-
-        .with_content('worker_processes 8')
BREAKS HERE
-  def load_sdk(context)
-    context.chef_gem 'ilo-sdk' do
BREAKS HERE
-  hosts += data_bag('ssh_known_hosts').collect do |entry|
BREAKS HERE
-%w(cassandra.yaml cassandra-env.sh log4j-server.properties.yml).each do |f|
BREAKS HERE
-    needsChange = (@new_resource.record_type != @current_resource.record_type) ||
-                  (@new_resource.ttl > 0 && @new_resource.ttl != @current_resource.ttl) ||
-                  (@new_resource.target.is_a?(String) && @new_resource.target != @current_resource.target) ||
-                  (@new_resource.target.is_a?(Array) && !(@new_resource.target - @current_resource.target).empty?)
-    if needsChange
-        updateDns
-      updateDns
-      executeCommand! 'recorddelete', "#{@current_resource.record_type} /f"
-  getAttributes
-def getAttributes
-def updateDns
-    executeCommand! 'recorddelete', "#{@current_resource.record_type} /f"
-      executeCommand! 'recorddelete', "A #{address} /f"
-      executeCommand! 'recordadd', "#{ttl} A #{address}"
-    executeCommand! 'recordadd', "#{ttl} CNAME #{@new_resource.target}"
-def executeCommand!(mode, options)
BREAKS HERE
-version          '10.3.0'
BREAKS HERE
-          clusters = Awsborn::ServerCluster.clusters.select {|cluster| cluster.name = args}
BREAKS HERE
-  action %i[enable start]
BREAKS HERE
-    not_if "mysql -u root -p#{get_config('mysql-root-password')} -e 'SELECT user from mysql.user where User=\"haproxy\"'"
BREAKS HERE
-          Berkshelf.ui.warn "Cannot write a shim for a path location source into a subdirectory of itself."
BREAKS HERE
-# Copyright 2016 Nordstrom, Inc.
-      options = { cookbook: 'chefdk_bootstrap' }
-      @cookbook = options[:cookbook] || 'chefdk_bootstrap'
-        cookbook '#{@cookbook}'
-      @cookbook = options[:cookbook]
BREAKS HERE
-      notifies :restart, "service[#{memcached_instance_name}]", :immediately
BREAKS HERE
-      @klass = Chef::Resource::User
BREAKS HERE
-  mode 0o700  
BREAKS HERE
-        blacklist
-          .select { |file| File.exist?(file) }
-          .each do|file|
BREAKS HERE
-# Override this if you have a yum repo with rabbitmq available. 
BREAKS HERE
-default[:drbd][:mount] = nil
-default[:drbd][:dev] = "/dev/drbd1"
-default[:drbd][:master] = true
-
-
BREAKS HERE
-master_servers = node['cookbook-openshift3']['master_servers']
BREAKS HERE
-default['postfix']['use_relay_restirictions_maps'] = false
BREAKS HERE
-        source = Berkshelf.ui.mute do
-          vendor(File.join(temp_dir, 'cookbooks'))
-        end
-        packager.run(source)
BREAKS HERE
-version          '2.0.0'
BREAKS HERE
-      File.open(solo_rb_path, "w+") { |f| f.write(config.as_solo_rb) }
-      File.open(node_json_path, "w+") { |f| f.write(config.as_json) }
-      exec("sudo bash -c '#{environment} #{chef_solo_command}'")
-    def chef_solo_command
-      "chef-solo -j #{node_json_path} -c #{solo_rb_path} -l #{log_level}"
-    def solo_rb_path
-      @solo_rb_path ||= Tempfile.new("solo.rb")
-    def node_json_path
-      @node_json_path ||= Tempfile.new("node.json")
BREAKS HERE
-    apt_prefrence 'clodera_repo' do
BREAKS HERE
-version          '2.6.0'
BREAKS HERE
-name 'sandbox_kube'
-
-depends 'apt'
-depends 'docker'
-depends 'etcd'
-depends 'flannel'
BREAKS HERE
-    config["Volumes"] ||= []
-    config["Volumes"] += volumes
BREAKS HERE
-      "#{search.join(' and ')}"
BREAKS HERE
-  :description => "The config file against which knife commands will be generated"
BREAKS HERE
-execute "change-admin-user-password-from-default" do
BREAKS HERE
-require 'chef-vault'
BREAKS HERE
-node.default['rabbitmq']['deb_package_url'].gsub! '{VERSION}', version
-node.default['rabbitmq']['rpm_package'].gsub! '{VERSION}', version
-node.default['rabbitmq']['rpm_package_url'].gsub! '{VERSION}', version
BREAKS HERE
-        if current_resource
-          call_action(:delete)
-          # never start containers resulting from a previous action :create #432
-          if state['Running'] == false &&
-             state['StartedAt'] == '0001-01-01T00:00:00Z'
-            call_action(:create)
-          else
-            call_action(:run)
-          end
-        else
-          call_action(:create)
-          call_action(:run)
-        end
BREAKS HERE
-default['tftp']['username'] = "tftp"
-default['tftp']['directory'] = "/var/lib/tftpboot"
-default['tftp']['address'] = "0.0.0.0:69"
-default['tftp']['tftp_options'] = "--secure"
-default['tftp']['options'] = "-s"
BREAKS HERE
-    'branch' => nil,
-    'disable_ssl_validation' => false,
-    'tenant_isolation' => true,
-    'tenant_reuse' => true,
-    'alt_ssh_user' => 'cirros',
-    'ssh_user' => 'cirros',
-    'user1' => {
-        'user_name' => 'tempest_user1',
-        'password' => 'tempest_user1_pass',
-        'tenant_name' => 'tempest_tenant1'
-    },
-    'user2' => {
-        'user_name' => 'tempest_user2',
-        'password' => 'tempest_user2_pass',
-        'tenant_name' => 'tempest_tenant2'
-    },
-    'image1' => {
-        'name' => 'cirros',
-        'id' => nil,
-        'flavor' => 1,
-        'source' => 'http://download.cirros-cloud.net/0.3.2/cirros-0.3.2-x86_64-disk.img'
-    },
-    'image2' => {
-        'name' => 'cirros',
-        'id' => nil,
-        'flavor' => 1,
-        'source' => 'http://download.cirros-cloud.net/0.3.2/cirros-0.3.2-x86_64-disk.img'
-    }
-    'tempest_packages' => %w{git python-virtualenv libxslt-devel
-                             libffi-devel},
-    'tempest_packages' => %w{git libxml2-dev libxslt-dev testrepository
-                             python-dev libffi-dev},
BREAKS HERE
-attribute :listen, :kind_of => [String, Array, NilClass], :default => nil  # Listening port, ip, etc.
BREAKS HERE
-version '0.9.0'
BREAKS HERE
-default['nodejs']['npm'] = '1.2.0'
BREAKS HERE
-#
-# Author:: Doug MacEachern (<dougm@vmware.com>)
-# Author:: Seth Chisamore (<schisamo@opscode.com>)
-# Author:: Paul Morotn (<pmorton@biaprotect.com>)
-# Cookbook Name:: windows
-# Provider:: registry
-#
-# Copyright:: 2010, VMware, Inc.
-# Copyright:: 2011, Opscode, Inc.
-# Copyright:: 2011, Business Intelligence Associates, Inc
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-
-if RUBY_PLATFORM =~ /mswin|mingw32|windows/
-  require 'win32/registry'
-  require 'ruby-wmi'
-end
-
-module Windows
-  module RegistryHelper
-
-    @@native_registry_constant = ENV['PROCESSOR_ARCHITEW6432'] == 'AMD64' ? 0x0100 : 0x0200
-
-    def get_hive_name(path)
-      Chef::Log.debug("Resolving registry shortcuts to full names")
-
-      reg_path = path.split("\\")
-      hive_name = reg_path.shift
-
-      hkey = {
-        "HKLM" => "HKEY_LOCAL_MACHINE",
-        "HKCU" => "HKEY_CURRENT_USER",
-        "HKU"  => "HKEY_USERS"
-      }[hive_name] || hive_name
-
-      Chef::Log.debug("Hive resolved to #{hkey}")
-      return hkey
-    end
-
-    def get_hive(path)
-
-      Chef::Log.debug("Getting hive for #{path}")
-      reg_path = path.split("\\")
-      hive_name = reg_path.shift
-
-      hkey = get_hive_name(path)
-
-      hive = {
-        "HKEY_LOCAL_MACHINE" => Win32::Registry::HKEY_LOCAL_MACHINE,
-        "HKEY_USERS" => Win32::Registry::HKEY_USERS,
-        "HKEY_CURRENT_USER" => Win32::Registry::HKEY_CURRENT_USER
-        }[hkey]
-
-      unless hive
-        Chef::Application.fatal!("Unsupported registry hive '#{hive_name}'")
-      end
-
-
-      Chef::Log.debug("Registry hive resolved to #{hkey}")
-      return hive
-    end
-
-    def unload_hive(path)
-      hive = get_hive(path)
-      if hive == Win32::Registry::HKEY_USERS
-        reg_path = path.split("\\")
-        priv = Chef::WindowsPrivileged.new
-        begin
-          priv.reg_unload_key(reg_path[1])
-        rescue
-        end
-      end
-    end
-
-    def set_value(mode,path,values,type=nil)
-      hive, reg_path, hive_name, root_key, hive_loaded = get_reg_path_info(path)
-      key_name = reg_path.join("\\")
-
-      Chef::Log.debug("Creating #{path})")
-
-      if !key_exists?(path,true)
-        create_key(path)
-      end
-
-      hive.send(mode, key_name, Win32::Registry::KEY_ALL_ACCESS | @@native_registry_constant) do |reg|
-        values.each do |k,val|
-          key = "#{k}" #wtf. avoid "can't modify frozen string" in win32/registry.rb
-          cur_val = nil
-          begin
-            cur_val = reg[key]
-          rescue
-            #subkey does not exist (ok)
-          end
-          if cur_val != val
-            Chef::Log.debug("setting #{key}=#{val}")
-            if type.nil?
-              reg[key] = val
-            else
-              reg[key, REG_BINARY] = val
-            end
-
-            ensure_hive_unloaded(hive_loaded)
-
-            return true
-          end
-        end
-      end
-      return false
-    end
-
-    def get_value(path,value)
-      hive, reg_path, hive_name, root_key, hive_loaded = get_reg_path_info(path)
-      key = reg_path.join("\\")
-
-      hive.open(key, Win32::Registry::KEY_ALL_ACCESS | @@native_registry_constant) do | reg |
-        begin
-          return reg[value]
-        rescue
-          return nil
-        ensure
-          ensure_hive_unloaded(hive_loaded)
-        end
-      end
-    end
-
-    def get_values(path)
-      hive, reg_path, hive_name, root_key, hive_loaded = get_reg_path_info(path)
-      key = reg_path.join("\\")
-      hive.open(key, Win32::Registry::KEY_ALL_ACCESS | @@native_registry_constant) do | reg |
-        values = []
-        begin
-        reg.each_value do |name, type, data|
-          values << [name, type, data]
-        end
-        rescue
-        ensure
-          ensure_hive_unloaded(hive_loaded)
-        end
-        values
-      end
-    end
-
-    def delete_value(path,values)
-      hive, reg_path, hive_name, root_key, hive_loaded = get_reg_path_info(path)
-      key = reg_path.join("\\")
-      Chef::Log.debug("Deleting values in #{path}")
-      hive.open(key, Win32::Registry::KEY_ALL_ACCESS | @@native_registry_constant) do | reg |
-        values.each_key { |key|
-          name = "#{key}"
-          Chef::Log.debug("Deleting value #{name} in #{path}")
-          reg.delete_value(name)
-        }
-      end
-
-    end
-
-    def create_key(path)
-      hive, reg_path, hive_name, root_key, hive_loaded = get_reg_path_info(path)
-      key = reg_path.join("\\")
-      Chef::Log.debug("Creating registry key #{path}")
-      hive.create(key)
-    end
-
-    def value_exists?(path,value)
-      if key_exists?(path,true)
-
-        hive, reg_path, hive_name, root_key , hive_loaded = get_reg_path_info(path)
-        key = reg_path.join("\\")
-
-        Chef::Log.debug("Attempting to open #{key}");
-        Chef::Log.debug("Native Constant #{@@native_registry_constant}")
-        Chef::Log.debug("Hive #{hive}")
-
-        hive.open(key, Win32::Registry::KEY_READ | @@native_registry_constant) do | reg |
-          begin 
-            rtn_value = reg[value]
-            return true
-          rescue
-            return false
-          ensure 
-            ensure_hive_unloaded(hive_loaded)
-          end
-        end
-
-      end
-      return false
-    end
-
-    # TODO: Does not load user registry...
-    def key_exists?(path, load_hive = false)
-      if load_hive
-        hive, reg_path, hive_name, root_key , hive_loaded = get_reg_path_info(path)
-        key = reg_path.join("\\")
-      else
-        hive = get_hive(path)
-        reg_path = path.split("\\")
-        hive_name = reg_path.shift
-        root_key = reg_path[0]
-        key = reg_path.join("\\")
-        hive_loaded = false
-      end
-
-      begin
-        hive.open(key, Win32::Registry::Constants::KEY_READ | @@native_registry_constant )
-        return true
-      rescue
-        return false
-      ensure 
-        ensure_hive_unloaded(hive_loaded)
-      end
-    end
-
-    def get_user_hive_location(sid)
-      reg_key = "HKLM\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\ProfileList\\#{sid}"
-      Chef::Log.debug("Looking for profile at #{reg_key}")
-      if key_exists?(reg_key)
-        return get_value(reg_key,'ProfileImagePath')
-      else
-        return nil
-      end
-
-    end
-
-    def resolve_user_to_sid(username)
-      begin 
-        sid = WMI::Win32_UserAccount.find(:first, :conditions => {:name => username}).sid
-        Chef::Log.debug("Resolved user SID to #{sid}")
-        return sid
-      rescue
-        return nil
-      end
-    end
-
-    def hive_loaded?(path)
-      hive = get_hive(path)
-      reg_path = path.split("\\")
-      hive_name = reg_path.shift
-      user_hive = path[0]
-
-      if is_user_hive?(hive)
-        return key_exists?("#{hive_name}\\#{user_hive}")
-      else
-        return true
-      end
-    end
-
-    def is_user_hive?(hive)
-      if hive == Win32::Registry::HKEY_USERS
-        return true
-      else
-        return true
-      end
-    end
-
-    def get_reg_path_info(path)
-      hive = get_hive(path)
-      reg_path = path.split("\\")
-      hive_name = reg_path.shift
-      root_key = reg_path[0]
-      hive_loaded = false
-
-      if is_user_hive?(hive) && !key_exists?("#{hive_name}\\#{root_key}")
-        reg_path, hive_loaded = load_user_hive(hive,reg_path,root_key)
-        root_key = reg_path[0]
-        Chef::Log.debug("Resolved user (#{path}) to (#{reg_path.join('/')})")
-      end
-
-      return hive, reg_path, hive_name, root_key, hive_loaded
-    end
-
-    def load_user_hive(hive,reg_path,user_hive)
-      Chef::Log.debug("Reg Path #{reg_path}")
-      # See if the hive is loaded. Logged in users will have a key that is named their SID
-      # if the user has specified the a path by SID and the user is logged in, this function 
-      # should not be executed.
-      if is_user_hive?(hive) && !key_exists?("HKU\\#{user_hive}")
-        Chef::Log.debug("The user is not logged in and has not been specified by SID")
-        sid = resolve_user_to_sid(user_hive)
-        Chef::Log.debug("User SID resolved to (#{sid})")
-        # Now that the user has been resolved to a SID, check and see if the hive exists.
-        # If this exists by SID, the user is logged in and we should use that key.
-        # TODO: Replace the username with the sid and send it back because the username
-        # does not exist as the key location.
-        load_reg = false
-        if key_exists?("HKU\\#{sid}")
-          reg_path[0] = sid #use the active profile (user is logged on)
-          Chef::Log.debug("HKEY_USERS Mapped: #{user_hive} -> #{sid}")
-        else
-          Chef::Log.debug("User is not logged in")
-          load_reg = true
-        end
-
-        # The user is not logged in, so we should load the registry from disk
-        if load_reg
-          profile_path = get_user_hive_location(sid)
-          if profile_path != nil
-            ntuser_dat = "#{profile_path}\\NTUSER.DAT"
-            if ::File.exists?(ntuser_dat)
-              priv = Chef::WindowsPrivileged.new
-              if priv.reg_load_key(sid,ntuser_dat)
-                Chef::Log.debug("RegLoadKey(#{sid}, #{user_hive}, #{ntuser_dat})")
-                reg_path[0] = sid
-              else
-                Chef::Log.debug("Failed RegLoadKey(#{sid}, #{user_hive}, #{ntuser_dat})")
-              end
-            end
-          end
-        end
-      end
-
-      return reg_path, load_reg
-
-    end
-
-    private
-    def ensure_hive_unloaded(hive_loaded=false)
-      if(hive_loaded)
-        Chef::Log.debug("Hive was loaded, we really should unload it")
-        unload_hive(path)
-      end
-    end
-  end
-end
-
-module Registry
-  module_function
-  extend Windows::RegistryHelper
-end
BREAKS HERE
-      wait_ready
-            docker_daemon_arg: docker_daemon_arg
-          not_if { docker_name == 'docker' && ::File.exist?('/etc/init.d/docker') }
-
-      def wait_ready
-        bash "docker-wait-ready #{name}" do
-          code <<-EOF
-            timeout=0
-            while [ $timeout -lt 20 ];  do
-              #{docker_cmd} ps | head -n 1 | grep ^CONTAINER
-              if [ $? -eq 0 ]; then
-                break
-              fi
-              ((timeout++))
-              sleep 1
-            done
-            [[ $timeout -eq 20 ]] && exit 1
-            exit 0
-            EOF
-          not_if "#{docker_cmd} ps | head -n 1 | grep ^CONTAINER"
-        end
-      end
BREAKS HERE
-      return '5.5.49-0ubuntu0.12.04.1' if major_version == '5.5' && precise?
-      return '5.5.49-0ubuntu0.14.04.1' if major_version == '5.5' && trusty?
-      return '5.6.30-0ubuntu0.14.04.1' if major_version == '5.6' && trusty?
-      return '5.7.12-0ubuntu1.1' if major_version == '5.7' && xenial?
BREAKS HERE
-%w( vim git libxml2-dev libxslt1-dev zlib1g-dev liblzma-dev build-essential ).each do |pkg|
BREAKS HERE
-          timeout ? container.wait(timeout) : container.wait unless detach # rubocop: disable Style/IfUnlessModifierOfIfUnless
BREAKS HERE
-default['openssh']['rootgroup']    = case node['platform_family']
-                                     when 'freebsd'
-                                       'wheel'
-                                     else
-                                       'root'
BREAKS HERE
-# If set, the keystone service will bind to the address on this interface,
-# otherwise it will bind to the API endpoint's host.
-default['openstack']['identity']['bind_interface'] = nil
-
BREAKS HERE
-    powershell_out!("Remove-SmbShare -Name \"#{new_resource.share_name}\" -Description \"#{new_resource.description}\" -Confirm")
-    powershell_out!("Set-SmbShare -Name '#{new_resource.share_name}' -Description '#{new_resource.description}' -Confirm")
-    powershell_out!("New-SmbShare -Name \"#{new_resource.share_name}\" -Path \"#{new_resource.path}\" -Confirm")
BREAKS HERE
-  subscribes :restart, resources('java_ark[jdk]')
BREAKS HERE
-    # Create a new warning
-    # @param [FoodCritic::Rule] rule The rule which raised this warning
-    # @param [Hash] match The match data
-    # @option match [String] :filename The filename the warning was raised
-    #   against
-    # @option match [Integer] :line The identified line
-    # @option match [Integer] :column The identified column
-    # Create a new review
-    #
-    # @param [Array] cookbook_paths The path this review was performed against
-    # @param [Array] warnings The warnings raised in this review
-    # @param [Boolean] is_failed Have warnings been raised that mean this
-    #   should be considered failed?
-    # Provided for backwards compatibility
-    # @deprecated Multiple cookbook paths may be provided.
-    #
-    # @return [Boolean] True if this review has failed.
-    # Returns a string representation of this review.
-    #
-    # @return [String] Review as a string, this representation is liable to
-    #   change.
-    attr_accessor :code, :name, :applies_to, :cookbook, :recipe, :provider, :resource
-    # Create a new rule
-    #
-    # @param [String] code The short unique identifier for this rule,
-    #   e.g. 'FC001'
-    # @param [String] name The short descriptive name of this rule presented to
-    #   the end user.
-    # The tags associated with this rule.
-    # A rule is always tagged with the tags 'any' and the rule code.
-    #
-    # @return [Array] The tags associated.
-    #
-    # @return [String] Rule as a string.
BREAKS HERE
-cookbook_file '/etc/cron.daily/logrotate' do
-  source 'logrotate_rpm_cron_override'
BREAKS HERE
-if node['flume'].key? 'flume_conf'
-  my_vars = { :options => node['flume']['flume_conf'] }
-  template "#{flume_conf_dir}/flume.conf" do
-    source 'generic.properties.erb'
-    mode '0644'
-    owner 'root'
-    group 'root'
-    action :create
-    variables my_vars
-  end
BREAKS HERE
-      # we didn't find something in cache so look it up and cache it for later
-      cook_val = Pathname.new(File.join(File.dirname(file),
-                                        case File.basename(file)
-                                        when "metadata.rb" then ""
-                                        when /\.erb$/ then "../.."
-                                        else ".."
-                                        end)).cleanpath
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
BREAKS HERE
-      dependencies = Berkshelf.ui.mute { berksfile.resolve(berksfile.dependencies)[:solution] }.sort
BREAKS HERE
-  service "memcached_#{instance_name}" do
BREAKS HERE
-# force resource actions in compile phase so exception handler 
-chef_handler "Chef::Handler::JsonFile" do
-  source "chef/handler/json_file"
BREAKS HERE
-  not_if {File.exists?("/usr/local/src/node-v#{node[:nodejs][:version]}/node")}
BREAKS HERE
-include_recipe 'chef_handler'
-
-# install inspec
-inspec 'inspec' do
-# run chef handler
-handler_directory = ::File.join(Chef::Config[:file_cache_path], 'handler')
-directory handler_directory do
-  action :create
-end
-
-cookbook_file ::File.join(handler_directory, 'audit_report.rb') do
-  source 'audit_report.rb'
-end
-
-chef_handler 'Chef::Handler::AuditReport' do
-  source "#{handler_directory}/audit_report.rb"
-  action :enable
-end
BREAKS HERE
-# Chef::Recipe::Jira class
-class Chef::Recipe::Jira
-  def self.settings(node)
-    begin
-      if Chef::Config[:solo]
-          settings = Chef::DataBagItem.load('jira', 'jira')['local']
-        rescue
-          Chef::Log.info('No jira data bag found')
-        end
-      else
-        begin
-          settings = Chef::EncryptedDataBagItem.load('jira', 'jira')[node.chef_environment]
-        rescue
-          Chef::Log.info('No jira encrypted data bag found')
-      end
-    ensure
-      settings ||= node['jira']
-      case settings['database']['type']
-      when 'mysql'
-        settings['database']['port'] ||= 3306
-      when 'postgresql'
-        settings['database']['port'] ||= 5432
-      else
-        Chef::Log.warn('Unsupported database type.')
-
-    settings
BREAKS HERE
-  # Manage Crypt checkin script and folder
-  # Define and install custom facts
BREAKS HERE
-          expect(chef_run).to render_file(file.name).with_content(%r(^filesystem_store_metadata_file = /etc/glance/images.json$))
-            expect(chef_run).to render_file(file.name).with_content(%r(^log_config = /etc/openstack/logging.conf$))
-            expect(chef_run).to render_file(file.name).with_content(%r(^log_file = /var/log/glance/api.log$))
-
-              expect(chef_run).to render_file(file.name).with_content(%r(^swift_store_auth_address = http://127.0.0.1:5000/v2.0$))
-            expect(chef_run).to render_file(file.name).with_content(%r(^log_config = /etc/openstack/logging.conf$))
-            expect(chef_run).to render_file(file.name).with_content(%r(^log_file = /var/log/glance/image-cache.log$))
BREAKS HERE
-        ot = template ::File.join(node['icinga2']['objects_dir'], "#{resource_name}_#{new_resource.environment}.conf") do
-          notifies :reload, 'service[icinga2]', :delayed
BREAKS HERE
-default['rabbitmq']['rpm_package'] = "rabbitmq-server-#{node['rabbitmq']['version']}-1.noarch.rpm"
BREAKS HERE
-chef_version     '~>12.19'
BREAKS HERE
-            possibles << file.expand_path if file.basename == '.chef' && file.directory?
BREAKS HERE
-  target_config = ingredient_config_file(product_name)
-    content get_config(product_name)
-  add_config(product_name, config)
BREAKS HERE
-    it "upgrades stevedore" do
-      expect(@chef_run).to upgrade_python_pip "stevedore"
-    end
-
-    it "does not upgrade stevedore" do
-      opts = ::UBUNTU_OPTS.merge(:version => "10.04")
-      chef_run = ::ChefSpec::ChefRunner.new opts
-      chef_run.converge "openstack-block-storage::scheduler"
-
-      expect(chef_run).not_to upgrade_python_pip "stevedore"
-    end
-
BREAKS HERE
-use_inline_resources if defined?(use_inline_resources)
-
-  service 'td-agent' do
-    action [ :nothing ]
-  end
-
-  service 'td-agent' do
-    action [ :nothing ]
-  end
-
BREAKS HERE
-  creates "#{node['nrpe']['plugin_dir']}/check_nrpe" # perhaps we could replace this with a version check to allow upgrades
BREAKS HERE
-      # * current resource (in case of existing resouruce update)
BREAKS HERE
-# TODO: FIX MONKEY PATCHING
-class Chef
-  class Cookbook
-    class CookbookVersionLoader
-
-      # CookbookVersionLoader is hardcoded to use the directory path as the
-      # name, but we have oddly named directories. This problem could also be
-      # solved by making chef require that metadata specify the cookbook name
-      # (which should be happening eventually).
-      attr_accessor :cookbook_name
-
-    end
-  end
-end
-
-            cbvl.cookbook_name = cookbook_name
BREAKS HERE
-        service_name: 'pushy-client' }
-        service_name: 'push-jobs-client' }
-        service_name: 'push-jobs-client' }
-      fail "No info for version #{version}"
-    if url =~ /\-(\d+\.\d+\.\d+)\-/
BREAKS HERE
-# Licensed under the Apache License, Version 2.0 (the "License");
-# distributed under the License is distributed on an "AS IS" BASIS,
-include_recipe "push-jobs::#{node['platform_family']}"
BREAKS HERE
-        puts "cached_name: #{cached_name}"
-        puts "path: #{path}"
BREAKS HERE
-  action_class do # rubocop:disable Metrics/BlockLength
BREAKS HERE
-module Berkshelf
-  describe CachedCookbook do
-    describe "ClassMethods" do
-      subject { CachedCookbook }
-
-      describe "#from_path" do
-        context "given a path that contains a cookbook with a metadata file that contains a name attribute" do
-          let(:cookbook_path) { fixtures_path.join("cookbooks", "example_metadata_name") }
-
-          it "returns an instance of CachedCookbook" do
-            subject.from_path(cookbook_path).should be_a(CachedCookbook)
-          end
-
-          it "has a cookbook_name attribute set to what is found in the metadata" do
-            subject.from_path(cookbook_path).cookbook_name.should eql("has_metadata")
-          end
-        end
-
-        context "given a path that contains a cookbook with a metadata file that does not contain a name attribute" do
-          let(:cookbook_path) { fixtures_path.join("cookbooks", "example_metadata_no_name") }
-
-          it "returns an instnace of CachedCookbook" do
-            subject.from_path(cookbook_path).should be_a(CachedCookbook)
-          end
-
-          it "has a cookbook_name attribute set to the basename of the folder" do
-            subject.from_path(cookbook_path).cookbook_name.should eql("example_metadata_no_name")
-          end
-
-          it "sets value of metadata.name to the cookbook_name" do
-            subject.from_path(cookbook_path).metadata.name.should eql("example_metadata_no_name")
-          end
-        end
-
-        context "given a path that does not contain a metadata file" do
-          let(:cookbook_path) { fixtures_path.join("cookbooks", "example_no_metadata") }
-
-          it "raises a CookbookNotFound error" do
-            lambda {
-              subject.from_path(cookbook_path)
-            }.should raise_error(Berkshelf::CookbookNotFound)
-          end
-        end
-      end
-
-      describe "#from_store_path" do
-        before(:each) do
-          @cached_cb = subject.from_store_path(fixtures_path.join("cookbooks", "example_cookbook-0.5.0"))
-        end
-
-        it "returns an instance of CachedCookbook" do
-          @cached_cb.should be_a(CachedCookbook)
-        end
-
-        it "sets a version number" do
-          @cached_cb.version.should eql("0.5.0")
-        end
-
-        it "sets the metadata.name value to the cookbook_name" do
-          @cached_cb.metadata.name.should eql("example_cookbook")
-        end
-
-        context "given a path that does not contain a cookbook" do
-          it "returns nil" do
-            subject.from_store_path(tmp_path).should be_nil
-          end
-        end
-
-        context "given a path that does not match the CachedCookbook dirname format" do
-          it "returns nil" do
-            subject.from_store_path(fixtures_path.join("cookbooks", "example_cookbook")).should be_nil
-          end
-        end
-      end
-
-      describe "#checksum" do
-        it "returns a checksum of the given filepath" do
-          subject.checksum(fixtures_path.join("cookbooks", "example_cookbook-0.5.0", "README.md")).should eql("6e21094b7a920e374e7261f50e9c4eef")
-        end
-
-        context "given path does not exist" do
-          it "raises an Errno::ENOENT error" do
-            lambda {
-              subject.checksum(fixtures_path.join("notexisting.file"))
-            }.should raise_error(Errno::ENOENT)
-          end
-        end
-      end
-    end
-
-    let(:cb_path) { fixtures_path.join("cookbooks", "nginx-0.100.5") }
-    subject { CachedCookbook.from_store_path(cb_path) }
-
-    describe "#checksums" do
-      it "returns a Hash containing an entry for all matching cookbook files on disk" do
-        subject.checksums.should have(11).items
-      end
-
-      it "has a checksum for each key" do
-        subject.checksums.should have_key("fb1f925dcd5fc4ebf682c4442a21c619")
-      end
-
-      it "has a filepath for each value" do
-        subject.checksums.should have_value(cb_path.join("recipes/default.rb").to_s)
-      end
-    end
-
-    describe "#manifest" do
-      it "returns a Mash with a key for each cookbook file category" do
-        [
-          :recipes,
-          :definitions,
-          :libraries,
-          :attributes,
-          :files,
-          :templates,
-          :resources,
-          :providers,
-          :root_files
-        ].each do |category|
-          subject.manifest.should have_key(category)
-        end
-      end
-    end
-
-    describe "#validate!" do
-      let(:syntax_checker) { double('syntax_checker') }
-        subject.stub(:syntax_checker) { syntax_checker }
-      it "asks the syntax_checker to validate the ruby and template files of the cookbook" do
-        syntax_checker.should_receive(:validate_ruby_files).and_return(true)
-        syntax_checker.should_receive(:validate_templates).and_return(true)
-
-        subject.validate!
-      it "raises CookbookSyntaxError if the cookbook contains invalid ruby files" do
-        syntax_checker.should_receive(:validate_ruby_files).and_return(false)
-
-        lambda {
-          subject.validate!
-        }.should raise_error(CookbookSyntaxError)
-      end
-
-      it "raises CookbookSyntaxError if the cookbook contains invalid template files" do
-        syntax_checker.should_receive(:validate_ruby_files).and_return(true)
-        syntax_checker.should_receive(:validate_templates).and_return(false)
-
-        lambda {
-          subject.validate!
-        }.should raise_error(CookbookSyntaxError)
-      end
-    end
-
-    describe "#file_metadata" do
-      let(:file) { subject.path.join("files", "default", "mime.types") }
-
-      before(:each) { @metadata = subject.file_metadata(:file, file) }
-
-      it "has a 'path' key whose value is a relative path from the CachedCookbook's path" do
-        @metadata.should have_key(:path)
-        @metadata[:path].should be_relative_path
-        @metadata[:path].should eql("files/default/mime.types")
-      it "has a 'name' key whose value is the basename of the target file" do
-        @metadata.should have_key(:name)
-        @metadata[:name].should eql("mime.types")
-      it "has a 'checksum' key whose value is the checksum of the target file" do
-        @metadata.should have_key(:checksum)
-        @metadata[:checksum].should eql("06e7eca1d6cb608e2e74fd1f8e059f34")
-      end
-
-      it "has a 'specificity' key" do
-        @metadata.should have_key(:specificity)
-      end
-
-      context "given a 'template' or 'file' berksfile type" do
-        let(:file) { subject.path.join("files", "ubuntu", "mime.types") }
-        before(:each) { @metadata = subject.file_metadata(:files, file) }
-
-        it "has a 'specificity' key whose value represents the specificity found in filepath" do
-          @metadata[:specificity].should eql("ubuntu")
-      context "given any berksfile type that is not a 'template' or 'file'" do
-        let(:file) { subject.path.join("README.md") }
-        before(:each) { @metadata = subject.file_metadata(:root, file) }
-
-        it "has a 'specificity' key whose value is 'default'" do
-          @metadata[:specificity].should eql("default")
-    describe "#to_hash" do
-      before(:each) do
-        @hash = subject.to_hash
-      end
-
-      let(:cookbook_name) { subject.cookbook_name }
-      let(:cookbook_version) { subject.version }
-
-      it "has a 'recipes' key with a value of an Array Hashes" do
-        @hash.should have_key('recipes')
-        @hash['recipes'].should be_a(Array)
-        @hash['recipes'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'recipes' Array of Hashes" do
-        @hash['recipes'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'recipes' Array of Hashes" do
-        @hash['recipes'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'recipes' Array of Hashes" do
-        @hash['recipes'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'recipes' Array of Hashes" do
-        @hash['recipes'].first.should have_key('specificity')
-      end
-
-      it "has a 'definitions' key with a value of an Array Hashes" do
-        @hash.should have_key('definitions')
-        @hash['definitions'].should be_a(Array)
-        @hash['definitions'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'definitions' Array of Hashes" do
-        @hash['definitions'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'definitions' Array of Hashes" do
-        @hash['definitions'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'definitions' Array of Hashes" do
-        @hash['definitions'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'definitions' Array of Hashes" do
-        @hash['definitions'].first.should have_key('specificity')
-      end
-
-      it "has a 'libraries' key with a value of an Array Hashes" do
-        @hash.should have_key('libraries')
-        @hash['libraries'].should be_a(Array)
-        @hash['libraries'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'libraries' Array of Hashes" do
-        @hash['libraries'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'libraries' Array of Hashes" do
-        @hash['libraries'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'libraries' Array of Hashes" do
-        @hash['libraries'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'libraries' Array of Hashes" do
-        @hash['libraries'].first.should have_key('specificity')
-      end
-
-      it "has a 'attributes' key with a value of an Array Hashes" do
-        @hash.should have_key('attributes')
-        @hash['attributes'].should be_a(Array)
-        @hash['attributes'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'attributes' Array of Hashes" do
-        @hash['attributes'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'attributes' Array of Hashes" do
-        @hash['attributes'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'attributes' Array of Hashes" do
-        @hash['attributes'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'attributes' Array of Hashes" do
-        @hash['attributes'].first.should have_key('specificity')
-      end
-
-      it "has a 'files' key with a value of an Array Hashes" do
-        @hash.should have_key('files')
-        @hash['files'].should be_a(Array)
-        @hash['files'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'files' Array of Hashes" do
-        @hash['files'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'files' Array of Hashes" do
-        @hash['files'].first.should have_key('path')
-      it "has a 'checksum' key value pair in a Hash of the 'files' Array of Hashes" do
-        @hash['files'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'files' Array of Hashes" do
-        @hash['files'].first.should have_key('specificity')
-      end
-
-      it "has a 'templates' key with a value of an Array Hashes" do
-        @hash.should have_key('templates')
-        @hash['templates'].should be_a(Array)
-        @hash['templates'].each do |item|
-          item.should be_a(Hash)
-
-      it "has a 'name' key value pair in a Hash of the 'templates' Array of Hashes" do
-        @hash['templates'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'templates' Array of Hashes" do
-        @hash['templates'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'templates' Array of Hashes" do
-        @hash['templates'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'templates' Array of Hashes" do
-        @hash['templates'].first.should have_key('specificity')
-      end
-
-      it "has a 'resources' key with a value of an Array Hashes" do
-        @hash.should have_key('resources')
-        @hash['resources'].should be_a(Array)
-        @hash['resources'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'resources' Array of Hashes" do
-        @hash['resources'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'resources' Array of Hashes" do
-        @hash['resources'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'resources' Array of Hashes" do
-        @hash['resources'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'resources' Array of Hashes" do
-        @hash['resources'].first.should have_key('specificity')
-      end
-
-      it "has a 'providers' key with a value of an Array Hashes" do
-        @hash.should have_key('providers')
-        @hash['providers'].should be_a(Array)
-        @hash['providers'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'providers' Array of Hashes" do
-        @hash['providers'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'providers' Array of Hashes" do
-        @hash['providers'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'providers' Array of Hashes" do
-        @hash['providers'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'providers' Array of Hashes" do
-        @hash['providers'].first.should have_key('specificity')
-      end
-
-      it "has a 'root_files' key with a value of an Array Hashes" do
-        @hash.should have_key('root_files')
-        @hash['root_files'].should be_a(Array)
-        @hash['root_files'].each do |item|
-          item.should be_a(Hash)
-        end
-      end
-
-      it "has a 'name' key value pair in a Hash of the 'root_files' Array of Hashes" do
-        @hash['root_files'].first.should have_key('name')
-      end
-
-      it "has a 'path' key value pair in a Hash of the 'root_files' Array of Hashes" do
-        @hash['root_files'].first.should have_key('path')
-      end
-
-      it "has a 'checksum' key value pair in a Hash of the 'root_files' Array of Hashes" do
-        @hash['root_files'].first.should have_key('checksum')
-      end
-
-      it "has a 'specificity' key value pair in a Hash of the 'root_files' Array of Hashes" do
-        @hash['root_files'].first.should have_key('specificity')
-      end
-
-      it "has a 'cookbook_name' key with a String value" do
-        @hash.should have_key('cookbook_name')
-        @hash['cookbook_name'].should be_a(String)
-      end
-
-      it "has a 'metadata' key with a Cookbook::Metadata value" do
-        @hash.should have_key('metadata')
-        @hash['metadata'].should be_a(Berkshelf::Chef::Cookbook::Metadata)
-      end
-
-      it "has a 'version' key with a String value" do
-        @hash.should have_key('version')
-        @hash['version'].should be_a(String)
-      end
-
-      it "has a 'name' key with a String value" do
-        @hash.should have_key('name')
-        @hash['name'].should be_a(String)
-      end
-
-      it "has a value containing the cookbook name and version separated by a dash for 'name'" do
-        name, version = @hash['name'].split('-')
-
-        name.should eql(cookbook_name)
-        version.should eql(cookbook_version)
-      end
-
-      it "has a 'chef_type' key with 'cookbook_version' as the value" do
-        @hash.should have_key('chef_type')
-        @hash['chef_type'].should eql("cookbook_version")
-      end
-    describe "#to_json" do
-      before(:each) do
-        @json = subject.to_json
-      end
-      it "has a 'json_class' key with 'Chef::CookbookVersion' as the value" do
-        @json.should have_json_path('json_class')
-        parse_json(@json)['json_class'].should eql("Chef::CookbookVersion")
-      end
-    describe "#dependencies" do
-      let(:dependencies) { { "mysql" => "= 1.2.0", "ntp" => ">= 0.0.0" } }
-      let(:recommendations) { { "database" => ">= 0.0.0" } }
-      let(:cb_path) do
-        generate_cookbook(Berkshelf.cookbook_store.storage_path, "sparkle", "0.1.0", dependencies: dependencies, recommendations: recommendations)
-      end
-
-      subject { CachedCookbook.from_store_path(cb_path) }
-
-      it "contains depends from the cookbook metadata" do
-        subject.dependencies.should include(dependencies)
-      end
-      it "contains recommendations from the cookbook metadata" do
-        subject.dependencies.should include(recommendations)
-      end
BREAKS HERE
-      subject.should_receive(:add_dependency).with(name, constraint, default_options)
-      subject.should_receive(:add_dependency)do |arg_name, arg_constraint, arg_options|
-      subject.should_receive(:add_dependency).with(name, constraint, group: [:production])
-        subject.should_receive(:add_dependency).with(name, nil, default_options)
-        subject.should_receive(:add_dependency).with(name, constraint, default_options)
-      subject.should_receive(:add_dependency).with(name, nil, group: [group])
-      subject.should_receive(:add_dependency).with('example_cookbook', nil, path: path.to_s, metadata: true)
-      expect(subject.dependencies).to have(2).items
-      subject.stub(:retrive_locked)
-      subject.stub(:dependencies) { [dependency_one, dependency_two] }
-      dependency_one.stub(:groups) { [:nautilus, :skarner] }
-      dependency_two.stub(:groups) { [:nautilus, :riven] }
-      expect(subject.groups.keys).to have(3).items
-      expect(subject.groups[:nautilus]).to have(2).items
-      expect(subject.groups[:riven]).to have(1).item
-      expect(subject.dependencies).to have(1).dependency
-      subject.stub(:lockfile).and_return(lockfile)
-      subject.stub(:validate_lockfile_present!)
-      subject.stub(:validate_lockfile_trusted!)
-      subject.stub(:validate_dependencies_installed!)
-      Berkshelf::Uploader.stub(:new).and_return(uploader)
BREAKS HERE
-  not_if { Systemd::Helpers::Timezone.timezone?(tz) }
BREAKS HERE
-      slave_jar_remote_url = slave_jar_url
-      @slave_jar_resource ||= build_resource(:remote_file, slave_jar) do
-        source(slave_jar_remote_url)
-        backup(false)
-        mode('0755')
-        atomic_update(false)
-      end
-          build_resource(:runit_service, new_resource.service_name) do
-            cookbook('jenkins')
-            run_template_name('jenkins-slave')
-            log_template_name('jenkins-slave')
-            options(
BREAKS HERE
-  DIRECTIVES = [%w(compress copy copytruncate daily dateext
-                   dateyesterday delaycompress hourly ifempty mailfirst maillast
-                   missingok monthly nocompress nocopy nocopytruncate nocreate nocreateolddir
-                   nodelaycompress nodateext nomail nomissingok noolddir
-                   nosharedscripts noshred notifempty renamecopy sharedscripts shred weekly
-                   yearly)].freeze unless const_defined?(:DIRECTIVES)
-  VALUES = [%w(compresscmd uncompresscmd compressext compressoptions
-               create createolddir dateformat include mail extension maxage minsize maxsize
-               rotate size shredcycles start tabooext su olddir)].freeze unless const_defined?(:VALUES)
-  SCRIPTS = [%w(firstaction prerotate postrotate lastaction preremove)].freeze unless const_defined?(:SCRIPTS)
BREAKS HERE
-describe PostfixAdmin::Conf, order: :random do
-      expect(PostfixAdmin::PHP).to receive(:ruby_value_to_php).with(value).once
BREAKS HERE
-      Solve::Solver.satisfy_best(constraint, versions(name)).to_s
-    rescue Solve::Errors::NoSolutionError
BREAKS HERE
-    if not Chef::Config[:chef_server_url]
-      ::File.write(::File.join(::File.dirname(src_filepath), 'openresty.configure-opts'), configure_flags.sort.uniq.join("\n"))
-        (::File.read(::File.join(::File.dirname(src_filepath), 'openresty.configure-opts')) || '' rescue '') ==
BREAKS HERE
-      options         = options.reverse_merge(retries: 5, retry_interval: 0.5)
BREAKS HERE
-  @host = service_info['host'] || info['host']
-  @super_password = get_password 'user', user_key
BREAKS HERE
-        @current_resource.version(current_plugin[:version])
-        executor.execute!('install-plugin', plugin_source, '-name', new_resource.name)
-      Chef::Log.debug "Load #{new_resource} plugin information"
-      response = executor.execute!('list-plugins', new_resource.name)
-      return nil if response.nil? || response.empty?
-      @current_plugin = {
-        version: response.split(' ').last
-      }
BREAKS HERE
-Then /^the temp directory should not exist$/ do
-  File.exists?(KCD::TMP_DIRECTORY).should be_false
-end
-
BREAKS HERE
-    def_delegators :@run_context, :resource_collection, :immediate_notifications, :delayed_notifications
-        Chef::Runner.new(self).converge
BREAKS HERE
-        Ridley.should_receive(:new).with(ridley_options)
-        Ridley.should_receive(:new).with(ridley_options)
-      subject.stub(:ridley_connection).and_return(ridley)
-
-    context 'when Ridley throw an exception' do
-      before { ridley.stub_chain(:environment, :find).and_raise(Ridley::Errors::RidleyError) }
-
-      it 'raises a ChefConnectionError' do
-        expect {
-          subject.apply(env_name)
-        }.to raise_error(Berkshelf::ChefConnectionError)
-      end
-    end
BREAKS HERE
-      Solve.it!(graph, demand_array).collect do |name, version|
BREAKS HERE
-      template key_file do
BREAKS HERE
-# Copyright 2012, Simple
BREAKS HERE
-  let(:chef_run) do
-    ChefSpec::SoloRunner.new do |node|
-      node.set['threatstack']['deploy_key'] = "ABCD1234"
-    end.converge(described_recipe)
-  it 'includes the threatstack::repo recipe' do
-    expect(chef_run).to include_recipe('threatstack::repo')
-  it 'installs the threatstack-agent package' do
-    expect(chef_run).to install_package('threatstack-agent')
-  it 'executes the cloudsight setup' do
-    expect(chef_run).to run_execute('cloudsight setup').with(
-      command: "cloudsight setup --deploy-key=ABCD1234 --ruleset='Base Rule Set'"
-    )
BREAKS HERE
-      @klass.from_file(path) if File.exist?(path)
BREAKS HERE
-  addr = address(new_resource.ip)
-  raise "Elastic IP #{ip} does not exist" if addr.nil?
-    Chef::Log.debug("Elastic IP #{ip} is already attached to the instance")
-    converge_by("attach Elastic IP #{ip} to the instance") do
-      attach(ip, new_resource.timeout)
-  addr = address(new_resource.ip)
-    Chef::Log.debug("Elastic IP #{ip} does not exist, so there is nothing to detach")
-    Chef::Log.debug("Elastic IP #{ip} is already detached from the instance")
-    converge_by("detach Elastic IP #{ip} from the instance") do
-      detach(ip, new_resource.timeout)
-    if ip[:domain] == 'vpc'
-      ec2.disassociate_address(allocation_ip: addr[:allocation_id])
BREAKS HERE
-      unless data['type'] == 'nfs' || data['type'] == 'glusterfs'
BREAKS HERE
-# Recipe:: za-ngi-topo
-  source "/data/imagery/za/ngi-250k/ngi-topo-250k-combined.vrt"
-  source "/data/imagery/za/ngi-50k/ngi-topo-50k-combined.vrt"
BREAKS HERE
-# Cookbook Name:: dynect
-# Copyright:: 2010, Opscode, Inc <legal@opscode.com>
BREAKS HERE
-checksum   = Digest::MD5.hexdigest "#{node['fqdn'] or 'unknown-hostname'}"
BREAKS HERE
-# C* < 2.0
-if node['cassandra']['version'] < '2.0'
-if node['cassandra']['version'] >= '2.1'
BREAKS HERE
-default['chef_client']['log_perm']   = 00640
BREAKS HERE
-      encrypted_data_bag_secret_path: encrypted_data_bag_secret_path
-            client_key: client_key
BREAKS HERE
-    vncserver_proxyclient_address: vnc_bind.host,
BREAKS HERE
-
BREAKS HERE
-  address(node.has_key?(:cloud) ? node.cloud.public_ipv4 : node.ipaddress)
-  subscriptions(node.roles)
BREAKS HERE
-# Default options are based on RHEL5, as the attribute names were
-# adopted from this platform.
-default['nfs']['packages'] = %w(nfs-utils portmap)
-default['nfs']['service']['portmap'] = 'portmap'
-default['nfs']['domain'] = node['domain']
-default['nfs']['pipefs_directory'] = '/var/lib/nfs/rpc_pipefs'
-default['nfs']['nobody_user'] = 'nobody'
-default['nfs']['nobody_group'] = 'nobody'
-  # RHEL6 edge case package set and portmap name
-  if node['platform_version'].to_i >= 6 || platform?('amazon')
-    default['nfs']['packages'] = %w(nfs-utils rpcbind)
-    default['nfs']['service']['portmap'] = 'rpcbind'
-  default['nfs']['service']['portmap'] = 'rpcbind'
-  default['nfs']['service']['portmap'] = 'rpcbind'
-  default['nfs']['packages'] = %w(nfs-common rpcbind nfs-kernel-server)
-  default['nfs']['service']['portmap'] = 'portmap'
-  default['nfs']['service']['lock'] = 'statd'
-  default['nfs']['service']['server'] = 'nfs-kernel-server'
-    # Ubuntu 11.04 edge case package set and portmap name
-    if node['platform_version'].to_f == 11.04
-      default['nfs']['service']['portmap'] = 'rpcbind'
-    # Ubuntu 11.10 edge case package set and portmap name
-    elsif node['platform_version'].to_f >= 11.10
-      default['nfs']['service']['portmap'] = 'rpcbind-boot'
-    end
-
-    # Ubuntu 13.10+ service provider is Upstart for portmap and lock
-    if node['platform_version'].to_f >= 13.10
-      default['nfs']['service_provider']['portmap'] = Chef::Provider::Service::Upstart
-      default['nfs']['service_provider']['lock'] = Chef::Provider::Service::Upstart
-    end
-
-  when 'debian'
-
-    # Debian 6.0+
-    if node['platform_version'].to_i >= 6
-      default['nfs']['service']['lock'] = 'nfs-common'
-    end
-
-    # Debian 7.0+ (wheezy)
-    if node['platform_version'].to_i >= 7
-      default['nfs']['service']['lock'] = 'nfs-common'
BREAKS HERE
-action_class do
BREAKS HERE
-module Berkshelf
-  describe Lockfile do
-    let(:downloader) { Downloader.new(Berkshelf.cookbook_store) }
-
-    describe "without a lockfile in place already" do
-      before(:all) do
-        @old_dir = Dir.pwd
-        Dir.chdir fixtures_path.join("lockfile_spec", "without_lock")
-      end
-
-      after(:all) do
-        FileUtils.rm(fixtures_path.join("lockfile_spec", "without_lock", "Berksfile.lock"))
-        Dir.chdir(@old_dir)
-      end
-
-      it "should be able to write a Berksfile.lock from a list of cookbooks" do
-        resolver = Resolver.new(downloader, sources: CookbookSource.new('nginx', constraint: '= 0.101.0'))
-        resolver.resolve
-
-        Lockfile.new(resolver.sources).write
-
-        File.read('Berksfile.lock').split(/\r?\n/).should =~ [
-          "cookbook 'bluepill', :locked_version => '1.1.0'",
-          "cookbook 'build-essential', :locked_version => '1.1.2'",
-          "cookbook 'nginx', :locked_version => '0.101.0'",
-          "cookbook 'ohai', :locked_version => '1.0.2'",
-          "cookbook 'runit', :locked_version => '0.15.0'"
-        ]
-      end
-    end
-  end
BREAKS HERE
-default['chef-server']['accept_license'] = nil
BREAKS HERE
-require 'chef/mixin/language'
-
BREAKS HERE
-  class Login < Sinatra::Base
-    enable :sessions
-    get('/login') { erb :login }
-
-    post('/login') do
-      if params['username'] && params['password']
-        session['username'] = params['username']
-      else
-        "Login failed, try again: <a href='/login'>login</a>"
-      end
-    end
-  end
-
-    use Login
-      unless session['username']
-        halt "Access denied, please <a href='/login'>login</a>."
BREAKS HERE
-      @ssl = opts[:ssl] || true
BREAKS HERE
-include_recipe "erlang"
-include_recipe "rabbitmq"
-directory "/etc/rabbitmq/ssl"
-%w[
-  cacert
-  cert
-  key
-].each do |file|
-  file "/etc/rabbitmq/ssl/#{file}.pem" do
-    content ssl["server"][file]
-    mode 0644
-  end
-end
-
-template "/etc/rabbitmq/rabbitmq.config" do
-  mode 0644
-  notifies :restart, 'service[rabbitmq-server]', :immediately
-end
-
BREAKS HERE
-      return 60 if ip_address.ipv4? # ipv4
-      return 20 if ip_address.ipv6? # ipv6
BREAKS HERE
-  service 'xinetd' do
-    supports restart: true, status: true, reload: true
-    action [:enable, :start]
-  end
-
-when 'debian'
-  package 'tftpd-hpa'
-
-  service 'tftpd-hpa' do
BREAKS HERE
-default['java']['oracle']['accep_oracle_download_terms'] = true
BREAKS HERE
-  #{migrate_command} upgrade head
BREAKS HERE
-        system(node['jenkins']['master']['use_system_accounts'])
-        system(node['jenkins']['master']['use_system_accounts'])
BREAKS HERE
-  service_name 'rsyncd'
-  service_name 'rsyncd'
-  service_name 'rsyncd'
-  service_name 'rsyncd'
BREAKS HERE
-  log4j_config =  ::File.join(config_directory, 'log4j.properties')
BREAKS HERE
-settings = merge_bamboo_settings
-
BREAKS HERE
-if !node['cq']['custom_tmp_dir'].nil? &&
-  !node['cq']['custom_tmp_dir'].empty? &&
-  node['cq']['custom_tmp_dir'] != '/tmp'
-  directory node['cq']['custom_tmp_dir'] do
-    owner node['cq']['user']
-    group node['cq']['group']
-    mode '0755'
-    action :create
-    recursive true
BREAKS HERE
-attribute :app, :kind_of => String, :name_attribute => true
-attribute :source, :kind_of => String, :default => nil
-attribute :owner, :kind_of => String, :default => nil
-attribute :destination, :kind_of => String, :default => "/Applications"
-attribute :checksum, :kind_of => String, :default => nil
-attribute :volumes_dir, :kind_of => String, :default => nil
-attribute :dmg_name, :kind_of => String, :default => nil
-attribute :type, :kind_of => String, :default => 'app'
-attribute :installed, :kind_of => [TrueClass, FalseClass], :default => false
-attribute :package_id, :kind_of => String, :default => nil
-attribute :dmg_passphrase, :kind_of => String, :default => nil
-attribute :accept_eula, :kind_of => [TrueClass, FalseClass], :default => false
-attribute :headers, :kind_of => Hash, :default => nil
BREAKS HERE
-node.override['rabbitmq']['use_distro_version'] = true
BREAKS HERE
-default['openldap']['basedn'] = "dc=localdomain"
-default['openldap']['server'] = "ldap.localdomain"
-  default['openldap']['basedn'] = "dc=#{node['domain'].split('.').join(",dc=")}"
-when "redhat","centos","amazon","scientific"
-  default['openldap']['dir']        = "/etc/openldap"
-  default['openldap']['run_dir']    = "/var/run/openldap"
-  default['openldap']['module_dir'] = "/usr/lib64/openldap"
-when "debian","ubuntu"
-  default['openldap']['dir']        = "/etc/ldap"
-  default['openldap']['run_dir']    = "/var/run/slapd"
-  default['openldap']['module_dir'] = "/usr/lib/ldap"
-  default['openldap']['dir']        = "/etc/ldap"
-  default['openldap']['run_dir']    = "/var/run/slapd"
-  default['openldap']['module_dir'] = "/usr/lib/ldap"
-default['openldap']['preseed_dir'] = "/var/cache/local/preseeding"
-if node['openldap']['slapd_type'] == "slave"
-  default['openldap']['auth_type']   = "openldap"
BREAKS HERE
-
BREAKS HERE
-        to include(I18n.t('api.error_messages.tarball_corrupt', error: '"\x00\x00\x00\x00\x00\x0001" is not an octal string'))
BREAKS HERE
-public_bind_service = node['openstack']['bind_service']['network']['public']
-  conf['DEFAULT']['bind_host'] = public_bind_service.host
-  conf['DEFAULT']['bind_port'] = public_bind_service.port
BREAKS HERE
-        user_domain = nil
BREAKS HERE
-  it 'downloads osquery pkg' do
BREAKS HERE
-homebrew_go = "#{Chef::Config[:file_cache_path]}/homebrew_go"
-
BREAKS HERE
-  stop_cmd "/usr/sbin/service #{service_naem} stop"
BREAKS HERE
-    project_name service_tenant_name
-    password service_pass
-    connection_params connection_params
-  end
-
-  ## Grant Service role to Service User for Service Tenant ##
-  openstack_user service_user do
-    action :grant_role
BREAKS HERE
-attribute :s3_bucket,             :kind_of => String, :default => node['dynatrace']['s3']['bucket'] #nil # set to node['dynatrace']['s3']['bucket'] when left nil
-attribute :s3_access_key_id,      :kind_of => String, :default => node['dynatrace']['s3']['access_key_id'] #nil # set to node['dynatrace']['s3']['access_key_id'] when left nil
-attribute :s3_secret_access_key,  :kind_of => String, :default => node['dynatrace']['s3']['secret_access_key'] #nil # set to node['dynatrace']['s3']['secret_access_key'] when left nil
BREAKS HERE
-    :aem56 => 'curl -u <%= admin_user %>:<%= admin_password %> -F rep:password="<%= password %>" -F :currentPassword="<%= old_password %>" http://localhost:<%= port %><%= path %>/<%= user %>.rw.html',
BREAKS HERE
-      not_if { actn == :delete }
BREAKS HERE
-        initial_cluster_state: etcd_servers.find { |etcd_node| etcd_node['fqdn'] == node['fqdn'] }.key?('new_node') ? 'existing' : node['cookbook-openshift3']['etcd_initial_cluster_state']
BREAKS HERE
-          mode: 00700
-          mode: 00750,
-          mode: 00700,
-            mode: 00640
-            mode: 00640
-            mode: 00640
-          mode: 00755,
BREAKS HERE
-      )
-      )
BREAKS HERE
-    mode 0755
-    mode 0644
BREAKS HERE
-include_recipe "openstack-compute::network"
BREAKS HERE
-        :description => 'Skip librarian-chef install',
-        :default    => true
-          librarian_install if config[:librarian]
BREAKS HERE
-  context 'Sqlite3 + Thin + delayed_job' do
-            framework: node['deploy']['dummy_project']['framework'],
-    it 'creates proper database.yml template' do
-      db_config = Drivers::Db::Sqlite.new(chef_run, aws_opsworks_app(data_sources: [])).out
-      expect(db_config[:adapter]).to eq 'sqlite3'
-      expect(db_config[:database]).to eq 'db/data.sqlite3'
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/database.yml").with_content(
-          JSON.parse({ development: db_config, production: db_config, staging: db_config }.to_json).to_yaml
-        )
-    end
-
-          'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job start ' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 --queues=test_queue 2>&1 ' \
-          '| logger -t delayed_job-dummy_project-1\'" with timeout 90 seconds'
-          'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job stop ' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" with timeout 90 seconds'
-          'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job start ' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 --queues=test_queue 2>&1 ' \
-          '| logger -t delayed_job-dummy_project-2\'" with timeout 90 seconds'
-          'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job stop ' \
-          '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" with timeout 90 seconds'
-            'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job start ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0 --queues=test_queue 2>&1 ' \
-            '| logger -t delayed_job-dummy_project-1\'" with timeout 90 seconds'
-            'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job stop ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 0\'" with timeout 90 seconds'
-            'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job start ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1 --queues=test_queue 2>&1 ' \
-            '| logger -t delayed_job-dummy_project-2\'" with timeout 90 seconds'
-            'ENV_VAR2="some data" RAILS_ENV="staging" bin/delayed_job stop ' \
-            '--pid-dir=/srv/www/dummy_project/shared/pids/ -i 1\'" with timeout 90 seconds'
BREAKS HERE
-# The rabbit user's password is stored in an encrypted databag
-# and accessed with openstack-common cookbook library's
-# get_password routine.  You are expected to create
-# the user, pass, vhost in a wrapper rabbitmq cookbook.
-default['openstack']['network']['rabbit']['username'] = 'guest'
-default['openstack']['network']['rabbit']['vhost'] = '/'
-default['openstack']['network']['rabbit']['port'] = 5672
-default['openstack']['network']['rabbit']['host'] = '127.0.0.1'
-default['openstack']['network']['rabbit']['ha'] = false
-
-# The database username for the neutron database
-default['openstack']['network']['db']['username'] = 'neutron'
-
-# Enable the use of eventlet's db_pool for MySQL. The flags sql_min_pool_size,
-# sql_max_pool_size and sql_idle_timeout are relevant only if this is enabled.
-default['openstack']['network']['db']['sql_dbpool_enable'] = 'False'
-
-# Database reconnection retry times - in event connectivity is lost
-default['openstack']['network']['db']['sql_max_retries'] = 10
-
-# Database reconnection interval in seconds - if the initial connection to the
-# database fails
-default['openstack']['network']['db']['reconnect_interval'] = 2
-
-# Minimum number of SQL connections to keep open in a pool
-default['openstack']['network']['db']['sql_min_pool_size'] = 1
-
-# Maximum number of SQL connections to keep open in a pool
-default['openstack']['network']['db']['sql_max_pool_size'] = 5
-
-# Timeout in seconds before idle sql connections are reaped
-default['openstack']['network']['db']['sql_idle_timeout'] = 3600
-# MQ options
-default['openstack']['network']['mq']['service_type'] = node['openstack']['mq']['service_type']
-default['openstack']['network']['mq']['qpid']['host'] = '127.0.0.1'
-default['openstack']['network']['mq']['qpid']['port'] = '5672'
-default['openstack']['network']['mq']['qpid']['qpid_hosts'] = ['127.0.0.1:5672']
-
-default['openstack']['network']['mq']['qpid']['username'] = ''
-default['openstack']['network']['mq']['qpid']['password'] = ''
-default['openstack']['network']['mq']['qpid']['sasl_mechanisms'] = ''
-default['openstack']['network']['mq']['qpid']['reconnect'] = true
-default['openstack']['network']['mq']['qpid']['reconnect_timeout'] = 0
-default['openstack']['network']['mq']['qpid']['reconnect_limit'] = 0
-default['openstack']['network']['mq']['qpid']['reconnect_interval_min'] = 0
-default['openstack']['network']['mq']['qpid']['reconnect_interval_max'] = 0
-default['openstack']['network']['mq']['qpid']['reconnect_interval'] = 0
-default['openstack']['network']['mq']['qpid']['heartbeat'] = 60
-default['openstack']['network']['mq']['qpid']['protocol'] = 'tcp'
-default['openstack']['network']['mq']['qpid']['tcp_nodelay'] = true
-
BREAKS HERE
-    
-    SM_SERVERR2 = 89 
-      "Windows Server 2003 R2" => {:major => 5, :minor => 2, :callable => lambda{ sm_serverr2 != 0 }},
-      "Windows Server 2003" => {:major => 5, :minor => 2, :callable => lambda{ sm_serverr2 == 0 }},
-        !(SKU[@sku][:name] =~ /#{m}/i).nil?
-    
-      cols.map{|c| os_info.send(c) }
BREAKS HERE
-  log 'No NTP servers specified, using default ntp.org server pools'
BREAKS HERE
-  if node["sensu"]["rabbitmq"].port == 5671
BREAKS HERE
-        case install_method
-        case service_manager
BREAKS HERE
-    #   obj.set_defualt_attribute("my_app.billing.enabled", false)
BREAKS HERE
-  command "find #{node[:rsyslog][:log_dir]}/$(date +\%Y) -type f -mtime +1 -exec gzip -q {} \;"
BREAKS HERE
-                   :environment => {'PM2_HOME' => new_resource.home},
BREAKS HERE
-            "-N https://127.0.0.1:35357/v2.0 " \
BREAKS HERE
-        .with_content('ENV[\'ENV_VAR1\'] = "test"')
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/unicorn.conf")
-        .with_content('ENV[\'ENV_VAR1\'] = "test"')
-      expect(chef_run)
-        .to render_file("/srv/www/#{aws_opsworks_app['shortname']}/shared/config/puma.rb")
BREAKS HERE
-            dump mount_spec[:dump]
-            pass mount_spec[:pass]
BREAKS HERE
-  mode 0555
-  mode 0444
BREAKS HERE
-      resolver = Resolver.new(Berkshelf.downloader, sources(exclude: options[:without]))  
-      resolver.resolve.each do |cb|
BREAKS HERE
-  command "yum -y remove 'eucalyptus*'"
BREAKS HERE
-
-service 'gnocchi-api' do
-  service_name platform['gnocchi-api_service']
-  subscribes :restart, "template[#{node['openstack']['telemetry-metric']['conf_file']}]"
-  action [:enable, :start]
BREAKS HERE
-unless node[:networking][:nameservers].empty?
-  link "/etc/resolv.conf" do
-    action :delete
-    link_type :symbolic
-    to "/run/resolvconf/resolv.conf"
-    only_if { File.symlink?("/etc/resolv.conf") }
-  template "/etc/resolv.conf" do
-    source "resolv.conf.erb"
BREAKS HERE
-conemu_config_file = "#{ENV['ProgramW6432']}/conemu/conemu.xml"
BREAKS HERE
-    package 'redhat-lsb' if platform_family?('rhel', 'amazon')
BREAKS HERE
-  set[:runit][:sv_bin] = "/usr/bin/sv"
-  set[:runit][:chpst_bin] = "/usr/bin/chpst"
-  set[:runit][:service_dir] = "/etc/service"
-  set[:runit][:sv_dir] = "/etc/sv"
-  set[:runit][:sv_bin] = "/usr/bin/sv"
-  set[:runit][:chpst_bin] = "/usr/bin/chpst"
-  set[:runit][:service_dir] = "/etc/service"
-  set[:runit][:sv_dir] = "/var/service"
BREAKS HERE
-version          "7.0.4"
BREAKS HERE
-smarter_sysctl = node.in_shard?(5)
BREAKS HERE
-require 'resolv'
-  action [:install, :reconfigure]
-  notifies :reconfigure, 'chef_server_ingredient[chef-server-core]'
-end
-
-ruby_block 'ensure node can resolve API FQDN' do
-  block do
-    fe = Chef::Util::FileEdit.new('/etc/hosts')
-    fe.insert_line_if_no_match(/#{node['chef-server']['api_fqdn']}/,
-      "127.0.0.1 #{node['chef-server']['api_fqdn']}")
-    fe.write_file
-  end
-  not_if { node['chef-server']['api_fqdn'].nil? || node['chef-server']['api_fqdn'].empty? }
-  not_if { Resolv.getaddress(node['chef-server']['api_fqdn']) rescue false } # host resolves
BREAKS HERE
-      cookbooks = self.resolve_cookbooks(berksfile.cookbook_list)
BREAKS HERE
-#  neutron.quota.ConfDriver (default)
-#  neutron.quota.DbDriver
-# quotas for networks/subnets/security groups!
-default['openstack']['network']['quota']['driver'] = 'neutron.quota.ConfDriver'
BREAKS HERE
-# SQLEXPRESS is used as an instance name in Standard or Enterprise installs 
-# SQL Server it will default to MSSQLSERVER. Any instance name used will 
-                 'SQLSERVERAGENT'
-               else
-                 "SQLAgent$#{node['sql_server']['instance_name']}"
-               end
-else
-  service service_name do
-    action [:start, :enable]
-  end
BREAKS HERE
-    'db2_python_packages' => ['db2-odbc', 'python-ibm-db', 'python-ibm-db-sa'],
BREAKS HERE
-  default[:ruby][:patch_version] = '2'
-  default[:ruby][:patch] = 'p481' # this attribute will disappear in favor of the sematic versioning schema
-  default[:ruby][:patch] = 'p547'  # this attribute will disappear in favor of the sematic versioning schema
BREAKS HERE
-    source   node['subversion']['msi_source']
-    action   :install
-    'debian' => %w[subversion-tools libsvn-perl],
-    %w[rhel fedora suse] => %w[subversion-devel subversion-perl]
BREAKS HERE
-  thp_defrag = '/dev/null'
-  not_if "grep '\[never\]' #{thp_defrag}"
BREAKS HERE
-  # ensure we have access to the latest version
-  # of the quantum client which floating_cmd will
-  # require
-  include_recipe "python::pip"
-  python_pip "python-quantumclient" do
-    action :upgrade
-    only_if { platform?("ubuntu", "debian") }
BREAKS HERE
-      node.set['openstack']['db']['volume']['db_type'] = 'postgresql'
BREAKS HERE
-      # Priority: provider attribute, User set node attribute -> ohai data -> us-east-1
-        if !new_resource.region.to_s.empty?
-          Chef::Log.info('Using overridden region name in resource')
-          instance_availability_zone[0, region.length - 1]
BREAKS HERE
-      def initialize(ui: ui, policyfile_lock: nil)
BREAKS HERE
-       EOS
-       while [ ! -f #{pid_file} ] ; do sleep 1 ; done
-       kill `cat #{pid_file}`
-       while [ -f #{pid_file} ] ; do sleep 1 ; done
-       rm -rf /tmp/#{mysql_name}
-       EOS
BREAKS HERE
-  node[:bcpc][:hadoop][:oozie_port].to_s
BREAKS HERE
-version          '1.6.2'
BREAKS HERE
-  :service_action => [:enable, :start]
BREAKS HERE
-    @ip_address = IPAddr.new(options[:ip_address].to_s)
BREAKS HERE
-attribute :group, kind_of: [String, Fixnum], default: 0
-attribute :mode, kind_of: Fixnum, default: 0755
BREAKS HERE
-version          '10.0.1'
BREAKS HERE
-package node['ark']['package_dependencies'] unless %w{windows mac_os_x}.include?(node['platform_family'])
BREAKS HERE
-        $stderr.puts
-        $stderr.puts
-        $stderr.puts
-        $stderr.puts
-        $stderr.puts "cookbook: " + cookbook.inspect
-        $stderr.puts "cookbook.location: " + cookbook.location.inspect
-        $stderr.puts "Location.init: " + Location.init(cookbook.name, cookbook.version_constraint).inspect
-        $stderr.puts "location:" + location.inspect
-        $stderr.puts
-        $stderr.puts
-        $stderr.puts
-
BREAKS HERE
-version '1.11.0'
BREAKS HERE
-      sample_config = {:chef_node_name=>"mynode3", :chef_extension_root=>"./", :user_client_rb=>"", :log_location=>nil, :secret=>nil}
-      sample_config = {:chef_node_name=>"mynode3", :chef_extension_root=>"./", :user_client_rb=>"", :log_location=>nil, :secret=>nil}
BREAKS HERE
-# Cookbook Name:: chef-reference
BREAKS HERE
-    let(:file) { chef_run.template('/etc/mysql/conf.d/openstack.cnf') }
-
-    it 'sets mysql version to 5.5' do
-      expect(chef_run.node['mysql']['version']).to eql '5.5'
-    end
-
-    it 'overrides default mysql attributes' do
-      expect(chef_run.node['mysql']['tunable']['default-storage-engine']).to eql 'InnoDB'
-      expect(chef_run.node['mysql']['bind_address']).to eql '127.0.0.1'
-      expect(chef_run.node['mysql']['tunable']['innodb_thread_concurrency']).to eql '0'
-      expect(chef_run.node['mysql']['tunable']['innodb_commit_concurrency']).to eql '0'
-      expect(chef_run.node['mysql']['tunable']['innodb_read_io_threads']).to eql '4'
-      expect(chef_run.node['mysql']['tunable']['innodb_flush_log_at_trx_commit']).to eql '2'
-      expect(chef_run.node['mysql']['tunable']['skip-name-resolve']).to eql true
-      expect(chef_run.node['mysql']['tunable']['character-set-server']).to eql 'utf8'
-      expect(chef_run.node['mysql']['tunable']['max_connections']).to eql '1024'
-    end
-    it 'creates template /etc/mysql/conf.d/openstack.cnf' do
-      expect(chef_run).to create_template(file.name).with(
-        user: 'mysql',
-        group: 'mysql',
-        source: 'openstack.cnf.erb'
-      expect(file).to notify('mysql_service[default]')
-      [/^# This file autogenerated by Chef$/,
-       /^# Do not edit, changes will be overwritten$/,
-       /^\[mysqld\]$/,
-       /^default-storage-engine = InnoDB$/,
-       /^bind-address = 127.0.0.1$/,
-       /^innodb_thread_concurrency= 0$/,
-       /^innodb_commit_concurrency = 0$/,
-       /^innodb_read_io_threads = 4$/,
-       /^innodb_flush_log_at_trx_commit = 2$/,
-       /^skip-name-resolve$/,
-       /^character-set-server = utf8$/,
-       /^max_connections = 1024$/].each do |line|
-        expect(chef_run).to render_file(file.name).with_content(line)
-      end
-    it 'prepares the database server' do
-      expect(chef_run).to query_mysql_database('FLUSH PRIVILEGES pre query')
-      expect(chef_run).to query_mysql_database('drop empty localhost user')
-      expect(chef_run).to drop_mysql_database('test')
-      expect(chef_run).to query_mysql_database('FLUSH PRIVILEGES post query')
-    end
-
-    it 'creates mysql service' do
-      node.set['openstack']['db']['root_user_use_databag'] = true
-      # Password is fixed as 'abc123' by spec_helper
-      expect(chef_run).to create_mysql_service('default').with(
-        server_root_password: 'abc123')
BREAKS HERE
-default['transmission']['version']          = '2.03'
-default['transmission']['checksum']         = '06802c6f4ba517341eb287b273145ccd5e7b0fba2a270da82f0eb0a683cf4046'
BREAKS HERE
-# Recipe:: default 
-  mode 0755
-    mode 0644
-    notifies :restart, "service[portmap]"
-    notifies :restart, "service[nfslock]"
-service "portmap" do
-  action [ :start, :enable ]
-  supports :status => true
-service "nfslock" do
-  action [ :start, :enable ]
-  supports :status => true
BREAKS HERE
-    def upload(*cookbook_names)
-      options[:cookbooks] = cookbook_names
-      berksfile.upload(options.symbolize_keys)
BREAKS HERE
-      def test_file(cookbook = '', recipe = '')
-        "# #{test_file(cookbook, recipe)} - Originally written by Umami!"
-          test_file_name = test_file(cookbook, recipe)
BREAKS HERE
-distro = node['platform']
-distro_version = node['platform_version']
-
-case distro
-  if distro_version.start_with?('6')
-    compile_time do
-      remote_file "#{Chef::Config[:file_cache_path]}/mesosphere-el-repo-6-2.noarch.rpm" do
-        action :create
-      end
-
-      rpm_package 'mesosphere-el-repo-6-2' do
-        source "#{Chef::Config[:file_cache_path]}/mesosphere-el-repo-6-2.noarch.rpm"
-        action :install
-  elsif distro_version.start_with?('7')
-    compile_time do
-      remote_file "#{Chef::Config[:file_cache_path]}/mesosphere-el-repo-7-1.noarch.rpm" do
-        source 'http://repos.mesosphere.io/el/7/noarch/RPMS/mesosphere-el-repo-7-1.noarch.rpm'
-        action :create
-      end
-      rpm_package 'mesosphere-el-repo-7-1' do
-        source "#{Chef::Config[:file_cache_path]}/mesosphere-el-repo-7-1.noarch.rpm"
-        action :install
-      end
BREAKS HERE
-# The OpenStack Network (Quantum) API endpoint.
-# quantumclient appends the protocol version to the endpoint URL, so the
-# 'image' (Glance), 'identity' (Keystone), 'network' (Quantum), or 'volume' (Cinder)
-# Database used by the OpenStack Network (Quantum) service
-default['openstack']['db']['network']['db_name'] = "quantum"
BREAKS HERE
-#
-#
-#
-      @ssl = opts[:ssl].nil? ? true : opts[:ssl]
-          exec!("cd #{path}/#{dir} && #{@berks} install && #{@berks} upload", @logger)
-    def berks_cookbook_upload(cookbooks, cookbook_paths)
-      cookbook_paths.each do |path|
-        if cookbooks.any?
BREAKS HERE
-default['couch_db']['src_checksum']      = "6ef82a7ba0f132d55af7cc78b30658d5b3a4f7be3f449308c8d7fa2ad473677c"
-default['couch_db']['src_version']       = "1.0.2"
-default['couch_db']['src_mirror']        = "http://archive.apache.org/dist/couchdb/#{node['couch_db']['src_version']}/apache-couchdb-#{node['couch_db']['src_version']}.tar.gz"
-default['couch_db']['bind_address']  = nil
BREAKS HERE
-
-    path = "#{node['fmw']['middleware_home_dir']}\\wlserver_10.3\\server\\adr"
-
-      command "unzip -o #{node['fmw_rcu']['source_file']} -d #{node['fmw']['tmp_dir']}/rcu"
BREAKS HERE
-      print "environment : #{cpan_env.to_s} "
BREAKS HERE
-  owner  node['openstack']['compute']['user']
-  group  node['openstack']['compute']['group']
-  mode   00644
BREAKS HERE
-      @cookbook = "'#{options[:cookbook]}'" || "'chefdk_bootstrap', '2.1.0'"
BREAKS HERE
-                         node['cq']['home_dir'],
-                         local_id
-                       )}/#{daemon_name}.conf",
BREAKS HERE
-  it 'empty node[\'deploy\']' do
-    chef_run = ChefSpec::SoloRunner.new(platform: 'ubuntu', version: '14.04') do |solo_node|
-      solo_node.set['lsb'] = node['lsb']
-    end.converge(described_recipe)
-    expect do
-      chef_run
-    end.not_to raise_error
BREAKS HERE
-  elsif joined_cluster?(var_node_name_to_join, var_cluster_status)
BREAKS HERE
-            Chef::Log.warn("You need an application key to let Chef tag your nodes " \
-              "in Datadog. Visit https://app.datadoghq.com/account/settings#api to " \
-                "create one and update your datadog attributes in the datadog cookbook."
BREAKS HERE
-attribute :command_name, :kind_of => String, :name_attribute => true
-attribute :warning_condition, :kind_of => [Integer, String], :default => nil
-attribute :critical_condition, :kind_of => [Integer, String], :default => nil
-attribute :command, :kind_of => String
-attribute :parameters, :kind_of => String, :default => nil
BREAKS HERE
-Given /^a cookbook that contains a LWRP with (no|a) default action( defined via a constructor)?$/ do |has_default_action, no_dsl|
-  default_action = if has_default_action == "no"
-                     :no_default_action
-                   elsif no_dsl.nil?
-                     :dsl_default_action
-                   else
-                     :ruby_default_action
-  end
-  cookbook_with_lwrp({ :default_action => default_action,
-                       :notifies => :does_notify })
-end
-
-Given "a cookbook that contains a custom resource with no default action" do
-  cookbook_with_custom_resource
-end
-
BREAKS HERE
-default['gluster']['client']['volumes'] = []
BREAKS HERE
-  WebMock.allow_net_connect!
BREAKS HERE
-default['haproxy']['defaults_timeouts']['connect'] = "5s"
BREAKS HERE
-  only_if { node['stackstorm']['web']['ssl']['self_signed']['enabled'] == True }
BREAKS HERE
-default[:apt][:ompile_time_update] = true
BREAKS HERE
-              sv_dir = Chef::Resource::Directory.new(sv_dir_name)
-              sv_dir.recursive(true)
-              sv_dir.owner(new_resource.owner)
-              sv_dir.group(new_resource.group)
-              sv_dir.mode(00755)
-
-              run_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'run'))
-              run_script.owner(new_resource.owner)
-              run_script.group(new_resource.group)
-              run_script.source("sv-#{new_resource.service_name}-run.erb")
-              if new_resource.options.respond_to?(:has_key?)
-                run_script.variables(:options => new_resource.options)
-              end
-                log_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log'))
-                log_dir.recursive(true)
-                log_dir.owner(new_resource.owner)
-                log_dir.group(new_resource.group)
-                log_dir.mode(00755)
-
-                if new_resource.default_logger
-                  log_run_file = Chef::Resource::File.new(::File.join( sv_dir_name,
-                                                                       'log',
-                                                                       'run' ))
-                  log_run_file.content(default_logger_content)
-                  log_run_file.owner(new_resource.owner)
-                  log_run_file.group(new_resource.group)
-                  log_run_file.mode(00755)
-                  log_run_file.run_action(:create)
-                else
-                  log_run_file = Chef::Resource::Template.new(::File.join( sv_dir_name,
-                                                                           'log',
-                                                                           'run' ))
-                  log_run_file.owner(new_resource.owner)
-                  log_run_file.group(new_resource.group)
-                  log_run_file.mode(00755)
-                  log_run_file.source("sv-#{new_resource.log_template_name}-log-run.erb")
-                  if new_resource.options.respond_to?(:has_key?)
-                    log_run_file.variables(:options => new_resource.options)
-                  end
-                  log_run_file.run_action(:create)
-                end
-                env_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'))
-                env_dir.mode(00755)
-
-                new_resource.env.each do |var, value|
-                  env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', 'var'))
-                  env_file.content(value)
-                  env_file.run_action(:create)
-                end
-                finish_script_file = Chef::Resource::Template.new(::File.join(sv_dir_name, 'finish'))
-                finish_script_file.owner(new_resource.owner)
-                finish_script_file.group(new_resource.group)
-                finish_script_file.mode(00755)
-                finish_script_file.source("sv-#{new_resource.finish_script_template_name}-finish.erb")
-                if new_resource.options.respond_to?(:has_key?)
-                  finish_script_file.variables(:options => new_resource.options)
-                end
-                finish_script_file.run_action(:create)
-                control_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'control'))
-
-                new_resource.control.each do |signal|
-                  control_signal_file = Chef::Resource::Template.new(::File.join( sv_dir_name,
-                                                                                  'control',
-                                                                                  signal))
-                  control_signal_file.owner(new_resource.owner)
-                  control_signal_file.group(new_resource.group)
-                  control_signal_file.source("sv-#{new_resource.control_template_names[signal]}-#{signal}.erb")
-                  if new_resource.options.respond_to?(:has_key?)
-                    control_signal_file.variables(:options => new_resource.options)
-                  end
-                  control_signal_file.run_action(:create)
-                end
-              if node['platform'] == 'debian'
-                lsb_init = Chef::Resource::Template.new(::File.join( 'etc',
-                                                                     'init.d',
-                                                                     new_resource.service_name))
-                lsb_init.owner('root')
-                lsb_init.group('root')
-                lsb_init.mode(00755)
-                lsb_init.cookbook('runit')
-                lsb_init.source('init.d.erb')
-                lsb_init.variables(:options => new_resource.options)
-                lsb_init.run_action(:create)
-              else
-                lsb_init = Chef::Resource::Link.new(::File.join( 'etc',
-                                                                 'init.d',
-                                                                 new_resource.service_name))
-                lsb_init.to(node['runit']['sv_bin'])
-                lsb_init.run_action(:create)
-              end
-                service_link = Chef::Resource::Link.new(::File.join(service_dir_name))
-                service_link.to(sv_dir_name)
-          content <<-EOF
BREAKS HERE
-    solidfire_pass: solidfire_pass
BREAKS HERE
-default['openstack']['identity']['ldap']['user_domain_id_attribute'] = 'businessCategory'
-default['openstack']['identity']['ldap']['group_domain_id_attribute'] = 'businessCategory'
BREAKS HERE
-    cookbook ['cq']['conf_template_cookbook']
BREAKS HERE
-
-package 'packagecloud-test'
BREAKS HERE
-  mode '0750'
BREAKS HERE
-        cmd = get_default_documents_command specifier
-        doc = Document.new xml
-        current_default_documents = XPath.match(doc.root, 'CONFIG/system.webServer-defaultDocument/files/add/@value').map(&:value)
-        doc = Document.new xml
-        current_mime_maps = XPath.match(doc.root, 'CONFIG/system.webServer-staticContent/mimeMap').map { |x| "fileExtension='#{x.attribute 'fileExtension'}',mimeType='#{x.attribute 'mimeType'}'" }
-        cmd = set_mime_map_command specifier
BREAKS HERE
-  default[:ruby][:patch] = 'p545'  # this attribute will disapier in favor of the sematic versioning schema
BREAKS HERE
-      node.set_unless['cpu']['total'] = 1
-
-        node.set['cpu']['total'] = 10
BREAKS HERE
-  # POST /api/v1/cookbook-versions/evaluation
-  # Take the evaluation results from Fieri and store them on the
BREAKS HERE
-# Copyright 2011-2013, Chef Software, Inc.
-  unless host['key'].nil?
BREAKS HERE
-      least_used = asts[types.min do |a, b|
-        a[:count] <=> b[:count]
-      end[:access_type]]
BREAKS HERE
-      .\\Tentacle.exe register-with --instance "#{new_resource.instance}" --server "#{new_resource.server}" --name "#{new_resource.tentacle_name}" --publicHostName "#{new_resource.public_dns}" --apiKey "#{new_resource.api_key}" #{register_comm_config(new_resource.polling, port)} #{option_list('environment', environment)} #{option_list('role', new_resource.roles)} #{option_list('tenant', new_resource.tenants)} #{option_list('tenanttag', new_resource.tenant_tags)} #{option_list('tenanted-deployment-participation', new_resource.tenated_deployment_participation)} --console
BREAKS HERE
-    Chef::Log.info "#{@new_resource} already configured - nothing to do."
-    converge_by("Configure #{@new_resource}") do
BREAKS HERE
-include_recipe 'ark::default'
-install_0_11 = Chef::VersionConstraint.new(">= 0.11.0").include?(node['consul_template']['version'])
-install_compression = install_0_11 ? '.zip' : '.tar.gz'
-install_compression_path = install_0_11 ? '' : "#{install_version}/"
-ark 'consul-template' do
-  path node['consul_template']['install_dir']
-  version node['consul_template']['version']
-  url ::URI.join(node['consul_template']['base_url'],
-                 "#{node['consul_template']['version']}/",
-                 "#{install_version}#{install_compression}").to_s
-  creates "#{install_compression_path}consul-template"
-  action :cherry_pick
-file File.join(node['consul_template']['install_dir'], 'consul-template') do
-  mode '0755'
-  action :touch
BREAKS HERE
-    # Warning: saves the PostgreSQL password unencrypted
-    if Chef::Config[:solo] && node['postgresql']['password']['postgres'].nil?
-      fail 'You must set node["postgresql"]["password"]["postgres"] in '\
-        'chef-solo mode.'
-    elsif !Chef::Config[:solo]
-      node.set_unless['postgresql']['password']['postgres'] = secure_password
-      node.save
-    end
-
BREAKS HERE
-EOS
BREAKS HERE
-version          '0.1.0'
BREAKS HERE
-      run = Cheffish::ChefRun.new
-      resource = run.compile_recipe do
BREAKS HERE
-%w( create delete ).map(&:to_sym).each do |actn|
BREAKS HERE
-version          '9.2.0'
BREAKS HERE
-  {'limit_conn' => 'default 5'}
BREAKS HERE
-protected
-  #
-  # Walk collection for :add rsync_serve resources
-  # Build and write the config template
-  #
-  def write_conf
-    t = template(new_resource.config_path) do
-      source   'rsyncd.conf.erb'
-      cookbook 'rsync'
-      owner    'root'
-      group    'root'
-      mode     '0640'
-      variables(
-        :globals => global_modules,
-        :modules => rsync_modules
-      )
-      notifies :restart, "service[#{node['rsyncd']['service']}]", :delayed
-    end
-    new_resource.updated_by_last_action(t.updated?)
-    service node['rsyncd']['service'] do
-      action :nothing
-    end
-  # The list of attributes for this resource.
-  #
-  # @todo find a better way to do this
-  #
-  # @return [Array<String>]
-  def resource_attributes
-    %w(
-    )
-  end
-  # The list of rsync server resources in the resource collection
-  #
-  # @return [Array<Chef::Resource>]
-  def rsync_resources
-    run_context.resource_collection.select do |resource|
-      resource.is_a?(Chef::Resource::RsyncServe)
-    end
-  # Expand "snake_case_things" to "snake case things".
-  #
-  # @param [String] string
-  #
-  # @return [String]
-  def snake_to_space(string)
-    string.to_s.gsub(/_/, ' ')
-  end
-  # The list of rsync modules defined in the resource collection.
-  #
-  # @return [Hash]
-  def rsync_modules
-    rsync_resources.reduce({}) do |hash, resource|
-      if resource.config_path == new_resource.config_path && resource.action == :add
-        hash[resource.name] ||= {}
-        resource_attributes.each do |key|
-          value = resource.send(key)
-          next if value.nil?
-          hash[resource.name][snake_to_space(key)] = value
-        end
-
-      hash
-  # The global rsync configuration
-  #
-  # @return [Hash]
-  def global_modules
-    node['rsyncd']['globals'].reduce({}) do |hash, (key, value)|
-      hash[snake_to_space(key)] = value unless value.nil?
-      hash
-    end
BREAKS HERE
-        updated_at: Time.now
-        updated_at: Time.now - 2.days
-        created_at: Time.now - 1.day
-        created_at: Time.now
-        created_at: Time.now
-    it 'orders cookbooks by @recently_updated_cookbooks' do 
-    it "returns unique cookbooks when ordered by @recently_updated_cookbooks" do 
BREAKS HERE
-%w{ varlibdir statsdir }.each do |ntpdir|
-  directory "node['ntp']['#{ntpdir}']" do
BREAKS HERE
-version '4.1.1'
BREAKS HERE
-chef_version_for_provides "< 14.0" if defined?(:chef_version_for_provides)
BREAKS HERE
-depends           "openstack-identity", ">= 7.0.0"
-depends           "openstack-common", ">= 0.2.0"
BREAKS HERE
-include_recipe 'hadoop::hive_checkconfig'
BREAKS HERE
-        delete :destroy_version, cookbook: cookbook, version: '1.2.1', format: :json
-        delete :destroy_version, cookbook: cookbook, version: '1.2.2', format: :json
-        expect(response.status.to_i).to eql(200)
-        delete :destroy_version, cookbook: cookbook, version: '1.2.3', format: :json
BREAKS HERE
-    mode '0750'
BREAKS HERE
-    action :nothing
-    
-      notifies :run, resources(:execute => "start-runsvdir"), :immediately
-  if platform? "gentoo"
BREAKS HERE
-    "quantum_packages" => [ "quantum-common", "python-quantumclient", "python-pyparsing", "python-cliff" ],
BREAKS HERE
-action_class.class_eval do
BREAKS HERE
-      it "returns true if the cookbook of the given name and version is valid" do
-        @cb = CachedCookbook.from_store_path(fixtures_path.join("cookbooks", "example_cookbook-0.5.0"))
-        @cb.validate!.should be_true
-        @cb = CachedCookbook.from_store_path(fixtures_path.join("cookbooks", "invalid_ruby_files-1.0.0"))
-          @cb.validate!
-        @cb = CachedCookbook.from_store_path(fixtures_path.join("cookbooks", "invalid_template_files-1.0.0"))
-          @cb.validate!
BREAKS HERE
-  only_if { not Chef::Config[:solo] and node['eucalyptus']['sync-keys'] }
BREAKS HERE
-    :use_ec2_instance_id => node['datadog']['use_ec2_instance_id']
BREAKS HERE
-      # Software had a different set of URLs for from 7.0.0 to 7.1.7
-      if node['jira']['flavor'].downcase == 'software' && (v >= Gem::Version.new('7.0.0')) && (v < Gem::Version.new('7.1.9'))
-        product = "#{base_url}/atlassian-jira-#{node['jira']['flavor']}-#{version}-jira-#{version}"
BREAKS HERE
-    'neutron_lb_packages' => ['openstack-neutron-lbaas', 'haproxy'],
BREAKS HERE
-      ).tap do |packages|
-        # Some packages are installed as QFE updates on 2012, 2012R2 & 10
-        case nt_version
-          # Windows 7 or Server 2008R2
-          when 6.1
-            {
-              'KB4019990-6.1' => 'KB4019990',
-            }
-          # Windows 8 & Server 2012
-          when 6.2
-            {
-              '4.5.2' => 'KB2901982',
-              '4.6' => 'KB3045562',
-              '4.6.1' => 'KB3102439',
-              '4.6.2' => 'KB3151804',
-              '4.7' => 'KB3186505',
-              'KB3083184' => 'KB3083184',
-              'KB4019990-6.2' => 'KB4019990',
-            }
-          # Windows 8.1 & Server 2012R2
-          when 6.3
-            {
-              '4.5.2' => 'KB2934520',
-              '4.6' => 'KB3045563',
-              '4.6.1' => 'KB3102467',
-              '4.6.2' => 'KB3151864',
-              '4.7' => 'KB3186539',
-              'KB2919442' => 'KB2919442',
-              'KB3173424' => 'KB3173424',
-              'KB2919355' => 'KB2919355',
-              'KB3083185' => 'KB3083185',
-            }
-          # Windows 10 & Server 2016
-          when 10
-            {
-              '4.6.1' => 'KB3102495',
-              '4.6.2' => 'KB3151900',
-              '4.7' => 'KB3186568',
-            }
-          else
-            {}
-        end.each { |v, kb| packages[v][:not_if] = "C:\\Windows\\System32\\wbem\\wmic.exe QFE where HotFixID='#{kb}' | FindStr #{kb}" }
-      end
BREAKS HERE
-      !!(File.exist?('/proc/modules') &&
-           File.read('/proc/modules')
-               .match(Regexp.new("^#{mod}\s")))
BREAKS HERE
-  d = rvm_default_ruby node['rvm']['default_ruby'] do
-    action[:nothing]
-  end
-    r = rvm_ruby rubie do
-      action[:nothing]
-    end
BREAKS HERE
-    :gateways => node["eucalyptus"]["network"]['Gateways']
BREAKS HERE
-      @install_service_resource.only_if do
-        WMI::Win32_Service.find(
-          :first,
-          conditions: { name: new_resource.service_name },
-        ).nil?
-        WMI::Win32_Service.find(
-          :first,
-          conditions: { name: new_resource.service_name },
-        )
BREAKS HERE
-if node[:bamboo][:backup][:ceph] == true
-  ceph = ', :aws_signature_version => 2'
-else
-  ceph = nil
-end
-  store_with('engine' => 'S3', 'settings' => { 's3.access_key_id' => node[:bamboo][:backup][:s3_access_key_id], 's3.secret_access_key' => node[:bamboo][:backup][:s3_secret_access_key], 's3.bucket' => node[:bamboo][:backup][:s3_bucket], 's3.path' => 'bamboo', 's3.keep' => 5, 's3.fog_options' => "{  :host => #{node[:bamboo][:backup][:s3_host]}, :scheme => #{node[:bamboo][:backup][:s3_scheme]}, :port => #{node[:bamboo][:backup][:s3_port]} #{ceph} }" })
-  store_with('engine' => 'S3', 'settings' => { 's3.access_key_id' => node[:bamboo][:backup][:s3_access_key_id], 's3.secret_access_key' => node[:bamboo][:backup][:s3_secret_access_key], 's3.bucket' => node[:bamboo][:backup][:s3_bucket], 's3.path' => 'bamboo', 's3.keep' => 5, 's3.fog_options' => "{  :host => #{node[:bamboo][:backup][:s3_host]}, :scheme => #{node[:bamboo][:backup][:s3_scheme]}, :port => #{node[:bamboo][:backup][:s3_port]} #{ceph} }" })
BREAKS HERE
-node.override["openstack"]["block-storage"]["netapp"]["dfm_password"] = service_password "netapp"
BREAKS HERE
-        @same_state_barrier = 6
-        @error_state_barrier = 6
-        @sleep_time = 10
BREAKS HERE
-service node[:ntp][:service] do
-  action :start
-end
-
-  notifies :restart, resources(:service => node[:ntp][:service])
BREAKS HERE
-when "debian"
-
-  erlpkg = node['erlang']['gui_tools'] ? "erlang-x11" : "erlang-nox"
-
-  package "erlang-dev"
-
-when "rhel"
-
-  include_recipe "yum::epel"
-
-  yum_repository "erlang" do
-    name "EPELErlangrepo"
-    url "http://repos.fedorapeople.org/repos/peter/erlang/epel-5Server/$basearch"
-    description "Updated erlang yum repository for RedHat / Centos 5.x - #{node['kernel']['machine']}"
-    action :add
-    only_if { node['platform_version'].to_f >= 5.0 && node['platform_version'].to_f < 6.0 }
-  package "erlang"
-
-else
-
-  package "erlang"
-
BREAKS HERE
-  configure
-  if !current_resource.runtime_version && !running
-  if current_resource.runtime_version && running
-      shell_out!("#{appcmd(node)} stop APPPOOL \"#{new_resource.name}\"") if running
-      shell_out!("#{appcmd(node)} recycle APPPOOL \"#{new_resource.name}\"") if running
-    if should_clear_apppool_schedules
-    unless cmd == "#{appcmd(node)} set config /section:applicationPools"
BREAKS HERE
-        raise("Error volume group #{group} does not exist", 2) if vg.nil?
-        raise("Error logical volume #{name} does not exist", 2) if lv.empty?
-                          raise("Invalid size #{Regexp.last_match[1]} for lvm resize", 2)
-                          raise('Cannot percentage based off free space', 2) unless new_resource.take_up_free_space
-                          raise("Invalid type #{type} for resize. You can only resize using an explicit size, percentage of VG or by setting take_up_free_space to true", 2)
-          raise("Invalid size specification #{lv_size}", 2)
-        raise("Error trying to extend logical volume #{lv.name} beyond the capacity of volume group #{group}", 2) if !thin_volume? && (lv_size_req - lv_size_cur) > pe_free
BREAKS HERE
-dynatrace_configure_ini_files "#{name} sizing=#{sizing}" do     #TODO probably do not work ->   variables({ :memory => sizing })
-  installer_prefix_dir installer_prefix_dir
-  ini_files            ini_files
-  dynatrace_owner      dynatrace_owner
-  dynatrace_group      dynatrace_group
-  variables({ :memory => sizing })
-end
-
-ruby_block "Test ini files memory sizing=#{sizing}" do    #TODO after tests remove this block
-  block do
-    Dynatrace::Helpers.read_file2out("Test memory sizing in #{dtserver_ini_file} file", dtserver_ini_file)
-    Dynatrace::Helpers.read_file2out("Test memory sizing in#{dtfrontendserver_ini_file} file", dtfrontendserver_ini_file)
-  end
-end
-endof = "-Deof=eof"
-memory = "-memory"
-ruby_block "Modificate1 ini files" do
-  block do
-    patterns_array = [ "demo", "small", "medium", "large" ]
-      
-    #backend------------------------------
-    Dynatrace::Helpers.file_replace_two_lines("#{dtserver_ini_file}", "#{memory}", patterns_array, "", "")  #remove "-memory" line as well as next(? TODO) line if second pattern matches  
-#    Dynatrace::Helpers.file_append_or_replace_line("#{dtserver_ini_file}", "#{memory}", "#{memory}")     #append "-memory" line at the end of file
-#    Dynatrace::Helpers.file_append_or_replace_line("#{dtserver_ini_file}", "#{sizing}", "#{sizing}")     #append "small" line at the end of file (value of sizing variable)
-
-    #frontend ------------------------------
-    Dynatrace::Helpers.file_replace_two_lines("#{dtserver_ini_file}", "#{memory}", patterns_array, "", "")  #remove "-memory" line as well as next(? TODO) line if second pattern matches  
-    Dynatrace::Helpers.file_replace_line("#{dtfrontendserver_ini_file}", "#{endof}", "")
-    
-#    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{memory}", "#{memory}")
-#    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{sizing}", "#{sizing}")
-#    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{endof}", "#{endof}")
-  end
-ruby_block "Modificate2 ini files" do
-    #backend------------------------------
-    Dynatrace::Helpers.file_append_or_replace_line("#{dtserver_ini_file}", "#{memory}", "#{memory}")     #append "-memory" line at the end of file
-    Dynatrace::Helpers.file_append_or_replace_line("#{dtserver_ini_file}", "#{sizing}", "#{sizing}")     #append "small" line at the end of file (value of sizing variable)
-
-    #frontend ------------------------------
-    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{memory}", "#{memory}")
-    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{sizing}", "#{sizing}")
-    Dynatrace::Helpers.file_append_or_replace_line("#{dtfrontendserver_ini_file}", "#{endof}", "#{endof}")
-ruby_block "Test ini files after modification" do
-  block do
-    Dynatrace::Helpers.read_file2out("After modification #{dtserver_ini_file} file", dtserver_ini_file)
-    Dynatrace::Helpers.read_file2out("After modification #{dtfrontendserver_ini_file} file", dtfrontendserver_ini_file)
-  end
-  ignore_failure true
-    ignore_failure true
BREAKS HERE
-        ['kafka-topics.sh --list', '--zookeeper', zookeeper, '| grep ^', topic_name, '$'].join(' ')
BREAKS HERE
-  DIRECTIVES = %w[
-  ] unless const_defined?(:DIRECTIVES)
-  VALUES = %w[
-  ] unless const_defined?(:VALUES)
-  SCRIPTS = %w[firstaction  prerotate  postrotate  lastaction] unless const_defined?(:SCRIPTS)
BREAKS HERE
-    :nginx_prefix => node['openresty']['source']['prefix'],
BREAKS HERE
-default["openstack"]["block-storage"]["netapp"]["driver"] = "/usr/share/pyshared/cinder/volume/netapp.py"
BREAKS HERE
-          client.connection.get(file[:url])
BREAKS HERE
-      deps.map{|dep| dep['value']}
BREAKS HERE
-execute "eucanetd -F" do
-execute "Clear yum cache" do
-  command "yum clean all"
-end
-
-execute "yum clean all"
-
BREAKS HERE
-when "redhat","centos","fedora","scientific","amazon","oracle" 
-    # RHEL6 edge case package set and portmap name
-  # Ubuntu 11+ edge case package set and portmap name
-  if node['platform_version'].to_i >= 11
-  end
-
-  # Ubuntu 12+ edge case portmap name
-  if node['platform_version'].to_i >= 12
BREAKS HERE
-def get_mysql_nodes
-  results = search(:node, "recipes:bcpc\\:\\:mysql AND chef_environment:#{node.chef_environment}")
-  results.map!{ |x| x.hostname == node.hostname ? node : x }
-  return (results.empty?) ? [node] : results.sort
-end
-
-def get_nodes_for(recipe, cookbook="bcpc")
BREAKS HERE
-%w(cassandra.yaml cassandra-env.sh log4j-server.properties).each do |f|
BREAKS HERE
-    stub_command('nc -z -w5 localhost 5000 && nc -z -w5 localhost 5043').and_return(true)
BREAKS HERE
-        Minimart::Mirror::InventoryConfiguration.new('spec/invalid/bad_metadata_cookbook.yml')
BREAKS HERE
-        expect(chef_run).to create_directory(dir.name)
-      end
-
-      it 'has proper owner' do
-        expect(dir.owner).to eq('cinder')
-        expect(dir.group).to eq('cinder')
-      end
-
-      it 'has proper modes' do
-        expect(sprintf('%o', dir.mode)).to eq('700')
BREAKS HERE
-    ipv6OnOff = 'off'
-    ipv6OnOff = 'on'
-    command "/sbin/chkconfig ip6tables #{ipv6OnOff}"
BREAKS HERE
-        @cookbooks[cookbook][:location] = location
BREAKS HERE
-        index
-    def self.createDomain(domain, description, aliases, mailboxes, login_username, login_password, ssl=false)
-      login(login_username, login_password, ssl)
-      body = {
-        'fDomain' => domain,
-        'fDescription' => description,
-        'fAliases' => aliases,
-        'fMailboxes' => mailboxes,
-        'submit' => 'Add+Domain',
-      }
-      post('/create-domain.php', body, ssl)
-    end
-
BREAKS HERE
-    puts packer_build_cmd(template, builder, options)
-    #shell_out_command(packer_build_cmd(template, builder, options))
BREAKS HERE
-  directory dir do
BREAKS HERE
-        get :index, order: 'recently_updated'
-        get :index, order: 'recently_added'
-        get :index, order: 'most_followed'
-        get :index, order: 'most_downloaded'
-        get :index, order: 'most_followed', q: 'mysql'
-        get :index, featured: true
-        get :index, q: 'amazing'
-        get :index, platforms: %w(ubuntu windows)
-        get :index, platforms: %w(windows)
-        get :index, platforms: ['']
-        get :index, q: 'ruby', platforms: %w(debian)
-        get :index, order: 'most_downloaded', platforms: %w(debian)
-        get :index, badges: %w(partner)
-        get :index, badges: %w(partner)
-        get :index, badges: ''
-        get :index, q: 'sauce', badges: %w(partner)
-        get :index, order: 'most_downloaded', badges: %w(partner)
-      post :adoption, id: cookbook
-        post :adoption, id: cookbook
-      post :adoption, id: cookbook
-        patch :update, id: cookbook, cookbook: {
-        }
-          patch :update, id: cookbook, cookbook: {
-          }
-        patch :update, id: cookbook, cookbook: {
-        }
-          patch :update, id: cookbook, cookbook: { source_url: 'some-invalid-url' }
-        patch :update, id: cookbook, cookbook: { source_url: 'some-invalid-url' }
-      get :show, id: cookbook.name
-      get :show, id: cookbook.name, format: :atom
-      get :show, id: cookbook.name
-      get :show, id: cookbook.name
-      get :show, id: cookbook.name
-      get :show, id: cookbook.name
-      get :show, id: cookbook.name
-          get :show, id: cookbook.name
-          get :show, id: cookbook.name
-          get :show, id: cookbook.name
-          get :show, id: cookbook.name
-      get :show, id: 'snarfle'
-      get :download, id: cookbook.name
-      get :download, id: 'snarfle'
-          put :follow, id: cookbook
-        put :follow, id: cookbook
-        put :follow, id: cookbook
-        put :follow, id: cookbook, list: true
-        put :follow, id: cookbook
-        put :follow, id: 'snarfle'
-          delete :unfollow, id: cookbook
-        delete :follow, id: cookbook
-        delete :follow, id: cookbook
-        put :follow, id: cookbook, list: true
-          delete :unfollow, id: cookbook
-        delete :unfollow, id: cookbook
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-            put(
-              :deprecate,
-              id: cookbook,
-              cookbook: {
-              }
-            )
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-            put(
-              :deprecate,
-              id: cookbook,
-              cookbook: {
-              }
-            )
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-          put(
-            :deprecate,
-            id: cookbook,
-            cookbook: {
-            }
-          )
-        put(
-          :deprecate,
-          id: cookbook,
-          cookbook: {
-          }
-        )
-      delete :undeprecate, id: cookbook
-      delete :undeprecate, id: cookbook
-      delete :undeprecate, id: cookbook
-      delete :undeprecate, id: cookbook
-      put :toggle_featured, id: unfeatured
-      put :toggle_featured, id: featured
-      put :toggle_featured, id: unfeatured
-      put :toggle_featured, id: unfeatured
-      get :deprecate_search, id: postgresql, q: 'postgresql', format: :json
-      get :deprecate_search, id: postgresql, q: 'postgresql', format: :json
-      get :deprecate_search, id: postgresql, q: 'postgresql', format: :json
-      get :deprecate_search, id: postgresql, format: :json
BREAKS HERE
-version          '10.2.0'
-depends          'apt', '>= 2.3.8'
-depends          'database', '>= 2.0.0'
-depends          'mysql', '< 6.0.0'
-depends          'yum', '>= 3.1.4'
-depends          'yum-epel', '>= 0.3.4'
BREAKS HERE
-      # @sandbox_resource = SandboxResource.new_link(connection_registry, client_name, client_key, options)
-      response = connection.get(self.class.resource_path).body
-      connection.delete(url).body
-      cookbook = find(name, version)
-
-      unless cookbook.nil?
-      new(connection.get("#{self.class.resource_path}/#{chef_id}/#{version}").body)
-      connection.put(url, cookbook.to_json)
-      response = connection.get("#{self.class.resource_path}/#{name}").body
BREAKS HERE
-  <%  conf.to_hash.sort.each do |key, value|
-  <% @conf.to_hash.sort.each do |key, value|
-<%   @ns.to_hash.sort.each do |key, value|
-  <% @conf.to_hash.sort.each do |key, value| -%>
-        listener.to_hash.sort.each do |service, values|
-  <%        values.to_hash.sort.each do |key, value|-%>
-  <% @conf.to_hash.sort.each do |key, value|
-<%     @map.sort.to_hash.each do |k, v|
-           v.to_hash.sort.each do |k2, v2|
BREAKS HERE
-  node['platform_version'].to_f <= 11.4
BREAKS HERE
-version '1.10.21'
BREAKS HERE
-              matches = case value.class
BREAKS HERE
-        cert_script << ', [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::PersistKeySet'
BREAKS HERE
-    ec2_public_api_ipaddress: ec2_public_endpoint.host
BREAKS HERE
-if platform_family?('debian', 'fedora', 'rhel')
-  arch = node['dynatrace']['apache_wsagent']['arch']
-  agent_path = node['dynatrace']['apache_wsagent']['linux'][arch]['agent_path']
-  node.set['dynatrace']['apache_wsagent']['agent_path'] = agent_path
-else
-  raise 'Unsupported platform family.'
-end
-    fileExists = apache_config_file_path
-    if File.exist?(fileExists)
-      Dynatrace::Helpers.file_replace_line(fileExists, line_to_remove, '')
BREAKS HERE
-  "/#{option}=\"#{safe_password}\""
BREAKS HERE
-    not_if { shell_out("chef-server-ctl list-server-admins").stdout.include?(new_resource.username) }
BREAKS HERE
-  hosts = search(:node, 'keys_ssh:*').collect do |node|
-      'fqdn' => node['fqdn'] || node['ipaddress'] || node['hostname'],
-      'key'  => node['keys']['ssh']['host_rsa_public'] || node['keys']['ssh']['host_dsa_public']
BREAKS HERE
-%w( hadoop_client scala spark-core ).each do |pkg|
-    variables node['spark']['spark_env']
BREAKS HERE
-
BREAKS HERE
-    glance_api_ip = glance[0]['glance']['api']['ipaddress']
-    glance_api_ip = node['glance']['api']['ipaddress']
BREAKS HERE
-      @name  = new_resource.name
-      @klass = [new_resource.klass].flatten
-      @match = new_resource.pattern
-      @filter = new_resource.filter || proc { |o| true }
-      @collector = new_resource.collect || method(:collect)
-      @selector = new_resource.select || method(:select)
-      return unless new_resource.delayed || new_resource.immediately
-          Chef::Log.info "#{@new_resource} keeping #{name}"
-          if new_resource.immediately
-          Chef::Log.info "#{@new_resource} zapping #{r}"
BREAKS HERE
-version '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
-depends 'openstack-image', '>= 15.0.0'
-depends 'openstack-network', '>= 15.0.0'
BREAKS HERE
-    gpgkey 'https://yum.datadoghq.com/DATADOG_RPM_KEY.public'
BREAKS HERE
-default[:passenger][:version] = '4.0.33'
BREAKS HERE
-version '2.0.4'
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
BREAKS HERE
-          converge_by("configure service without enabling #{@new_resource}") do
-            configure_service # Do this every run, even if service is already enabled and running
-            Chef::Log.info("#{@new_resource} configured")
-          end
-          converge_by("configure service #{@new_resource}") do
-            configure_service # Do this every run, even if service is already enabled and running
-            Chef::Log.info("#{@new_resource} configured")
-          end
-            converge_by("enable service #{@new_resource}") do
-              enable_service
-              Chef::Log.info("#{@new_resource} enabled")
-            end
-              env_files.each do |file| 
-         
-          unless inside_docker?  
-              Chef::Log.debug("skipping */supervise/ok check inside docker")
-            new_resource.updated_by_last_action(true)
-              )
-              )
-              )
BREAKS HERE
-        }.to_not raise_error Minimart::Error::UnresolvedDependency
BREAKS HERE
-      def use_source(source)
BREAKS HERE
-
BREAKS HERE
-default['nodejs']['prefix_url'] = ::URI.join('http://nodejs.org/dist', "v#{node['nodejs']['version']}").to_s
BREAKS HERE
-  groups ['alerts']
-  groups ['alerts']
BREAKS HERE
-        node.set['eucalyptus']['cloud-keys'][cluster][key_name] = cert
BREAKS HERE
-
-if ! agent_config_args.empty?
-if ! node['threatstack']['rulesets'].empty?
-  if ! agent_config_args.empty?
-    if ! node['threatstack']['agent_config_args'].nil?
-          k,v = arg.split('=')
-          if !(args_hash.has_key? k and args_hash.fetch(k) == v)
BREAKS HERE
-# Register Service Tenant
-openstack_project service_project_name do
-  connection_params connection_params
-end
-
-# Register Service User
-openstack_user service_user do
-  project_name service_project_name
-  role_name service_role
-  password service_pass
-  connection_params connection_params
-end
-
-## Grant Service role to Service User for Service Tenant ##
-openstack_user service_user do
-  role_name service_role
-  project_name service_project_name
-  connection_params connection_params
-  action :grant_role
-end
-
-openstack_user service_user do
-  domain_name service_domain_name
-  role_name service_role
-  user_name service_user
-  connection_params connection_params
-  action :grant_domain
-end
-
BREAKS HERE
-
-  openstack_user user do
-    domain_name service_domain_name
-    role_name service_role
-    user_name user
-    connection_params connection_params
-    action :grant_domain
-  end
BREAKS HERE
-      Berkshelf.ui.mute { berksfile.resolve }.sort.each do |cookbook|
-      cookbook = Berkshelf.ui.mute { berksfile.resolve }.find{ |cookbook| cookbook.cookbook_name == name }
BREAKS HERE
-identity_endpoint = endpoint "identity-admin"
-    "identity_endpoint" => identity_endpoint,
BREAKS HERE
-# Copyright 2010-2013, Opscode, Inc.
-attribute :cookbook, :kind_of => String, :default => "cron"
-attribute :predefined_value, :kind_of => [String], :callbacks => {"should be a valid predefined value" => lambda { |spec| validate_predefined_value(spec) } }
-
-attribute :minute, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid minute spec" => lambda { |spec| validate_numeric(spec,0,59) } }
-attribute :hour, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid hour spec" => lambda { |spec| validate_numeric(spec,0,23) } }
-attribute :day, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid day spec" => lambda { |spec| validate_numeric(spec,1,31) } }
-attribute :month, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid month spec" => lambda { |spec| validate_month(spec) } }
-attribute :weekday, :kind_of => [Integer, String], :default => "*", :callbacks => {"should be a valid weekday spec" => lambda { |spec| validate_dow(spec) } }
-
-attribute :user, :kind_of => String, :default => "root"
-
-  #Several special predefined values can substitute in the cron expression
-  if ["@reboot", "@yearly", "@annually", "@monthly", "@weekly", "@daily", "@midnight", "@hourly"].include? spec.downcase then
-def self.validate_numeric(spec,min,max)
-    return false unless spec >= min and spec <= max
-      return false unless x >= min and x <= max
-  return true
-  if ["jan", "feb", "mar", "apr", "may", "jun", "jul", "aug", "sep", "oct", "nov", "dec"].include? spec.downcase then
-    return true
-  end
-  return validate_numeric(spec,1,12)
-  if ["sun", "mon", "tue", "wed", "thu", "fri", "sat"].include? spec.downcase then
-    return true
-  end
-  return validate_numeric(spec,0,7)
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
BREAKS HERE
-  version '0.2.4'
BREAKS HERE
-  # @author Jamie Winsor <jamie@vialstudios.com.com>
BREAKS HERE
-depends "openstack-common", "~> 0.3.0"
BREAKS HERE
-          :cert_path, arg,
BREAKS HERE
-  action   :create
-  only_if  { node['osquery']['syslog']['enabled'] }
-  notifies :restart, "service[#{osquery_daemon}]"
BREAKS HERE
-return if platform?('centos') && node['platform_version'].to_i == 5
-
-gem_package 'jakedotrb' do
-  options '--bindir /usr/local/bin'
-  version '0.0.1'
BREAKS HERE
-if platform_family?('windows')
-  windows_path node['terraform']['win_install_dir'] do
-    action :add
-  end
BREAKS HERE
-                select id, domain_id, name, type, content, ttl, prio, change_date, ordername from records_reverse
BREAKS HERE
-      return 'mysql-client-5.5' if major_version == '5.5' && node['platform_family'] == 'debian'
-      return 'mysql-client-5.6' if major_version == '5.6' && node['platform_family'] == 'debian'
-      return 'mysql-client-5.7' if major_version == '5.7' && node['platform_family'] == 'debian'
BREAKS HERE
-    it "extracts and returns the validation_key from encrypted text." do
-      expect(instance).to receive(:value_from_json_file).twice.and_return('')
-      expect(@object).to receive(:to_pem)
-      instance.send(:get_validation_key, 'encrypted_text', 'format')
-    it "extracts and returns the validation_key from encrypted text." do
-      expect(instance).to receive(:value_from_json_file).twice.and_return("")
-      instance.send(:get_validation_key, "encrypted_text", "format")
-end
BREAKS HERE
-      hosts.each do |_h|
BREAKS HERE
-	if node['platform_version'] =~ /^6/
-		node.default['yum']['epel-testing']['enabled'] = true
-		node.default['yum']['epel-testing']['managed'] = true
-		include_recipe 'yum-epel'
-	end
-when 'ubuntu','debian'
-	true
-	raise("Unsupported platform family")
-include_recipe "netdata::install_netdata"
BREAKS HERE
-  " -server -XX:ParallelGCThreads=#{[1, (node['cpu']['total'] * node['bcpc']['hadoop']['hbase_rs']['gc_thread']['cpu_ratio']).ceil].max} " +
- env_sh[:HBASE_REGIONSERVER_OPTS] = '$HBASE_REGIONSERVER_OPTS -Djava.security.auth.login.config=/etc/hbase/conf/regionserver.jaas'
BREAKS HERE
-        endpoint_adminurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s',
-        endpoint_internalurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s',
-        endpoint_publicurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s'
-          endpoint_adminurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s',
-          endpoint_internalurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s',
-          endpoint_publicurl: 'http://127.0.0.1:8776/v1/%(tenant_id)s'
BREAKS HERE
-openstack_identity_register 'Grant service Role to Ironic Service User for Ironic Service Tenant' do
BREAKS HERE
-  templates [{
-     source: '/etc/haproxy/haproxy.cfg.ctmpl',
-     destination: '/etc/haproxy/haproxy.cfg',
-     command: 'service haproxy restart'
-   }]
BREAKS HERE
-  describe '.get_token' do
-      expect(described_class.get_token(path)).to eq(token)
BREAKS HERE
-default['openldap']['ssl_dir'] = "#{openldap['dir']}/ssl"
-default['openldap']['ssl_cert'] = "#{openldap['ssl_dir']}/#{openldap['server']}_cert.pem"
-default['openldap']['ssl_key'] = "#{openldap['ssl_dir']}/#{openldap['server']}.pem"
BREAKS HERE
-                          if node['platform_version'].to_i >= 7
BREAKS HERE
-          env:  { 'HOME' => ::Dir.home(new_resource.owner), 'USER' => new_resource.owner },
-          env:  { 'HOME' => ::Dir.home(new_resource.owner), 'USER' => new_resource.owner },
-      env:  { 'HOME' => ::Dir.home(new_resource.owner), 'USER' => new_resource.owner },
BREAKS HERE
-        github_access_token = Berkshelf::Config.instance.github.access_token
-        github_config = {}
BREAKS HERE
-    CONFIG_ROOT ||= '/etc/nomad-conf.d'
-    JOB_ROOT ||= '/etc/nomad-jobs.d'
-    }
-    }
-    }
-    }
BREAKS HERE
-  link "#{node['spark']['release']['install_path']}/spark-#{node['spark']['release']['version']}-bin-#{spark_release}" do
-    to "#{node['spark']['release']['install_path']}/spark"
BREAKS HERE
-                      :url => "http://#{site}/layer/#{layer}/{z}/{x}/{y}.#{extension}",
BREAKS HERE
-include_recipe "nsq"
-template "/etc/init/nsqlookupd.conf" do
-    action :create
-    source "upstart.nsqlookupd.conf.erb"
-    mode "0644"
-    # need to stop/start in order to reload config
-    notifies :stop, "service[nsqlookupd]", :immediately
-    notifies :start, "service[nsqlookupd]", :immediately
-service "nsqlookupd" do
-    provider Chef::Provider::Service::Upstart
-    action [:enable, :start]
-    supports :stop => true, :start => true, :restart => true, :status => true
-    subscribes :restart, "ark[#{nsq_release}]", :delayed
BREAKS HERE
-version           '9.0.0'
-depends 'database', '~> 2.0.0'
-depends 'mysql', '~> 4.1.2'
-depends 'postgresql', '~> 3.3.4'
BREAKS HERE
-  template "#{node[:monit][:conf_dir]}/node_web_app-#{application}.monitrc" do
BREAKS HERE
-recommends 'exhibitor'
BREAKS HERE
-		command "set path #{node['perl']['install_dir']}/bin;%path%"
BREAKS HERE
-              "Expected #{new_resource.count} #{new_reosurce.factory_pid} "\
BREAKS HERE
-depends 'rabbitmq', '~> 4.0'
BREAKS HERE
-  keystone = search(:node, 'recipes:keystone\:\:server and chef_environment:#{node.chef_environment}') || []
BREAKS HERE
-    let(:upload) { subject.upload(options) }
-    let(:ssl) { double('ssl', verify: true) }
-    let(:chef) {
-      double('chef',
-    }
-    let(:berkshelf_config) { double('berks', ssl: ssl, chef: chef) }
-    let(:default_ridley_options) {
-    }
-      subject.stub(:resolve).and_return(solution: [], sources: [])
-    context 'when there is no :server_url' do
-      let(:chef) do
-        double('chef',
-          node_name: 'fake-client',
-          client_key: 'client-key',
-          chef_server_url: nil
-        )
-      end
-        expect {
-          upload
-        }.to raise_error(Berkshelf::ChefConnectionError, message)
-    context 'when there is no :client_name' do
-      let(:chef) do
-        double('chef',
-          node_name: nil,
-          client_key: 'client-key',
-          chef_server_url: 'http://configured-chef-server/'
-        )
-      end
-        expect {
-          upload
-        }.to raise_error(Berkshelf::ChefConnectionError, message)
-    context 'when there is no :client_key' do
-      let(:chef) do
-        double('chef',
-          node_name: 'fake-client',
-          client_key: nil,
-          chef_server_url: 'http://configured-chef-server/'
-        )
-      end
BREAKS HERE
-      # rubocop:enable Metrics/AbcSize
-      # rubocop:enable Metrics/AbcSize
BREAKS HERE
-#prospector_prefix = node['filebeat']['prospector']['prefix']
-
BREAKS HERE
-  default[:ruby][:patch_version] = '0'
-  default[:ruby][:patch] = 'p353'
-  default[:ruby][:patch] = 'p484'
BREAKS HERE
-  default['push_jobs']['service_string'] = 'runit_service[push-jobs-client]'
BREAKS HERE
-# Install package, dependent on platform
-node['nfs']['packages'].each do |nfspkg|
-  package nfspkg
-end
-
-# On FreeBSD, create the potentially missing configuration directory
-directory ::File.dirname(node['nfs']['config']['server_template']) do
-  mode 00755
-  action :create
-  only_if { node['platform_family'] == 'freebsd' }
-end
-
-# Configure NFS client components
-node['nfs']['config']['client_templates'].each do |client_template|
-  template client_template do
-    mode 00644
-    notifies :restart, 'service[rpcidmapd]'
-    notifies :restart, 'service[portmap]', :immediately
-    notifies :restart, 'service[nfslock]', :immediately
-  end
-end
-
-# Start NFS client components
-service 'portmap' do
-  service_name node['nfs']['service']['portmap']
-  provider node['nfs']['service_provider']['portmap']
-  action [:start, :enable]
-  supports status: true
-end
-
-service 'nfslock' do
-  service_name node['nfs']['service']['lock']
-  provider node['nfs']['service_provider']['lock']
-  action [:start, :enable]
-  supports status: true
-end
BREAKS HERE
-      sample_config = {:chef_node_name=>"mynode3", :chef_extension_root=>"./", :user_client_rb=>"", :log_location=>nil, :chef_server_url=>"https://api.opscode.com/organizations/clochefacc", :validation_client_name=>"clochefacc-validator", :secret=>nil}
-      sample_config = {:chef_node_name=>"mynode3", :chef_extension_root=>"./", :user_client_rb=>"", :log_location=>nil, :chef_server_url=>"https://api.opscode.com/organizations/clochefacc", :validation_client_name=>"clochefacc-validator", :secret=>nil}
BREAKS HERE
-case node['platform']
-when 'debian', 'ubuntu'
-when 'redhat', 'centos' 'fedora', 'amazon', 'scientific', 'oracle'
-  if node['drbd']['custom_repo'] != true
-  ['rhel', 'fedora', 'suse', 'amazon', 'scientific', 'oracle'] => ['kmod-drbd84', 'drbd84-utils'],
-  ['default', 'debian'] => ['drbd8-utils']
BREAKS HERE
-version          '1.5.1'
-depends 'homebrew', '~> 1.13'
-depends 'windows', '~> 1.37'
BREAKS HERE
-    desc "install", "Install the Cookbooks specified by a Berksfile or a Berskfile.lock."
BREAKS HERE
-          cookbook_locks = data["cookbook_locks"].inject({}) do |acc, (cookbook_name, cookbook_lock)|
-              "identifier" => cookbook_lock["identifier"]
-
-            acc[cookbook_name] = cookbook_lock
-
-            acc
BREAKS HERE
-        environment: aws_opsworks_app['environment'].merge('RAILS_ENV' => 'staging'),
BREAKS HERE
-        data['package-name'] = 'chef-push-server'
-        data['ctl-command'] = 'chef-push-ctl'
-        data['package-name'] = 'chef-push-client'
BREAKS HERE
-          path = Pathname.new(source_options[:path])
-          if !path.absolute?
-            path = Pathname.new(storage_config.relative_paths_root).join(path)
-          end
BREAKS HERE
-#  binding.pry
BREAKS HERE
-property :name, String, regex: %r(^[\w/-]+$), name_property: true # ~FC108
BREAKS HERE
-ilo_date_time 'set time zone, NTP, and NTP servers' do
-  use_ntp true
-  ntp_servers [
-    '1.1.1.1',
-    '2.2.2.2'
-  ]
BREAKS HERE
-  let(:expected_path) { [omnibus_bin_dir, user_bin_dir, omnibus_embedded_bin_dir, ENV['PATH']].join(File::PATH_SEPARATOR) }
-    let(:expected_path) { [omnibus_bin_dir, user_bin_dir, omnibus_embedded_bin_dir, ENV['PATH']].join(':').split(':').join('" "') }
BREAKS HERE
-  service node['rabbitmq']['service_name'] do
-    action [:enable, :start]
-  end
-
-  service node['rabbitmq']['service_name'] do
-    action [:enable, :start]
-  end
-  service node['rabbitmq']['service_name'] do
-    action [:enable, :start]
-  end
BREAKS HERE
-      url_string = new_resource.download_url
BREAKS HERE
-  new_resource.version.to_sym == :latest ? mixlib_install.available_versions.last : new_resource.version
-  # we have to "resolve" partial versions like "12" through mixlib-install before comparing them here
-  des_version =
-    if new_resource.download_url_override
-      # probably in an air-gapped environment.
-      Mixlib::Versioning.parse(desired_version)
-    else
-      Mixlib::Versioning.parse(Array(mixlib_install.artifact_info).first.version)
-    end
-  Chef::Log.debug("The current chef-client version is #{cur_version} and the desired version is #{desired_version}")
BREAKS HERE
-    rsyslog_servers = Array(node['rsyslog']['server_ip'])
-  rsyslog_servers = Array(node['rsyslog']['server_ip']) + Array(results)
BREAKS HERE
-      ) if !html.is_a?(Net::HTTPResponse)
-      n_prop.each do |k, v|
-      n_prop.delete_if { |k, v| !c_prop.include?(k) }
-        { '$location' => info['bundle_location'] }
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.62.1/}) }
BREAKS HERE
-  mode "400"
BREAKS HERE
-      banner "knife tidy backup clean (OPTIONS)"
BREAKS HERE
-attribute :resource_id, kind_of: [String, Array], regex: /(i|snap|vol)-[a-fA-F0-9]{8}/
-attribute :tags, kind_of: Hash, required: true
BREAKS HERE
-          'config-file'  => nil
-          },
-          'config-file'  => nil
-          'config-file'  => "/etc/supermarket/supermarket.rb"
-      node.run_state[:ingredient_config_data] ||= { }
-      node.run_state[:ingredient_config_data][product] ||= ""
-      node.run_state[:ingredient_config_data] ||= { }
-      node.run_state[:ingredient_config_data][product] ||= ""
BREAKS HERE
-version           "7.0.3"
BREAKS HERE
-include_recipe 'krb5::kdc'
-
-  command "echo #{node['krb5']['admin_password']} | kadmin.local -q 'addprinc #{node['krb5']['admin_principal']}'"
-  action :nothing
BREAKS HERE
-  
-                           :keys => {
-                             'hostname' => [ 'hostname' ],
-                             'fqdn'     => [ 'fqdn' ],
-                             'ipaddress' => [ 'ipaddress' ],
-                             'host_rsa_public' => [ 'keys', 'ssh', 'host_rsa_public' ],
-                             'host_dsa_public' => [ 'keys', 'ssh', 'host_dsa_public' ]
-                            {
-                              'fqdn' => host['fqdn'] || host['ipaddress'] || host['hostname'],
-                              'key' => host['host_rsa_public'] || host['host_dsa_public']
-                            }
BREAKS HERE
-      base = URI.parse(node['terraform']['url_base'])
-      zipfile = "terraform_#{node['terraform']['version']}_" \
-      "#{base}/#{version}/#{node['terraform']['zipfile']}"
BREAKS HERE
-property :name, String, name_property: true
-  name application_cleanname(desired.name).end_with?('/') ? application_cleanname(desired.name) : application_cleanname(desired.name) + '/'
-  cmd = shell_out("#{appcmd(node)} list vdir \"#{name.chomp('/') + path}\"")
-    result = cmd.stdout.match(/^VDIR\s\"#{Regexp.escape(name.chomp('/') + path)}\"/)
-      cmd = shell_out("#{appcmd(node)} list vdir \"#{name.chomp('/') + path}\" /config:* /xml")
-    new_resource.name.end_with?('/') ? new_resource.name : new_resource.name + '/'
BREAKS HERE
-    @entries = contents.collect do |line|
-      Entry.parse(line) unless line.strip.nil? || line.strip.empty?
-    end.compact
-      entry.aliases = [ entry.aliases, options[:hostname], options[:aliases] ].flatten.compact.uniq
-      entry.comment = [ entry.comment, options[:comment] ].compact.join(', ') unless entry.comment && entry.comment.include?(options[:comment])
-      remove_existing_hostnames
-
-    # This method ensures that hostnames/aliases and only used once. It
-    # doesn't make sense to allow multiple IPs to have the same hostname
-    # or aliases. This method removes all occurrences of the existing
-    # hostname/aliases from existing records.
-    # This method also intelligently removes any entries that should no
-    # longer exist.
-    def remove_existing_hostnames
-      new_entry = @entries.pop
-      changed_hostnames = [ new_entry.hostname, new_entry.aliases ].flatten.uniq
-
-      @entries = @entries.collect do |entry|
-        entry.hostname = nil if changed_hostnames.include?(entry.hostname)
-        entry.aliases = entry.aliases - changed_hostnames
-
-        if entry.hostname.nil?
-          if entry.aliases.empty?
-            nil
-            entry.hostname = entry.aliases.shift
-            entry
-        else
-          entry
-      end.compact
-
-      @entries << new_entry
BREAKS HERE
-    service_pass: service_pass
BREAKS HERE
-  only_if { 'lsmod kvm_intel' }
-  only_if { 'lsmod kvm' }
BREAKS HERE
-      unless klass.ancestors.include?(Chef::Mixin::ShellOut)
-        klass.class_eval { include Chef::Mixin::ShellOut }
-      end
BREAKS HERE
-property :name, String, name_property: true
BREAKS HERE
-        Berkshelf::CookbookStore.instance.satisfy(name, version_constraint)
BREAKS HERE
-          begin
-            resources(directory: node['chef_client'][dir])
-          rescue Chef::Exceptions::ResourceNotFound
-            directory node['chef_client'][dir] do
-              recursive true
-              mode '0755' if dir == 'log_dir'
-              owner d_owner
-              group node['root_group']
-            end
BREAKS HERE
-cassandra_version = "1.2.3"
-
-  :version => cassandra_version,
-  :tarball => {
-    :url => "http://www.eu.apache.org/dist/cassandra/#{cassandra_version}/apache-cassandra-#{cassandra_version}-bin.tar.gz",
-    :md5 => "8e02796b43e4d09a763f15758210519b"
-  },
BREAKS HERE
-node.default['sysctl']['params']['vm']['swappiness'] = 0
-include_recipe 'sysctl::apply'
BREAKS HERE
-yum_repository "CentOS-Debuginfo" do
-  action :remove
-end
-
-yum_repository "CentOS-Media" do
-  action :remove
-end
-
-yum_repository "CentOS-Vault" do
-  action :remove
-            f.each_line do |line|
-                if pattern.match(line)
-                    log file + ": gpgcheck=1 not properly configured" do
-                        level :error
-                    end
-                end
-            end
-                f.each_line do |line|
-                    if pattern.match(line)
-                        log file + ": gpgcheck=1 not properly configured" do
-                            level :error
-                        end
-                    end
-# remove yum automatic updates
-yum_package "yum-cron" do
-  action :purge
-end
-
-yum_package "yum-updatesd" do
-  action :purge
-end
-
-# remove non ssl servers
-yum_package "erase" do
-  action :purge
-end
-
-yum_package "xinetd" do
-  action :purge
-end
-
-yum_package "inetd" do
-  action :purge
-end
-
-yum_package "tftp-server" do
-  action :purge
-end
-
-yum_package "ypserv" do
-  action :purge
-end
-
-yum_package "telnet-server" do
-  action :purge
-end
-
-yum_package "rsh-server" do
-  action :purge
BREAKS HERE
-default['cassandra']['local_jmx'] = false
BREAKS HERE
-default['openssh']['server']['authorized_keys_file'] = ".ssh/authorized_keys"
BREAKS HERE
-        # list all resources already defined
-        run_context.resource_collection.
-          map(&:to_s).select { |resource_name| resource_name =~ event }.
-          each { |resource_name| setup_hook(resource_name, opts) }
-
BREAKS HERE
-    product_key_for_service = service_name.split('/').first
-    ctl_command || ctl_command_for_product(product_key_for_service)
-    service_name.split('/').last
BREAKS HERE
-service "#{node['rsyslog']['service_name']}" do
BREAKS HERE
-    #    - For each source, see if there exists a locked version
-    #      that still satisfies the version constraint in the Berksfile. If
BREAKS HERE
-          @env_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'), run_context)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-  context 'Sqlite3' do
-      node(deploy: { dummy_project: { database: { adapter: 'sqlite3' }, environment: 'staging' } })
BREAKS HERE
-directory  "#{node['tomcat']['endorsed_dir']}" do
-if not node['tomcat']['deploy_manager_apps']
-if not node['tomcat']["truststore_file"].nil?
-  node.set_unless['tomcat']['keystore_password'] = secure_password
-  node.set_unless['tomcat']['truststore_password'] = secure_password
-if not node['tomcat']["ssl_cert_file"].nil?
-  script "create_keystore" do
-    cwd "#{node['tomcat']['config_dir']}"
-    notifies :restart, resources(:service => "tomcat")
-  execute "Create SSL certificate" do
-    notifies :restart, resources(:service => "tomcat")
-if not node['tomcat']["truststore_file"].nil?
BREAKS HERE
-attribute :gpg_keyserver, :kind_of => String, :default => node['packagecloud']['gpg_keyserver']
-attribute :gpg_key,       :kind_of => String, :default => node['packagecloud']['gpg_key']
BREAKS HERE
-
-      context 'given multiple location options' do
-        it 'raises with an Berkshelf::BerkshelfError' do
-          expect {
-            described_class.new(berksfile, cookbook_name, path: '/something', git: 'something')
-          }.to raise_error(Berkshelf::BerkshelfError)
-        end
-      end
-
-      context 'given a group option containing a single group' do
-        let(:group) { :production }
-        let(:source) { described_class.new(berksfile, cookbook_name, group: group) }
-
-        it 'assigns the single group to the groups attribute' do
-          expect(source.groups).to include(group)
-        end
-      end
-
-      context 'given a group option containing an array of groups' do
-        let(:groups) { [ :development, :test ] }
-        let(:source) { described_class.new(berksfile, cookbook_name, group: groups) }
-
-        it 'assigns all the groups to the group attribute' do
-          expect(source.groups).to eq(groups)
-        end
-      end
-
-      context 'given no group option' do
-        let(:source) { described_class.new(berksfile, cookbook_name) }
-
-        it 'has the default group assigned' do
-          expect(source.groups).to include(:default)
-        end
-      end
BREAKS HERE
-  compile_time true if respond_to?(:compile_time)
BREAKS HERE
-    let(:raw_metadata_files) { [File::join(cached_cookbook.cookbook_name, 'metadata.rb')] }
-    let(:options)    { { :exclude => raw_metadata_files + Berkshelf::Berksfile::EXCLUDED_VCS_FILES_WHEN_VENDORING, delete: nil } }
-    it 'excludes the top-level metadata.rb file' do
-      expect(options[:exclude].any? { |exclude| File.fnmatch?(exclude, 'my_cookbook/metadata.rb', File::FNM_DOTMATCH) }).to be(true)
BREAKS HERE
-default[:opsworks_nodejs][:deb] = "nodejs-#{node[:opsworks_nodejs][:version]}-#{node[:opsworks_nodejs][:pkgrelease]}_#{arch}.deb"
-default[:opsworks_nodejs][:rpm] = "nodejs-#{node[:opsworks_nodejs][:version]}-#{node[:opsworks_nodejs][:pkgrelease]}.#{rhel_arch}.rpm"
BREAKS HERE
-if node['platform_family'] === 'windows'
-end
BREAKS HERE
-
-    let(:another_user) do
-      create(
-        :user,
-        first_name: 'Jane',
-        last_name: 'Doe',
-        email: 'jane@example.com'
-      )
-    end
-
-    let(:cookbook_follower) do
-      create(
-        :cookbook_follower,
-        user_id: another_user.id,
-        cookbook_id: cookbook.id
-      )
-    end
-
-    it 'sends an adoption email to cookbook followers' do
-      sign_in user
-      Sidekiq::Testing.inline! do
-        post :adoption, id: cookbook
-        expect(ActionMailer::Base.deliveries.map(&:to).flatten).to include(cookbook_follower.user.email)
-      end
-    end
-
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
BREAKS HERE
-                 'debian' => { '< 8.0' => 'libsss-sudo0' },
-                 'ubuntu' => { '< 13.04' => 'libsss-sudo0' }
-               )
BREAKS HERE
-    # Find the resource with the declared type and resource name.
-    def find_resource(type, name)
-      begin
-        return resource_collection.lookup("#{type}[#{name}]")
-      rescue Chef::Exceptions::ResourceNotFound; end
-
-      resource_collection.all_resources.find do |resource|
-        resource_name(resource) == type && (name === resource.identity || name === resource.name)
BREAKS HERE
-      :nrpe => node['nrpe']
BREAKS HERE
-  when "Ubuntu","Debian"
-  when "CentOS","RedHat","Fedora"
BREAKS HERE
-#include_recipe "nova::nova-scheduler-patch"
BREAKS HERE
-  windows_display_name node['windows']['display_name']
-  windows_package_url node['windows']['url']
-  windows_package_checksum node['windows']['checksum']
BREAKS HERE
-version          "0.2.6"
BREAKS HERE
-          .with_content('check process sidekiq_dummy_project-1')
-        expect(chef_run_rhel)
-          .to render_file("/etc/monit.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-          .with_content('with pidfile /run/lock/dummy_project/sidekiq_dummy_project-1.pid')
-            '-i 0 ' \
-            '-P /run/lock/dummy_project/sidekiq_dummy_project-1.pid ' \
-            'stop program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" bundle exec sidekiqctl stop ' \
-            '/run/lock/dummy_project/sidekiq_dummy_project-1.pid 8\'" with timeout 18 seconds'
-          .with_content('check process sidekiq_dummy_project-2')
-        expect(chef_run_rhel)
-          .to render_file("/etc/monit.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-          .with_content('with pidfile /run/lock/dummy_project/sidekiq_dummy_project-2.pid')
-            '-i 1 ' \
-            '-P /run/lock/dummy_project/sidekiq_dummy_project-2.pid ' \
-            'stop program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" bundle exec sidekiqctl stop ' \
-            '/run/lock/dummy_project/sidekiq_dummy_project-2.pid 8\'" with timeout 18 seconds'
-          .with_content('check process sidekiq_dummy_project-1')
-        expect(chef_run)
-          .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-          .with_content('with pidfile /run/lock/dummy_project/sidekiq_dummy_project-1.pid')
-            '-i 0 ' \
-            '-P /run/lock/dummy_project/sidekiq_dummy_project-1.pid ' \
-            'stop program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" bundle exec sidekiqctl stop ' \
-            '/run/lock/dummy_project/sidekiq_dummy_project-1.pid 8\'" with timeout 18 seconds'
-          .with_content('check process sidekiq_dummy_project-2')
-        expect(chef_run)
-          .to render_file("/etc/monit/conf.d/sidekiq_#{aws_opsworks_app['shortname']}.monitrc")
-          .with_content('with pidfile /run/lock/dummy_project/sidekiq_dummy_project-2.pid')
-            '-i 1 ' \
-            '-P /run/lock/dummy_project/sidekiq_dummy_project-2.pid ' \
-            'stop program = "/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-            'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" bundle exec sidekiqctl stop ' \
-            '/run/lock/dummy_project/sidekiq_dummy_project-2.pid 8\'" with timeout 18 seconds'
BREAKS HERE
-    it { should validate_uniqueness_of(:version).scoped_to(:cookbook_id) }
BREAKS HERE
-        unless @current_resource.exists? and @current_resource == @new_resource
BREAKS HERE
-property :path, String, default: nil
-def install_path
-  if path
-    path
-    @@install_path ||= "/opt/tomcat_#{instance_name}_#{version.tr('.', '_')}/"
-  cmd = "tar -xzf #{Chef::Config['file_cache_path']}/apache-tomcat-#{version}.tar.gz -C #{install_path} --strip-components=1"
-    path install_path
-    creates ::File.join(install_path, 'LICENSE')
-    command "chown -R tomcat_#{instance_name}:root #{install_path}"
-    not_if { Etc.getpwuid(::File.stat("#{install_path}/LICENSE").uid).name == "tomcat_#{instance_name}" }
-    to install_path
BREAKS HERE
-        begin
-          @dog.emit_point("chef.resources.total", run_status.all_resources.length, :host => hostname)
-          @dog.emit_point("chef.resources.updated", run_status.updated_resources.length, :host => hostname)
-          @dog.emit_point("chef.resources.elapsed_time", run_status.elapsed_time, :host => hostname)
-          Chef::Log.debug("Submitted chef metrics back to Datadog")
-        rescue Errno::ECONNREFUSED, Errno::ETIMEDOUT => e
-          Chef::Log.error("Could not send metrics to Datadog. Connection error:\n" + e)
-        end
BREAKS HERE
-version '2.2.5'
BREAKS HERE
-  link File.join(deploy_dir(application), 'shared', 'pids') do
BREAKS HERE
-  comp.stdout.include? ("#{new_resource.name}") or comp.stdout.include? ("#{new_resource.name}.upcase")
BREAKS HERE
-  r = directory "#{new_resource.cert_path}/certs" do
-    owner new_resource.owner
-    group new_resource.group
-    mode "0755"
-    recursive true
-    not_if "test -d #{new_resource.cert_path}/certs"
-  end
-  new_resource.updated_by_last_action(true) if r.updated_by_last_action?
-
-  r = directory "#{new_resource.cert_path}/private" do
-    owner new_resource.owner
-    group new_resource.group
-    mode "0750"
-    recursive true
-    not_if "test -d #{new_resource.cert_path}/private"
-  end
-  new_resource.updated_by_last_action(true) if r.updated_by_last_action?
-
-  r = template "#{new_resource.cert_path}/certs/#{new_resource.cert_file}" do
-    source "blank.erb"
-    cookbook new_resource.cookbook 
-    mode "0644"
-    owner new_resource.owner
-    group new_resource.group
-    variables(:file_content => ssl_item['cert'])
-  end
-  new_resource.updated_by_last_action(true) if r.updated_by_last_action?
-  r = template "#{new_resource.cert_path}/private/#{new_resource.key_file}" do
-    source "blank.erb"
-    cookbook new_resource.cookbook
-    mode "0640"
-    variables(:file_content => ssl_item['key'])
-    only_if { ssl_item['key'] }
-  r = template "#{new_resource.cert_path}/certs/#{new_resource.chain_file}" do
-    mode "0644"
-    variables(:file_content => ssl_item['chain'])
-    only_if { ssl_item['chain'] }
BREAKS HERE
-default['openresty']['source']['version']   = '1.2.6.5'
-default['openresty']['source']['checksum']  = '14d984de27bce44808a775cc3277912b38e95cded0099d884705fb648b06a246'
-default['openresty']['open_files']                    = 16384
BREAKS HERE
-default['openstack']['mq']['block-storage']['notification_topic'] = 'notifications'
BREAKS HERE
-  @full_path = "/var/db/ports/#{name}/options"
BREAKS HERE
-      git_null('status -s').strip.empty?
BREAKS HERE
-        if Spiceweasel::Config[:knifeconfig]
-          Spiceweasel::Config[:knife_options] = "-c #{Spiceweasel::Config[:knifeconfig]} "
-        if Spiceweasel::Config[:serverurl]
-          Spiceweasel::Config[:knife_options] += "--server-url #{Spiceweasel::Config[:serverurl]} "
BREAKS HERE
-# Whether or not we want to disable offloading
-# on all the NIC interfaces (currently only supports
-# ubuntu and debian).  This can help if openvswitch
-# or nicira plugins are crashing the sdn routers
-default['openstack']['network']['disable_offload'] = false
-
-# configure neutron ha tool installation parameters
-default['openstack']['network']['neutron_ha_cmd_cron'] = false
-default['openstack']['network']['neutron_ha_cmd'] = '/usr/local/bin/neutron-ha-tool.py'
-default['openstack']['network']['cron_l3_healthcheck'] = '*/1'
-default['openstack']['network']['cron_replicate_dhcp'] = '*/1'
-
BREAKS HERE
-  Chef::Log.debug("Determining share state by running #{share_state_cmd}")
-      Chef::Log.debug('current resource was nil so we will create')
-      Chef::Log.debug('current resource was not nil so we will update')
-    Chef::Log.debug("Checking if the path of #{new_resource.share_name} differs")
-      if permissions_need_update?(perm_type)
-        grant_command = "Grant-SmbShareAccess -Name \"#{new_resource.share_name}\" -AccountName \"#{new_resource.send("#{perm_type}_users").join(',')}\" -Force -AccessRight #{perm_type}"
-        Chef::Log.debug("Running '#{grant_command}' to update the share permissions")
-        powershell_out!(grant_command)
-      end
BREAKS HERE
-        [source.location.download(storage_path), source.location]
BREAKS HERE
-xvpvnc_proxy_ip = address_for node['openstack']['compute']['xvpvnc_proxy']['bind_interface']
-novnc_proxy_ip = address_for node['openstack']['compute']['novnc_proxy']['bind_interface']
-    xvpvncproxy_bind_host: xvpvnc_proxy_ip,
-    novncproxy_bind_host: novnc_proxy_ip,
BREAKS HERE
-  only_if File.readlines("/etc/init/nova-vncproxy.conf").grep(/exec.*nova$/).size > 0
BREAKS HERE
-default['java']['oracle']['accep_oracle_download_terms'] = true
BREAKS HERE
-user = ENV['SUDO_USER'] || ENV['USER'] || 'vagrant'
-default['bcpc']['bootstrap']['admin']['user'] = user
BREAKS HERE
-    notifies :restart, 'service[apache2]'
BREAKS HERE
-                mysql -u root -p#{get_config('mysql-root-password')} -e "GRANT PROCESS ON *.* to #{get_config('mysql-check-user')}@'localhost' IDENTIFIED BY '#{get_config('mysql-check-password')}';"
BREAKS HERE
-  default[:ruby][:patch] = 'p247'
-  default[:ruby][:patch] = 'p448'
BREAKS HERE
-  if node[recipe] && node[recipe]['firewall'] && node[recipe]['firewall']['rules']
-    rules = node[recipe]['firewall']['rules']
-    Chef::Log.debug "ufw::recipes:#{recipe}:rules #{rules}"
-    node.set['firewall']['rules'].concat(rules) unless rules.nil?
-  end
BREAKS HERE
-    def self.load(paths, with_repl)
-
-      # Drop into the REPL for exploratory rule development.
-      dsl.instance_eval { binding.pry } if with_repl
-
BREAKS HERE
-  case node['platform_family']
-  when 'fedora', 'rhel'
-    ovs['path'] =
-      '/etc/neutron/plugins/openvswitch'
-    ovs['filename'] =
-      'ovs_neutron_plugin.ini'
-  when 'debian'
-    ovs['path'] =
-      '/etc/neutron/plugins/ml2'
-    ovs['filename'] =
-      'openvswitch_agent.ini'
-  end
BREAKS HERE
-  default['powershell']['winrm']['thumbprint'] = ''		# mandatory for https transport
BREAKS HERE
-if node['hadoop']['distribution'] == 'hdp' && node['hadoop']['distribution_version'].to_f = 2.2
BREAKS HERE
-    fail "Missing source for #{i} entry at '#{new_resource.name}" if v[:source].nil?
-    fail "Missing destination for #{i} entry at '#{new_resource.name}" if v[:destination].nil?
BREAKS HERE
-directory ssl_directory
BREAKS HERE
-    if URI.unescape(resp.role.assume_role_policy_document) == JSON.dump(JSON.parse(new_resource.assume_role_policy_document))
-      false
-    else
-      true
-    end
BREAKS HERE
-  if node["bcpc"]["hadoop"]["hbase"]["shortcircuit"]["read"] == true then
-    site_xml['dfs.domain.socket.path'] =  i'/var/run/hadoop-hdfs/dn._PORT'
-    site_xml['dfs.client.read.shortcircuit.buffer.size'] = node["bcpc"]["hadoop"]["hbase"]["dfs"]["client"]["read"]["shortcircuit"]["buffer"]["size"].to_s
-  end
-  if node["bcpc"]["hadoop"]["hbase"]["bucketcache"]["enabled"] == true then
-    site_xml['hbase.regionserver.global.memstore.upperLimit'] = node["bcpc"]["hadoop"]["hbase_rs"]["memstore"]["upperlimit"].to_s
-    site_xml['hfile.block.cache.size'] = node["bcpc"]["hadoop"]["hbase"]["blockcache"]["size"].to_s
-    site_xml['hbase.bucketcache.size'] = bucketcache_size
-    site_xml['hbase.bucketcache.ioengine '] = node["bcpc"]["hadoop"]["hbase"]["bucketcache"]["ioengine"]
-    site_xml['hbase.bucketcache.combinedcache.enabled'] = true
-  end
-  if node["bcpc"]["hadoop"]["hbase"]["region"]["replication"]["enabled"] == true then
-    site_xml['hbase.regionserver.storefile.refresh.period'] = node["bcpc"]["hadoop"]["hbase_rs"]["storefile"]["refresh"]["period"]
-    site_xml['hbase.region.replica.replication.enabled'] = node["bcpc"]["hadoop"]["hbase"]["region"]["replication"]["enabled"]
-    site_xml['hbase.master.hfilecleaner.ttl'] = node["bcpc"]["hadoop"]["hbase_master"]["hfilecleaner"]["ttl"]
-    site_xml['hbase.meta.replica.count'] = node["bcpc"]["hadoop"]["hbase"]["meta"]["replica"]["count"]
-    site_xml['hbase.regionserver.storefile.refresh.all'] = node["bcpc"]["hadoop"]["hbase_rs"]["storefile"]["refresh"]["all"]
-    site_xml['hbase.region.replica.storefile.refresh.memstore.multiplier'] = node["bcpc"]["hadoop"]["hbase"]["region"]["replica"]["storefile"]["refresh"]["memstore"]["multiplier"]
-    site_xml['hbase.region.replica.wait.for.primary.flush'] = node["bcpc"]["hadoop"]["hbase"]["region"]["replica"]["wait"]["for"]["primary"]["flush"]
-    site_xml['hbase.regionserver.global.memstore.lowerLimit'] = node["bcpc"]["hadoop"]["hbase_rs"]["memstore"]["lowerlimit"]
-    site_xml['hbase.hregion.memstore.block.multiplier'] = node["bcpc"]["hadoop"]["hbase"]["hregion"]["memstore"]["block"]["multiplier"]
-    site_xml['hbase.ipc.client.specificThreadForWriting'] = node["bcpc"]["hadoop"]["hbase"]["ipc"]["client"]["specificthreadforwriting"]
-    site_xml['hbase.client.primaryCallTimeout.get'] = node["bcpc"]["hadoop"]["hbase"]["client"]["primarycalltimeout"]["get"]
-    site_xml['hbase.client.primaryCallTimeout.multiget'] = node["bcpc"]["hadoop"]["hbase"]["client"]["primarycalltimeout"]["multiget"]
-  end
BREAKS HERE
-default['openldap']['syncrepl_config']['credentials'] = nil
BREAKS HERE
-      package package_name do
-        version package_version if package_version
-        options package_options if package_options
-      package package_name do
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.67.0/}) }
BREAKS HERE
-      return Chef::DataCollector::Messages.node_uuid
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
-depends 'openstack-image', '>= 15.0.0'
-depends 'openstack-compute', '>= 15.0.0'
-depends 'openstack-block-storage', '>= 15.0.0'
BREAKS HERE
-    # @option options [Array<Berkshelf::Dependency>, Berkshelf::Dependency] sources
-      @berksfile  = berksfile
-      @downloader = berksfile.downloader
-      @graph      = Solve::Graph.new
-      @sources    = Hash.new
-
-      # Dependencies need to be added AFTER the sources. If they are
-      # not, then one of the dependencies of a source that is added
-      # may take precedence over an explicitly set source that appears
-      Array(options[:sources]).each do |source|
-        add_source(source, false)
-        Array(options[:sources]).each do |source|
-          add_source_dependencies(source)
-    # Add the given source to the collection of sources for this instance
-    # of Resolver. By default the dependencies of the given source will also
-    # be added as sources to the collection.
-    # @param [Berkshelf::Dependency] source
-    #   source to add
-    #   adds the dependencies of the given source as sources to the collection of
-    def add_source(source, include_dependencies = true)
-      if has_source?(source)
-        raise DuplicateSourceDefined, "A source named '#{source.name}' is already present."
-      @sources[source.name] = source
-      use_source(source) || install_source(source)
-      graph.artifacts(source.name, source.cached_cookbook.version)
-        add_source_dependencies(source)
-      sources
-    # Add the dependencies of the given source as sources in the collection of sources
-    # on this instance of Resolver. Any dependencies which already have a source in the
-    # collection of sources of the same name will not be added to the collection a second
-    # @param [Berkshelf::Dependency] source
-    #   source to convert dependencies into sources
-    def add_source_dependencies(source)
-      source.cached_cookbook.dependencies.each do |name, constraint|
-        next if has_source?(name)
-        add_source(Berkshelf::Dependency.new(berksfile, name, constraint: constraint))
-    def sources
-      @sources.collect { |name, source| source }
-    # Finds a solution for the currently added sources and their dependencies and
-          cached_cookbooks << get_source(name).cached_cookbook
-    # @param [Berkshelf::Dependency, #to_s] source
-    #   name of the source to return
-    def [](source)
-      if source.is_a?(Berkshelf::Dependency)
-        source = source.name
-      @sources[source.to_s]
-    alias_method :get_source, :[]
-    # @param [CoobookSource, #to_s] source
-    #   the source to test if the resolver has added
-    def has_source?(source)
-      !get_source(source).nil?
-      # @param [Berkshelf::Dependency] source
-      def install_source(source)
-        cached_cookbook, location = downloader.download(source)
-        Berkshelf.formatter.install(source.name, cached_cookbook.version, location)
-      # Use the given source to create a constraint solution if the source has been downloaded or can
-      # @note Git location sources which have not yet been downloaded will not be satisfied by a
-      # @param [Berkshelf::Dependency] source
-      def use_source(source)
-        name       = source.name
-        constraint = source.version_constraint
-        location   = source.location
-        if source.downloaded?
-          cached = source.cached_cookbook
-            get_source(source).cached_cookbook = cached
BREAKS HERE
-imagery_layer "gb_os_sv_2015-05" do
BREAKS HERE
-default_package_url = "https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v#{version}/"
BREAKS HERE
-default['graylog2']['server']['install_tzdata_java']      = true
BREAKS HERE
-default['icinga2']['install_nagios_plugins'] = true
BREAKS HERE
-# reference that here.
BREAKS HERE
-          :severity, arg,
BREAKS HERE
-#TODO: fix backup
-#package "ruby1.9.1-dev" do
-#  action :install
-#end
-#needed for nokogiri
-
-%w{libxml2-dev libxslt-dev}.each do |pkg|
-  package pkg do
-    action :install
-  end
-end
-
-gem_package "fog" do
-  version "> 1.9.0"
-end
-  store_with({"engine" => "Local", "settings" => { "local.path" => "/opt/backup", "local.keep" => "5", } } )
-  #store_with({"engine" => "S3", "settings" => { "s3.access_key_id" => "1c6c6f540fba4f3fa62dc69233a454f2", "s3.secret_access_key" => "370d72a9aba54e66bbc2fdf110e06e08", "s3.provider" => "http://s3.eden.klm.com/", "s3.region" => "", "s3.bucket" => "sample", "s3.path" => "/", "s3.keep" => 10 } } )
BREAKS HERE
-    unless d && !d.empty?
BREAKS HERE
-    mycert   = ::OpenSSL::X509::Certificate.new ::File.read new_resource.crt
BREAKS HERE
-        Paperclip::Attachment.default_options[:storage] = 's3'
BREAKS HERE
-  elsif joined_cluster?(var_node_name, var_cluster_status)
-    Chef::Log.warn("[rabbitmq_cluster] Node is already member of #{current_cluster_name(var_cluster_status)}. Joining cluster will be skipped.")
BREAKS HERE
-          exec!("cd #{path}/#{cb} && #{@berks} install && #{@berks} upload",
-                @logger)
-            exec!("cd #{path}/#{cb} && #{@berks} update && #{@berks} upload",
-              @logger)
BREAKS HERE
-            package_name "e2fsprogs"
BREAKS HERE
-  mode   00644
BREAKS HERE
-  if node['platform'] != "amazon" && (node['platform_version'].to_i == 7 || node['platform_version'].to_i >= 19)
BREAKS HERE
-      def get_iis_version
-
-      def default_documents(default_document, default_documents_enabled, add = true, remove = true, specifier = '')
-        cmd = shell_out get_default_documents_command specifier
-        if cmd.stderr.empty?
-          xml = cmd.stdout
-          doc = Document.new xml
-
-          is_new_default_documents_enabled = new_value?(doc.root, 'CONFIG/system.webServer-defaultDocument/@enabled', default_documents_enabled.to_s)
-          current_default_documents = XPath.match(doc.root, 'CONFIG/system.webServer-defaultDocument/files/add/@value').map(&:value)
-          cmd = set_default_documents_command specifier
-
-          if is_new_default_documents_enabled
-            cmd << " /enabled:#{default_documents_enabled}"
-          end
-
-          if add || remove
-            default_document.each do |document|
-              if !current_default_documents.include?(document) && add
-                cmd << " /+files.[value='#{document}']"
-              elsif current_default_documents.include?(document) && remove
-                cmd << " /-files.[value='#{document}']"
-              end
-            end
-          end
-
-          if add && remove
-            current_default_documents.each do |document|
-              unless default_document.include? document
-                cmd << " /-files.[value='#{document}']"
-              end
-            end
-          end
-
-          if (cmd != set_default_documents_command(specifier))
-            shell_out! cmd
-            Chef::Log.info('Default Documents updated')
-            was_updated = true
-          end
-        end
-      end
-
-      def mime_maps(new_resource_mime_maps, add = true, remove = true, specifier = '')
-        # handles mime maps
-        cmd = shell_out get_mime_map_command specifier
-        if cmd.stderr.empty?
-          xml = cmd.stdout
-          doc = Document.new xml
-          current_mime_maps = XPath.match(doc.root, 'CONFIG/system.webServer-staticContent/mimeMap').map { |x| "fileExtension='#{x.attribute 'fileExtension'}',mimeType='#{x.attribute 'mimeType'}'" }
-
-          cmd = set_mime_map_command specifier
-
-          if add || remove
-            new_resource_mime_maps.each do |mime_map|
-              if !current_mime_maps.include? mime_map && add
-                cmd << " /+\"[#{mime_map}]\""
-              elsif current_mime_maps.include? mime_map && remove
-                cmd << " /-\"[#{mime_map}]\""
-              end
-            end
-          end
-
-          if add && remove
-            current_mime_maps.each do |mime_map|
-              unless new_resource_mime_maps.include? mime_map
-                cmd << " /-\"[#{mime_map}]\""
-              end
-            end
-          end
-
-          if (cmd != set_mime_map_command(specifier))
-            shell_out! cmd
-            Chef::Log.info('mime maps updated')
-            was_updated = true
-          end
-        end
-      end
-
-      private
-
-      def get_default_documents_command(specifier = '')
-        "#{appcmd(node)} list config #{specifier} /section:defaultDocument /config:* /xml"
-      end
-
-      def set_default_documents_command(specifier = '')
-        "#{appcmd(node)} set config #{specifier} /section:defaultDocument"
-      end
-
-      def get_mime_map_command(specifier = '')
-        "#{appcmd(node)} list config #{specifier} /section:staticContent /config:* /xml"
-      end
-
-      def set_mime_map_command(specifier = '')
-        "#{appcmd(node)} set config #{specifier} /section:staticContent"
-      end
BREAKS HERE
-template "#{node['apache']['dir']}/sites-available/kibana" do
BREAKS HERE
-      @patch_names ||= case nt_version
-        when 5.1, 5.2
-        when 6.0, 6.1
-          { '4.6' => %w(KB3083186) }
-        when 6.2
-          { '4.6' => %w(KB3083184) }
-        when 6.3
-          { '4.6' => %w(KB3083185) }
-        when /^5.0/, /^5.1/ then %w(4.0)
-        when /^6.0/ then %w(4.0 4.5 4.5.1 4.5.2 4.6)
-        when /^6.1/ then %w(4.0 4.5 4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1)
-        when /^6.2/ then %w(4.5.1 4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1)
-        when /^6.3/ then %w(4.5.2 4.6 4.6.1 4.6.2 4.7 4.7.1)
BREAKS HERE
-  - name: ubuntu-14.04
-  - name: centos-7.1
BREAKS HERE
-# Define if the update recipe should install downloaded update or not
-default['wsus_client']['download_only'] = false
BREAKS HERE
-    let(:server_url) { "https://api.opscode.com/organizations/vialstudios" }
-    let(:client_key) { '/Users/reset/.chef/reset.pem' }
-    let(:node_name) { 'reset' }
-          cookbook.should_receive(:checksums).and_return("da97c94bb6acb2b7900cbf951654fea3"=>"/Users/reset/code/berkshelf/spec/fixtures/cookbooks/example_cookbook-0.5.0/recipes/default.rb")
BREAKS HERE
-  include_recipe "build-essential::#{node['platform_family']}"
BREAKS HERE
-    Chef::Log.info("*****#{dn}******")
-    Chef::Log.info("*****#{cmd}******")
BREAKS HERE
-Chef::Log.info "^^^^^^^^^ node['prometheus']['rule_filenames']: #{node['prometheus']['rule_filenames'].inspect}"
-
BREAKS HERE
-      contains "gem 'vagrant'"
BREAKS HERE
-require 'chef/cookbook/chefignore'
-require 'chef/util/path_helper'
-      filename = 'chefignore'
-          dir.join('cookbooks', filename),
-          dir.join('.chef',     filename),
BREAKS HERE
-license 'Apache 2.0'
BREAKS HERE
-      opts << '--icc=true' if new_resource.icc
BREAKS HERE
-version           '9.1.0'
BREAKS HERE
-          with_retries { container Docker::Container.get(container_name, connection) }
BREAKS HERE
-        command: command,
-        options: options,
-        loglevel: node['consul_template']['log_level']
-        command: command,
-        options: options
BREAKS HERE
-default['postfixadmin']['version'] = '2.3.7'
-  '761074e711ab618deda425dc013133b9d5968e0859bb883f10164061fd87006e'
BREAKS HERE
-set_unless[:postfix][:mail_type]  = "client"
-set_unless[:postfix][:myhostname] = fqdn
-set_unless[:postfix][:mydomain]   = domain
-set_unless[:postfix][:myorigin]   = "$myhostname"
-set_unless[:postfix][:relayhost]  = ""
-set_unless[:postfix][:mail_relay_networks] = "127.0.0.0/8"
-set_unless[:postfix][:smtp_sasl_auth_enable] = "no"
-set_unless[:postfix][:smtp_sasl_password_maps]    = "hash:/etc/postfix/sasl_passwd"
-set_unless[:postfix][:smtp_sasl_security_options] = "noanonymous"
-set_unless[:postfix][:smtp_tls_cafile] = "/etc/postfix/cacert.pem"
-set_unless[:postfix][:smtp_use_tls]    = "yes"
-set_unless[:postfix][:smtp_sasl_user_name] = ""
-set_unless[:postfix][:smtp_sasl_passwd]    = ""
BREAKS HERE
-version          "7.2.1"
BREAKS HERE
-auth_uri = ::URI.decode identity_admin_endpoint.to_s
BREAKS HERE
-      expect(cron.command).to match(/\/usr\/local\/bin\/cinder-volume-usage-audit/)
-      expect(cron.command).to match(/\/var\/log\/cinder\/audit.log/)
-      expect(cron.minute).to eq "00"
-      expect(cron.hour).to eq "*"
-      expect(cron.day).to eq "*"
-      expect(cron.weekday).to eq "*"
-      expect(cron.month).to eq "*"
-      expect(cron.user).to eq "cinder"
-        n.set["openstack"]["block-storage"]["cron"]["minute"] = 50
-        n.set["openstack"]["block-storage"]["cron"]["hour"] = 23
-        n.set["openstack"]["block-storage"]["cron"]["day"] = 6
-        n.set["openstack"]["block-storage"]["cron"]["weekday"] = 5
-        n.set["openstack"]["block-storage"]["cron"]["month"] = 11
-      expect(cron.minute).to eq "50"
-      expect(cron.hour).to eq "23"
-      expect(cron.day).to eq "6"
-      expect(cron.weekday).to eq "5"
-      expect(cron.month).to eq "11"
-      expect(cron.user).to eq "foobar"
BREAKS HERE
-service_pass = service_password 'openstack-orchestration'
BREAKS HERE
-
-      # Return the checksum of the contents of the file at the given filepath
-      #
-      # @param [String] path
-      #   file to checksum
-      #
-      # @return [String]
-      #   the binary checksum of the contents of the file
-      def checksum(path)
-        File.open(path, 'rb') { |f| checksum_io(f, Digest::MD5.new) }
-      end
-
-      # Checksum and encode the file at the given filepath for uploading
-      #
-      # @param [String] path
-      #
-      # @return [String]
-      #   a base64 encoded checksum
-      def checksum64(path)
-        Base64.encode64([checksum(path)].pack("H*")).strip
-      end
-
-      # @param [String] io
-      # @param [Object] digest
-      #
-      # @return [String]
-      def checksum_io(io, digest)
-        while chunk = io.read(1024 * 8)
-          digest.update(chunk)
-        end
-        digest.hexdigest
-      end
-    def checksum(chk_id)
-      checksums.fetch(chk_id.to_sym)
-    end
-
-    # Concurrently upload multiple files into a sandbox
-    # @param [Hash] checksums
-    #   a hash of file checksums and file paths
-    # @example uploading multiple checksums
-    #   sandbox.multi_upload(
-    #     "e5a0f6b48d0712382295ff30bec1f9cc" => "/Users/reset/code/rbenv-cookbook/recipes/default.rb",
-    #     "de6532a7fbe717d52020dc9f3ae47dbe" => "/Users/reset/code/rbenv-cookbook/recipes/ohai_plugin.rb"
-    #   )
-    def multi_upload(checksums)
-      checksums.collect do |chk_id, path|
-        future.upload(chk_id, path)
-      end.map(&:value)
-    # Upload one file into the sandbox for the given checksum id
-    #
-    # @param [String] chk_id
-    #   checksum of the file being uploaded
-    # @param [String] path
-    #   path to the file to upload
-    #
-    # @return [Hash, nil]
-    def upload(chk_id, path)
-      checksum = self.checksum(chk_id)
-      
-      unless checksum[:needs_upload]
-        return nil
-      end
-
-      headers  = {
-        'Content-Type' => 'application/x-binary',
-        'content-md5' => self.class.checksum64(path)
-      }
-      contents = File.open(path, 'rb') { |f| f.read }
-
-      # Hosted Chef returns Amazon S3 URLs for where to upload
-      # checksums to. OSS Chef Server and Hosted Chef return URLs
-      # to the same Chef API that the Sandbox creation request was
-      # sent to.
-      #
-      # The client object is duplicated to ensure all of our client
-      # settings persist, but the scheme, host, and port are set to the
-      # value of the given checksum.
-      conn = client.send(:conn).dup
-
-      url         = URI(checksum[:url])
-      upload_path = url.path
-      url.path    = ""
-
-      conn.url_prefix = url.to_s
-
-      conn.put(upload_path, contents, headers)
-
-    private
-
-      attr_reader :client
BREAKS HERE
-    'elasticserach_hosts' => node['kibana']['elasticsearch']['hosts']
BREAKS HERE
-          @log_main_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log', 'main'), run_context)
-              d.recursive(true)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-      not_if 'systemctl list-unit-files iptables.service | grep -q enabled'
-      not_if 'systemctl list-unit-files ip6tables.service | grep -q enabled'
-      not_if 'systemctl is-active iptables.service | grep -q active'
-      not_if 'systemctl is-active ip6tables.service | grep -q active'
-  if node['stig']['network']['ipv6'] == 'no'
-    ipv6 = 1
-    ipv6onoff = 'off'
-  else
-    ipv6 = 0
-    ipv6onoff = 'on'
-  end
-
-
-  execute 'chkconfig_ip6tables_off' do
-    user 'root'
-    command "/sbin/chkconfig ip6tables #{ipv6onoff}"
-    only_if { node['platform_version'][0, 1].to_i < 7 }
-    not_if "chkconfig --list ip6tables  | grep -q '2:#{ipv6onoff}'"
-    not_if "chkconfig --list ip6tables  | grep -q '3:#{ipv6onoff}'"
-    not_if "chkconfig --list ip6tables  | grep -q '4:#{ipv6onoff}'"
-    not_if "chkconfig --list ip6tables  | grep -q '5:#{ipv6onoff}'"
-  end
BREAKS HERE
-        Chef::Log.debug(
-          "Unified new resource properties: #{new_resource.properties}"
-        )
-        Chef::Log.debug("#{new_resource.factory_pid} exists? #{fpid_exists}")
BREAKS HERE
-      @slave_exe_resource.notifies(:restart, "service[#{new_resource.service_name}]")
-      @slave_xml_resource.notifies(:restart, "service[#{new_resource.service_name}]")
BREAKS HERE
-    it 'upgrades ironic api packages' do
-      expect(chef_run).to upgrade_package('ironic-conductor')
BREAKS HERE
-if first_etcd.nil?
-  Chef::Log.error('first_etcd not set')
-  node.run_state['issues_detected'] = true
-  only_if { node['cookbook-openshift3']['openshift_HA'] }
BREAKS HERE
-    # storage_path of this instance of CookbookStore. Passing the filter
-    # option will return only the CachedCookbooks whose name match the
-    # filter.
BREAKS HERE
-checksum   = Digest::MD5.hexdigest(node['fqdn'] or 'unknown-hostname')
BREAKS HERE
-default['icinga2']['version'] = '2.5.4-1'
BREAKS HERE
-
BREAKS HERE
-          :log_duration, arg,
BREAKS HERE
-    log "Failed to run iis_vdir action :load_current_resource, #{cmd.stderr}" do
-      level :warn
-    end
BREAKS HERE
-      CookbookMailer.follower_notification_email(cookbook_version, cookbook_follower.user).deliver
BREAKS HERE
-  search_id = new_resource.search_id.gsub('.', '_')
BREAKS HERE
-      source new_resource.source ? new_resource.source : "#{new_resource.name}.erb"
BREAKS HERE
-  node.override['build-essential']['compile_time'] = true
-
-  include_recipe 'build-essential::default'
BREAKS HERE
-version          '1.2.00'
BREAKS HERE
-        "cookbook 'bluepill', :locked_version => '1.0.6'",
-        "cookbook 'build-essential', :locked_version => '1.1.0'", 
BREAKS HERE
-                          cookbook_tags(p[:filename])
-    def cookbook_tags(file)
-      fc_file = @options[:rule_file] || "#{cookbook_dir(file)}/.foodcritic"
-      if File.exist? fc_file
-        begin
-          tag_text = File.read fc_file
-          tags = tag_text.split(/\s/)
-        rescue Errno::EACCES
-        end
BREAKS HERE
-    
-    
-        
-        
-        headers = { 
-        
BREAKS HERE
-rabbit_ip = IPManagement.get_ips_for_role("rabbitmq-server", "nova", node)[0] # FIXME: we need to be able to specify foreign endpoints.  Nova?
-xvpvnc_endpoint = get_access_endpoint("nova-vncproxy", "nova", "xvpvnc")
-novnc_endpoint = get_access_endpoint("nova-vncproxy", "nova", "novnc-server")
-nova_api_endpoint = get_access_endpoint("nova-api-os-compute", "nova", "api")
-ec2_public_endpoint = get_access_endpoint("nova-api-ec2", "nova", "ec2-public")
BREAKS HERE
-default['postfixadmin']['checksum'] = 'ea505281b6c04bda887eb4e6aa6c023b354c4ef4864aa60dcb1425942bf2af63'
BREAKS HERE
-if %w[rhel fedora centos].include?(node['platform'])
-  source = 'etc_main.cf_rhel.erb'
-end
-if %w[debian ubuntu].include?(node['platform'])
-  source = 'etc_main.cf_ubuntu.erb'
-end
BREAKS HERE
-      java_version = jvm_version_mapper(major + '.'+ minor)
-        jvm_version_changed?(decryptor_path)
BREAKS HERE
-    not_if { "#{repo_dir}/.gitignore" }
BREAKS HERE
-        'enabled' => 'true',
-        'port' => 'ssh',
-        'filter' => 'sshd',
-        'logpath' => node['fail2ban']['auth_log'],
-        'maxretry' => '6'
-     }
BREAKS HERE
-    file ".chefignore"
BREAKS HERE
-default['chef-server']['configuration'] = Hash.new
BREAKS HERE
-  subscribes :restart, "template[#{node.rabbitmq.config_root}/rabbitmq.config]", :immediately
BREAKS HERE
-chef_server_ingredient 'chef-server-core' do
-  notifies :reconfigure, 'chef_server_ingredient[chef-server-core]', :immediately
-  notifies :reconfigure, 'chef_server_ingredient[chef-server-core]', :immediately
BREAKS HERE
-  url "#{node['terraform']['url_base']}/terraform_#{node['terraform']['version']}_#{node['os']}_#{node['terraform']['arch']}.zip" # rubocop:disable LineLength
BREAKS HERE
-  variables :code_name => node[:lsbdistcodename]
BREAKS HERE
-      self.shell = Berkshelf.ui
BREAKS HERE
-      unless env_command.success?
BREAKS HERE
-# Register Heat API Cloudformation Service
-openstack_identity_register 'Register Heat Cloudformation Service' do
-  auth_uri auth_url
-  bootstrap_token token
-  service_name 'heat-cfn'
-  service_type 'cloudformation'
-  service_description 'Heat Cloudformation Service'
-
-  action :create_service
-end
-
-# Register Heat API CloudFormation Endpoint
-openstack_identity_register 'Register Heat Cloudformation Endpoint' do
-  auth_uri auth_url
-  bootstrap_token token
-  service_type 'cloudformation'
-  endpoint_region region
-  endpoint_adminurl heat_cfn_endpoint.to_s
-  endpoint_internalurl heat_cfn_endpoint.to_s
-  endpoint_publicurl heat_cfn_endpoint.to_s
-
-  action :create_endpoint
BREAKS HERE
-    compile_time true if respond_to?(:compile_time)
-    compile_time true if respond_to?(:compile_time)
BREAKS HERE
-    property :repo, %w(main testing experimental), default: 'main'
-      when 'testing'
-        'https://testing.docker.com/'
-        'https://testing.docker.com/'
BREAKS HERE
-      it "includes the appropriate recipe from the ms_dotnet cookbook" do
BREAKS HERE
-  config.add_setting :server_runner_port, default: 8889
BREAKS HERE
-  mode 0755
-  mode 0600
-  mode 0500
-  mode 0400
BREAKS HERE
-  code(%Q{
-  })
-include_recipe 'bcpc-hadoop::yarn_config'
BREAKS HERE
-  plugin 'timezone'
BREAKS HERE
-include_recipe("os-hardening::server")
BREAKS HERE
-    :scheduler_default_filters => node["nova"]["scheduler"]["default_filters"].join(",")
BREAKS HERE
-version          "2.9.0"
BREAKS HERE
-property :principal, String, name_property: true, required: true
BREAKS HERE
-require_relative '../../../files/default/audit_report'
BREAKS HERE
-          read_namespace(['ssl_key', 'source']) or
-          read_namespace(['ssl_cert', 'source']) or
BREAKS HERE
-     if ::File.exist?(new_resource.path)
BREAKS HERE
-#
BREAKS HERE
-      action :run
BREAKS HERE
-  'comment'  => 'Splunk Server',
-  'home'     => '/opt/splunkforwarder',
-  'shell'    => '/bin/bash',
-  'uid'      => 396,
BREAKS HERE
-    yum_package "eucalyptus-eucanet" do
-  action :create_if_missing
BREAKS HERE
-class Chef::CookbookUploader
-end
BREAKS HERE
-version          "7.0.0"
BREAKS HERE
-          block['overrides']['rotation'],
-        )
BREAKS HERE
-version '2.2.11'
BREAKS HERE
-      Chef::Log.debug("Component state after action: #{body}")
BREAKS HERE
-          chef: chef_config,
BREAKS HERE
-                                    when 'rhel', 'fedora', 'suse', 'freebsd', 'gentoo', 'arch', 'mac_os_x', 'amazon', 'aix'
BREAKS HERE
-  :description => 'Dovector system user. Should no be changed.',
-  :description => 'Dovector system group. Should no be changed.',
-  :description => 'Dovector library path. Should no be changed.',
-  :description => 'Dovector configruration files path. Should no be changed.',
BREAKS HERE
-execute 'cpan --mirror http://cpan.webdev.x/CPAN --sudo Adriver::FCGI::ProcManager'
-
BREAKS HERE
-cpan_client 'FCGI::ProcManager'
BREAKS HERE
-RSpec.shared_context "recipe tests", type: :recipe do
-    described_recipe.split("::", 2)
-RSpec.shared_context "helpers tests", type: :helpers do
-RSpec.shared_context "resource tests", type: :resource do
-    described_recipe.split("::", 2)
BREAKS HERE
-    attribute 'github.protocol',
BREAKS HERE
-      ).concat [true, false]
-        'MACAddress' => COMMON::STRING,
-        'VLANFiltering' => Common::BOOLEAN,
-          equal_to: 0.upto(65535).to_a
-        },
-        'MACAddress' => Common::STRING,
-        'ARPIPTargets => Common::STRING_OR_INT,
-          equal_to: 0.upto(65535).to_a
-        'Architecture' => Common::ARCH,
-          equal_to: %w( yes no ipv4 ipv6 ).concat [true, false]
-          equal_to: %w( yes no ipv4 ipv6 ).concat [true, false]
-        'EmitLLDP' => ,
-        'BindCarrier' => ,
-        'Address' => ,
-        'Gateway' => ,
-        'DNS' => ,
-        'Domains' => ,
-        'NTP' => ,
-        'IPForward' => ,
-        'IPMasquerade' => ,
-        'IPv6PrivacyExtensions' => ,
-        'IPv6AcceptRA' => ,
-        'IPv6DuplicateAddressDetection' => ,
-        'IPv6HopLimit' => ,
-        'ProxyARP' => ,
-        'Bridge' => ,
-        'Bond' => ,
-        'VRF' => ,
-        'VLAN' => ,
-        'MACVLAN' => ,
-        'VXLAN' => ,
-        'Tunnel' =>
-        'Address' => ,
-        'Peer' => ,
-        'Broadcast' => ,
-        'Label' => ,
-        'PreferredLifetime' =>
-        'Gateway' => ,
-        'Destination' => ,
-        'Source' => ,
-        'Metric' => ,
-        'Scope' => ,
-        'PreferredSource' => ,
-        'Table' =>
-        'UseDNS' => ,
-        'UseNTP' => ,
-        'UseMTU' => ,
-        'SendHostname' => ,
-        'UseHostame' => ,
-        'Hostname' => ,
-        'UseDomains' => ,
-        'UseRoutes' => ,
-        'UseTimezone' => ,
-        'CriticalConnection' => ,
-        'ClientIdentifier' => ,
-        'VendorClassIdentifier' => ,
-        'DUIDType' => ,
-        'DUIDRawData' => ,
-        'IAID' => ,
-        'RequestBroadcast' => ,
-        'RouteMetric' =>
-        'UseDNS' => ,
-        'UseDomains' =>
-        'PoolOffset' => ,
-        'PoolSize' => ,
-        'DefaultLeaseTimeSec' => ,
-        'MaxLeaseTimeSec' => ,
-        'EmitDNS' => ,
-        'DNS' => ,
-        'EmitNTP' => ,
-        'NTP' => ,
-        'EmitRouter' => ,
-        'EmitTimezone' => ,
-        'Timezone' =>
-        'UnicastFlood' => ,
-        'HairPin' => ,
-        'UseBPDU' => ,
-        'FastLeave' => ,
-        'AllowPortToBeRoot' => ,
-        'Cost' =>
-        'MACAddress' => ,
-        'VLANId' =>
-        'VLAN' => ,
-        'EgressUntagged' => ,
-        'PVID' =>
BREAKS HERE
-  cookbook_file ::File.join(desired_plugin_path, new_resource.plugin_name + ".rb") do
BREAKS HERE
-bash "enable-bonding" do
-        modprobe bonding
-        echo 'bonding' >> /etc/modules
-    echo "source /etc/network/interfaces.d/iface-*" >> /etc/network/interfaces
-  not_if "grep '^source /etc/network/interfaces.d/' /etc/network/interfaces"
-      :slaves => node[:bcpc][iface].has_key("slaves") ? node[:bcpc][iface][:slaves] : False,
-      ifup #{device_name} #{node[:bcpc][iface].has_key("slaves") and node[:bcpc][iface][:slaves].join(" ")}
BREAKS HERE
-  framework = Drivers::Framework::Factory.build(application, node)
-  worker = Drivers::Worker::Factory.build(application, node)
BREAKS HERE
-              :streaming_clients => search(:node, "nominatim_state:slave").map { |slave| slave[:fdqn] }.join(" ")
-  variables :base_url => node[:nominatim][:state] == "off" ? node[:fdqn] : "nominatim.openstreetmap.org",
BREAKS HERE
-                                       %w[openssh-clients openssh-server]
-                                       %w[openssh]
-                                     when 'freebsd','smartos'
-                                       %w[]
-                                       %w[openssh-client openssh-server]
-if platform_family?("smartos")
BREAKS HERE
-version '1.13.0'
BREAKS HERE
-      api_download_count: 19,
-      foodcritic_failure: true
-      api_download_count: 13,
-      foodcritic_failure: true
-  it "displays the cookbook's foodcritic failure status" do
-    failure = json_body['foodcritic_failure']
-    expect(failure).to eql(true)
-  end
-
BREAKS HERE
-  #check if https listener already exists
-  winrm_cmd = "powershell.exe winrm enumerate winrm/config/listener"
-  shell_out.run_command  
-  if !shell_out.stdout.include? "Transport = HTTPS"
BREAKS HERE
-    node['platform_family'] == 'rhel' && node['platform_version'].to_i < 7)
-default['rabbitmq']['erlang']['yum']['baseurl'] =
-  case node['platform_family']
-  when 'rhel', 'centos'
-    "https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/#{node['platform_version'].to_i}"
-  when 'amazon'
-    if node['platform_version'].to_i >= 2
-      "https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7"
-    else
-      "https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/6"
-    end
-  else
-    # Fedora and so on
-    'https://dl.bintray.com/rabbitmq-erlang/rpm/erlang/21/el/7'
-  end
BREAKS HERE
-          @sv_dir = nil
-          @run_script = nil
-          @log_dir = nil
-          @log_main_dir = nil
-          @default_log_dir = nil
-          @log_run_script = nil
-          @log_config_file = nil
-          @env_dir = nil
-          @env_files = nil
-          @check_script = nil
-          @finish_script = nil
-          @control_dir = nil
-          @control_signal_files = nil
-          @lsb_init = nil
-          @service_link = nil
-          @new_resource.supports[:status] = true
-          @current_resource.service_name(new_resource.service_name)
-          @current_resource.running(running?)
-          @current_resource.enabled(enabled?)
-          @current_resource.env(get_current_env)
-          @current_resource
-          Chef::Log.info("#{@new_resource} configured")
-          Chef::Log.info("#{@new_resource} configured")
-          if @current_resource.enabled
-            Chef::Log.debug("#{@new_resource} already enabled - nothing to do")
-            Chef::Log.info("#{@new_resource} enabled")
-          @new_resource.enabled(true)
-          restart_service if @new_resource.restart_on_update && run_script.updated_by_last_action?
-          restart_log_service if @new_resource.restart_on_update && log_run_script.updated_by_last_action?
-          restart_log_service if @new_resource.restart_on_update && log_config_file.updated_by_last_action?
-            if @current_resource.running
-            if @current_resource.running
-          return @sv_dir unless @sv_dir.nil?
-          @sv_dir = Chef::Resource::Directory.new(sv_dir_name, run_context)
-          @sv_dir.recursive(true)
-          @sv_dir.owner(new_resource.owner)
-          @sv_dir.group(new_resource.group)
-          @sv_dir.mode(00755)
-          @sv_dir
-          return @run_script unless @run_script.nil?
-          @run_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'run'), run_context)
-          @run_script.owner(new_resource.owner)
-          @run_script.group(new_resource.group)
-          @run_script.source("sv-#{new_resource.run_template_name}-run.erb")
-          @run_script.cookbook(template_cookbook)
-          @run_script.mode(00755)
-          @run_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @run_script
-          return @log_dir unless @log_dir.nil?
-          @log_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log'), run_context)
-          @log_dir.recursive(true)
-          @log_dir.owner(new_resource.owner)
-          @log_dir.group(new_resource.group)
-          @log_dir.mode(00755)
-          @log_dir
-          return @log_main_dir unless @log_main_dir.nil?
-          @log_main_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'log', 'main'), run_context)
-          @log_main_dir.recursive(true)
-          @log_main_dir.owner(new_resource.owner)
-          @log_main_dir.group(new_resource.group)
-          @log_main_dir.mode(00755)
-          @log_main_dir
-          return @default_log_dir unless @default_log_dir.nil?
-          @default_log_dir = Chef::Resource::Directory.new(::File.join("/var/log/#{new_resource.service_name}"), run_context)
-          @default_log_dir.recursive(true)
-          @default_log_dir.owner(new_resource.owner)
-          @default_log_dir.group(new_resource.group)
-          @default_log_dir.mode(00755)
-          @default_log_dir
-          return @log_run_script unless @log_run_script.nil?
-          if new_resource.default_logger
-            @log_run_script = Chef::Resource::File.new(
-              ::File.join(sv_dir_name, 'log', 'run'),
-              run_context
-            )
-            @log_run_script.content(default_logger_content)
-            @log_run_script.owner(new_resource.owner)
-            @log_run_script.group(new_resource.group)
-            @log_run_script.mode(00755)
-          else
-            @log_run_script = Chef::Resource::Template.new(
-              ::File.join(sv_dir_name, 'log', 'run'),
-              run_context
-            )
-            @log_run_script.owner(new_resource.owner)
-            @log_run_script.group(new_resource.group)
-            @log_run_script.mode(00755)
-            @log_run_script.source("sv-#{new_resource.log_template_name}-log-run.erb")
-            @log_run_script.cookbook(template_cookbook)
-            @log_run_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          end
-          @log_run_script
-          return @log_config_file unless @log_config_file.nil?
-          @log_config_file = Chef::Resource::Template.new(::File.join(sv_dir_name, 'log', 'config'), run_context)
-          @log_config_file.owner(new_resource.owner)
-          @log_config_file.group(new_resource.group)
-          @log_config_file.mode(00644)
-          @log_config_file.cookbook('runit')
-          @log_config_file.source('log-config.erb')
-          @log_config_file.variables(
-            :size => new_resource.log_size,
-            :num => new_resource.log_num,
-            :min => new_resource.log_min,
-            :timeout => new_resource.log_timeout,
-            :processor => new_resource.log_processor,
-            :socket => new_resource.log_socket,
-            :prefix => new_resource.log_prefix,
-            :append => new_resource.log_config_append
-          )
-          @log_config_file
-          return @env_dir unless @env_dir.nil?
-          @env_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'env'), run_context)
-          @env_dir.owner(new_resource.owner)
-          @env_dir.group(new_resource.group)
-          @env_dir.mode(00755)
-          @env_dir
-          return @env_files unless @env_files.nil?
-          create_files = new_resource.env.map do |var, value|
-            env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', var), run_context)
-            env_file.owner(new_resource.owner)
-            env_file.group(new_resource.group)
-            env_file.content(value)
-            env_file.action(:create)
-            env_file
-          end
-          extra_env = @current_resource.env.reject { |k,_| new_resource.env.key?(k) }
-          delete_files = extra_env.map do |k,_|
-            env_file = Chef::Resource::File.new(::File.join(sv_dir_name, 'env', k), run_context)
-            env_file.action(:delete)
-            env_file
-          end
-          @env_files = create_files + delete_files
-          @env_files
-          return @check_script unless @check_script.nil?
-          @check_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'check'), run_context)
-          @check_script.owner(new_resource.owner)
-          @check_script.group(new_resource.group)
-          @check_script.source("sv-#{new_resource.check_script_template_name}-check.erb")
-          @check_script.cookbook(template_cookbook)
-          @check_script.mode(00755)
-          @check_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @check_script
-          return @finish_script unless @finish_script.nil?
-          @finish_script = Chef::Resource::Template.new(::File.join(sv_dir_name, 'finish'), run_context)
-          @finish_script.owner(new_resource.owner)
-          @finish_script.group(new_resource.group)
-          @finish_script.mode(00755)
-          @finish_script.source("sv-#{new_resource.finish_script_template_name}-finish.erb")
-          @finish_script.cookbook(template_cookbook)
-          @finish_script.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-          @finish_script
-          return @control_dir unless @control_dir.nil?
-          @control_dir = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'control'), run_context)
-          @control_dir.owner(new_resource.owner)
-          @control_dir.group(new_resource.group)
-          @control_dir.mode(00755)
-          @control_dir
-          return @control_signal_files unless @control_signal_files.nil?
-          @control_signal_files = new_resource.control.map do |signal|
-            control_signal_file = Chef::Resource::Template.new(
-              ::File.join(sv_dir_name, 'control', signal),
-              run_context
-            )
-            control_signal_file.owner(new_resource.owner)
-            control_signal_file.group(new_resource.group)
-            control_signal_file.mode(00755)
-            control_signal_file.source("sv-#{new_resource.control_template_names[signal]}-#{signal}.erb")
-            control_signal_file.cookbook(template_cookbook)
-            control_signal_file.variables(:options => new_resource.options) if new_resource.options.respond_to?(:has_key?)
-            control_signal_file
-          end
-          @control_signal_files
-          return @lsb_init unless @lsb_init.nil?
-          initfile = ::File.join(new_resource.lsb_init_dir, new_resource.service_name)
-          if node['platform'] == 'debian'
-            ::File.unlink(initfile) if ::File.symlink?(initfile)
-            @lsb_init = Chef::Resource::Template.new(initfile, run_context)
-            @lsb_init.owner('root')
-            @lsb_init.group('root')
-            @lsb_init.mode(00755)
-            @lsb_init.cookbook('runit')
-            @lsb_init.source('init.d.erb')
-            @lsb_init.variables(:name => new_resource.service_name)
-          else
-            @lsb_init = Chef::Resource::Link.new(initfile, run_context)
-            @lsb_init.to(new_resource.sv_bin)
-          end
-          @lsb_init
-          return @service_link unless @service_link.nil?
-          @service_link = Chef::Resource::Link.new(::File.join(service_dir_name), run_context)
-          @service_link.to(sv_dir_name)
-          @service_link
BREAKS HERE
-               /srv/www/#{application}/shared/scripts/unicorn stop"
BREAKS HERE
-      @port = 22
-            null,
-            null
-      map = { host: 'slave.launcher.host',
-              port: 'slave.launcher.port',
-              jvm_options: 'slave.launcher.jvmOptions' }
BREAKS HERE
-default['mongodb3']['config']['mongod']['processManagement']['fork'] = false
BREAKS HERE
-  number_instances Mixlib::ShellOut.new("oc get node --selector=#{node['cookbook-openshift3']['openshift_hosted_registry_selector']} --no-headers --config=admin.kubeconfig | wc -l").run_command.stdout
BREAKS HERE
-default['ark']['prefix_home'] = "share"
-default['ark']['prefix_install'] = "share"
-default['ark']['prefix_src'] = "src"
BREAKS HERE
-recipe 'openstack-orchestration::api', 'Start and configure the Heat API service'
-recipe 'openstack-orchestration::api-cfn', 'Start and configure the Heat API CloudFormation service'
-recipe 'openstack-orchestration::api-cloudwatch', 'Start and configure the Heat API CloudWatch service'
-recipe 'openstack-orchestration::client', 'Installs packages for heat client'
-recipe 'openstack-orchestration::common', 'Installs packages and configures a Heat Server'
-recipe 'openstack-orchestration::engine', 'Sets up Heat database and starts Heat Engine service'
-recipe 'openstack-orchestration::identity_registration', 'Registers Heat service, user and endpoints with Keystone'
BREAKS HERE
-
-        # @api public
-        def method_missing(method_symbol, *args, &block)
-          lookup_path = [:"application_#{method_symbol}"]
-          run_context.cookbook_collection.each do |cookbook_name, cookbook_ver|
-            if cookbook_name.start_with?('application_')
-              lookup_path << :"#{cookbook_name}_#{method_symbol}"
-            end
-          lookup_path << method_symbol
-          # Find the first that exists, or just use the method_name for the error message
-          candidate_resource = lookup_path.find {|name| have_resource_class_for?(name) } || method_symbol
-          # Give a default name of ''
-          args << '' if args.empty?
-          # Store the caller to correct the source_line.
-          created_at = caller[0]
-          super(candidate_resource, *args) do
-            # Fix the source location.
-            self.source_line = created_at
-            # Run the original block.
-            instance_exec(&block) if block
BREAKS HERE
-    manage_home = (home_dir == '/dev/null' ? false : true)
BREAKS HERE
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{prefix}#{new_resource.name}.yml")
-      path ::File.join(filebeat_install_resource.prospectors_dir, "#{prefix}#{new_resource.name}.yml")
-    path ::File.join(filebeat_install_resource.prospectors_dir, "#{prefix}#{new_resource.name}.yml")
BREAKS HERE
-property :limit_cpu, Integer
BREAKS HERE
-# merge all config options and secrets to be used in the nova.conf.erb
-  source 'nova.conf.erb'
BREAKS HERE
-        newest_pkg = pkgs.first
-
-        pkgs.each_cons(2) do |p1, p2|
-          newest_pkg = p1
-          newest_pkg = p2 if DateTime.parse(crx_property(p1, 'lastUnpacked')) <
-                             DateTime.parse(crx_property(p2, 'lastUnpacked'))
-        end
BREAKS HERE
-# Recipe:: ssh_client.rb
BREAKS HERE
-        expect(JSON.parse(response.body)["error_code"]).to_not eq(nil)
-        expect(I18n.t('api.error_messages.only_cookbook_version')).to eq('You may not DELETE the only version of a cookbook. A cookbook must have at least one version.')
BREAKS HERE
-case node['platform']
BREAKS HERE
-        :supported_platform,
-        name: 'debian'
-      foodcritic_qm = QualityMetric.create!(name: 'Foodcritic')
-      collab_num_qm = QualityMetric.create!(name: 'CollaboratorsNumber')
-
-      foodcritic_result = MetricResult.create(
-        cookbook_version: cookbook.latest_cookbook_version,
-        quality_metric:   foodcritic_qm,
-        failure:          true,
-        feedback:         'it failed'
-      )
-
-      collab_result = MetricResult.create(
-        cookbook_version: cookbook.latest_cookbook_version,
-        quality_metric:   collab_num_qm,
-        failure:          false,
-        feedback:         'it passed'
-      )
BREAKS HERE
-attribute :cwd , :kind_of => String, :default => ENV['PWD']
BREAKS HERE
-  capabilities   = new_resource.capabilities.merge(bamboo_config[:capabilities])
BREAKS HERE
-          @control_dir ||=
-            begin
-              d = Chef::Resource::Directory.new(::File.join(sv_dir_name, 'control'), run_context)
-              d.owner(new_resource.owner)
-              d.group(new_resource.group)
-              d.mode(00755)
-              d
-            end
BREAKS HERE
-identity_service_role = node["openstack"]["compute"]["identity_service_chef_role"]
-
-if node.run_list.expand(node.chef_environment).roles.include?(identity_service_role)
-  # if role is on this node, just return the node hash
-  keystone = node
-  # otherwise go searching
-ksadmin_tenant_name = keystone["openstack"]["identity"]["admin_tenant_name"]
-ksadmin_user = keystone["openstack"]["identity"]["admin_user"]
-Chef::Log.debug("openstack-compute::nova-common:keystone|#{keystone}")
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
BREAKS HERE
-          hash = LockfileLegacy.parse(contents)
-          def parse(content)
-                source = self.new(line)
-        def initialize(content)
-          @options = options
BREAKS HERE
-default['openresty']['pcre']['url']      = "ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-#{node['openresty']['pcre']['version']}.tar.bz2"
BREAKS HERE
-  :platform  => "opensuse",
-  :version   => "12.3",
BREAKS HERE
-    :ttys => node[:auth][:root_ttys].join("\n")
BREAKS HERE
-          Chef::Log.debug("Used cookbook list before checking environments: #{used_cookbooks}")
-          Chef::Log.debug("Used cookbook list after checking environments: #{used_cookbooks}")
-              Chef::Log.debug("Pin of #{cb} can be satisfied by #{v}, adding to used list")
-              Chef::Log.debug("Pin of #{cb} version #{version} not satisfied by #{v}")
-          Chef::Log.info("Cookbook #{cb} version #{version} is pinned in an environment, but does not exist on the server in this org.")
-                  Chef::Log.debug("Pin of #{cb}: #{version} is satisfied by #{v}")
-              Chef::Log.debug("No used cookbook #{cb}, checking the full cookbook list")
BREAKS HERE
-    EXCLUDED_VCS_FILES_WHEN_VENDORING = [".arch-ids", "{arch}", ".bzr", ".bzrignore", ".bzrtags", "CVS", ".cvsignore", "_darcs", ".git", ".hg", ".hgignore", ".hgrags", "RCS", "SCCS", ".svn", "**/.git"].freeze
BREAKS HERE
-version          "7.2.3"
BREAKS HERE
-# airflow.cfg configurations. The required entries listed below, you can add more sections and configs.
-# The structure default["airflow"]["config"]["CONFIG_SECTION"]["CONFIG_ENTRY"]
-
-# Required core airflow.cfg settings
-default["airflow"]["config"]["core"]["airflow_home"] = "/usr/local/lib/airflow"
-default["airflow"]["config"]["core"]["plugins_folder"] = "#{node["airflow"]["config"]["core"]["airflow_home"]}/plugins"
-default["airflow"]["config"]["core"]["base_log_folder"] = "#{node["airflow"]["config"]["core"]["airflow_home"]}/logs"
-default["airflow"]["config"]["core"]["sql_alchemy_conn"] = "sqlite:///#{node["airflow"]["config"]["core"]["airflow_home"]}/airflow.db"
-default["airflow"]["config"]["core"]["executor"] = "SequentialExecutor"
-default["airflow"]["config"]["core"]["parallelism"] = 32
-default["airflow"]["config"]["core"]["load_examples"] = false
-default["airflow"]["config"]["core"]["fernet_key"] = "G3jB5--jCQpRYp7hwUtpfQ_S8zLRbRMwX8tr3dehnNU="
-
-# Required webserver airflow.cfg settings
-default["airflow"]["config"]["webserver"]["web_server_host"] = "0.0.0.0"
-default["airflow"]["config"]["webserver"]["web_server_port"] = 8080
-default["airflow"]["config"]["webserver"]["base_url"] = "http://#{node["fqdn"]}:#{node["airflow"]["config"]["webserver"]["web_server_port"]}"
-default["airflow"]["config"]["webserver"]["secret_key"] = "temporary_key"
-default["airflow"]["config"]["webserver"]["expose_config"] = true
-default["airflow"]["config"]["webserver"]["authenticate"] = false
-default["airflow"]["config"]["webserver"]["filter_by_owner"] = false
-
-# Required scheduler airflow.cfg settings
-default["airflow"]["config"]["scheduler"]["job_heartbeat_sec"] = 5
-default["airflow"]["config"]["scheduler"]["scheduler_heartbeat_sec"] = 5
-
-# Required celery airflow.cfg settings 
-default["airflow"]["config"]["celery"]["celery_app_name"] = "airflow.executors.celery_executor"
-default["airflow"]["config"]["celery"]["celeryd_concurrency"] = 16
-default["airflow"]["config"]["celery"]["worker_log_server_port"] = 8793
-default["airflow"]["config"]["celery"]["broker_url"] = "sqla+mysql://airflow:airflow@localhost:3306/airflow"
-default["airflow"]["config"]["celery"]["celery_result_backend"] = "db+mysql://airflow:airflow@localhost:3306/airflow"
-default["airflow"]["config"]["celery"]["flower_port"] = 5555
-default["airflow"]["config"]["celery"]["default_queue"] = "default"
BREAKS HERE
-attribute :set_profile_environment, :kind_of => [TrueClass, FalseClass], :default => true
BREAKS HERE
-<<<<<<< HEAD
-=======
-  class ExplicitCookbookNotFound < BerkshelfError; status_code(119); end
->>>>>>> RiotGames/master
BREAKS HERE
-hadoop_conf_dir = "/etc/hadoop/#{node[:hadoop][:conf_dir]}"
-  if node['hadoop'].has_key? "#{sitefile}"
-  if node['hadoop'].has_key? "#{propfile}"
-  command "update-alternatives --install /etc/hadoop/conf hadoop-conf /etc/hadoop/#{node[:hadoop][:conf_dir]} 50"
-  not_if "update-alternatives --display hadoop-conf | grep best | awk '{print $5}' | grep /etc/hadoop/#{node[:hadoop][:conf_dir]}"
BREAKS HERE
-      }.merge(args.last.is_a?(Hash) ? args.pop : {})
BREAKS HERE
-    command "#{node['cookbook-openshift3']['openshift_common_client_binary']} volume dc/docker-registry --add --type=secret --secret-name=registry-certificates -m /etc/secrets secrets -n ${namespace_registry} --config=admin.kubeconfig"
BREAKS HERE
-  only_if{ node['fb_postfix']['mask_service'] }
BREAKS HERE
-    package ntppkg
-    command node['platform_family'] == 'freebsd' ? 'ntpd -q' : "ntpd -q -u #{node['ntp']['var_owner']}"
-  only_if { node['ntp']['sync_hw_clock'] && !(platform_family?('windows') || platform_family?('freebsd')) }
BREAKS HERE
-  when 'postgresql', 'pgsql'
-    @db_prov = ::Chef::Provider::Database::Postgresql
-    @user_prov = ::Chef::Provider::Database::PostgresqlUser
-    @super_user = 'postgres'
BREAKS HERE
-  hash = IO.popen(['sha1sum', *files]).read
-  if !File.exists?(hash_file) || File.read(hash_file) != hash
-    f.write(hash)
-    files = Dir.glob("**/*").select { |f| !File.directory?(f) } - encrypted.keys - encrypted.values
BREAKS HERE
-    else includes == "includes" ? "binding.pry" : '# No breakpoint'
-  access = nested.nil? ? { :strings => "['foo']", :symbols => "[:foo]", :vivified => ".foo" } :
-           { :strings => "['bar']['baz']", :symbols => "[:fee][:fi][:fo][:fum]", :vivified => ".bar.baz" }
-      (if types == "none"
-         "log 'hello world'"
-       elsif op == "reads"
-         types.split(",").map { |type| "log node#{access[type.to_sym]}" }.join("\n")
-       else
-         types.split(",").map { |type| "node#{access[type.to_sym]} = 'foo'" }.join("\n")
-      end)
BREAKS HERE
-          files = FileSyncer.glob(File.join(src, '*'))
BREAKS HERE
-          m.to_a.map { |m| match(m) }
BREAKS HERE
-require 'chef/cookbook/metadata'
-      cookbooks = Array.new
-      Dir.glob('cookbooks/*').each do |cookbook_full_path|
-        metadata = Chef::Cookbook::Metadata.new
-        metadata.from_file("#{cookbook_full_path}/metadata.rb")
-        if metadata.name.empty?
-          Spiceweasel::Log.fatal("No cookbook name in the #{cookbook_full_path}/metadata.rb.")
-          exit(-1)
-        end
-        Spiceweasel::Log.debug("dir_ext: #{metadata.name} #{metadata.version}")
-        cookbooks.push(metadata)
-      end
-      cookbooks = self.order_cookbooks_by_dependency(cookbooks)
-
-    def self.order_cookbooks_by_dependency(cookbooks)
-      # Weak algorithm, not particularly elegant, ignores version info as unlikely to have two versions of a cookbook anyway
-      # We're going to find the cookbooks with their dependencies matched and keep going until all we have is unmatched deps
-      sorted_cookbooks = Array.new
-      unsorted_cookbooks = cookbooks
-      scount = 0
-      #keep looping until no more cookbooks are left or can't remove remainders
-      while unsorted_cookbooks.any? and scount < cookbooks.length
-        cookbook = unsorted_cookbooks.shift
-        Spiceweasel::Log.debug("dir_ext: cookbook.dependencies: '#{cookbook.name}' #{cookbook.dependencies}")
-        #if all the cookbook dependencies are in sorted_cookbooks
-        if sorted_cookbooks.eql?(sorted_cookbooks | cookbook.dependencies.collect {|x| x[0]})
-          sorted_cookbooks.push(cookbook.name)
-          scount = 0
-        else #put it back in the list
-          unsorted_cookbooks.push(cookbook)
-          scount = scount + 1
-        Spiceweasel::Log.debug("dir_ext: sorted_cookbooks: '#{sorted_cookbooks}' #{scount}")
-      if scount > 0
-        remainders = unsorted_cookbooks.collect {|x| x.name}
-        Spiceweasel::Log.debug("dir_ext: remainders: '#{remainders}'")
-        if Spiceweasel::Config[:novalidation] #stuff is missing, oh well
-          sorted_cookbooks.push(remainders).flatten!
-        else
-          deps = unsorted_cookbooks.collect {|x| x.dependencies.collect {|x| x[0]} - sorted_cookbooks}
-          STDERR.puts "ERROR: Dependencies not satisfied or circular dependencies in cookbook(s): #{remainders} depend(s) on #{deps}"
-          exit(-1)
-        end
-      #hack to get the format same as yaml/json parse
-      sorted_cookbooks.collect { |x| { x => nil } }
BREAKS HERE
-when "mac_os_x"
-  when Chef::VersionConstraint.new("~> 10.7.0").include?(node['platform_version']),
-       Chef::VersionConstraint.new("~> 10.8.0").include?(node['platform_version']),
-       Chef::VersionConstraint.new("~> 10.9.0").include?(node['platform_version'])
-    default['build_essential']['osx']['gcc_installer_url'] = "https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.7-v2.pkg"
-    default['build_essential']['osx']['gcc_installer_checksum'] = "df36aa87606feb99d0db9ac9a492819e"
-  when Chef::VersionConstraint.new("~> 10.6.0").include?(node['platform_version'])
-    default['build_essential']['osx']['gcc_installer_url'] = "https://github.com/downloads/kennethreitz/osx-gcc-installer/GCC-10.6.pkg"
-    default['build_essential']['osx']['gcc_installer_checksum'] = "d1db5bab6a3f6b9f3b5577a130baeefa"
BREAKS HERE
-ruby_block 'initialize_grub_variables' do
-ruby_block 'check_root_device' do
BREAKS HERE
-      node(deploy: { dummy_project: { database: { adapter: 'sqlite3' }, framework: { deploy_env: 'staging' } } })
-               framework: {
-                 deploy_env: 'staging'
-               }
BREAKS HERE
-  version @version
-windows_path node['terraform']['win_install_dir'] do
BREAKS HERE
-version          "1.7.0"
BREAKS HERE
-    node.set["eucalyptus"]["topology"]["clusters"][node["eucalyptus"]["local-cluster-name"]]["cc-1"] = node["ipaddress"]
-      node.set["eucalyptus"]["cloud-keys"][node["eucalyptus"]["local-cluster-name"]] = clc["eucalyptus"]["cloud-keys"][node["eucalyptus"]["local-cluster-name"]]
-      node.set["eucalyptus"]["cloud-keys"][node["eucalyptus"]["local-cluster-name"]] = node["eucalyptus"]["cloud-keys"][node["eucalyptus"]["local-cluster-name"]]
-    node["eucalyptus"]["cloud-keys"][node["eucalyptus"]["local-cluster-name"]].each do |key_name,data|
BREAKS HERE
-default['openstack']['endpoints']['identity-api']['scheme'] = "https"
-default['openstack']['endpoints']['identity-admin']['scheme'] = "https"
-default['openstack']['endpoints']['compute-api']['scheme'] = "https"
-default['openstack']['endpoints']['compute-ec2-api']['scheme'] = "https"
-default['openstack']['endpoints']['compute-ec2-admin']['scheme'] = "https"
-default['openstack']['endpoints']['compute-xvpvnc']['scheme'] = "https"
-default['openstack']['endpoints']['compute-novnc']['scheme'] = "https"
-default['openstack']['endpoints']['network-api']['scheme'] = "https"
-default['openstack']['endpoints']['image-api']['scheme'] = "https"
-default['openstack']['endpoints']['image-registry']['scheme'] = "https"
-default['openstack']['endpoints']['volume-api']['scheme'] = "https"
-default['openstack']['endpoints']['metering-api']['scheme'] = "https"
BREAKS HERE
-  file ::File.join(desired_plugin_path, new_resource.plugin_name) do
BREAKS HERE
-# deploy
-default['defaults']['deploy']['symlinks'] = {
-  'system' => 'public/system',
-  'assets' => 'public/assets',
-  'cache' => 'tmp/cache',
-  'pids' => 'tmp/pids',
-  'log' => 'log'
-}
-default['defaults']['deploy']['create_dirs_before_symlink'] =
-  %w(tmp public config ../../shared/cache ../../shared/assets)
-default['defaults']['deploy']['purge_before_symlink'] = %w(log tmp/cache tmp/pids public/system public/assets)
-default['defaults']['deploy']['rollback_on_error'] = true
-
BREAKS HERE
-depends          "openstack-image"
-depends          "openstack-identity", ">= 2012.2.1"
-depends          "openstack-common", ">= 0.1.7"
BREAKS HERE
-# required by the lwrps
-ruby_block 'web_app-postfixadmin-reload' do
-  block {}
-  subscribes :create, 'execute[a2ensite postfixadmin.conf]', :immediately
-  notifies :reload, 'service[apache2]', :immediately
-end
-
-
BREAKS HERE
-include Windows::Helper
-
BREAKS HERE
-# TODO(jklare) : check why the package is installed and if the configuration
-# works at all (if so, this needs refactoring parallel to the lbaas and vpnaas
-# recipes and attributes)
-# default['openstack']['network']['fwaas']['driver'] = 'neutron_fwaas.services.firewall.drivers.linux.iptables_fwaas.IptablesFwaasDriver'
-# default['openstack']['network']['fwaas']['config_file'] = '/etc/neutron/fwaas_driver.ini'
BREAKS HERE
-        checked[name] = true
BREAKS HERE
-          :path => 'cookbooks/two/cb_one/recipes/test.rb'
-          :path => 'cookbooks/two/cb_one/metadata.rb'
-          :path => 'cookbooks/one/cb_one/recipes/test.rb'
-          :path => 'cookbooks/one/cb_one/recipes/test2.rb'
-          :path => 'cookbooks/one/cb_one/recipes/test3.rb'
-          :path => 'cookbooks/one/cb_one/recipes/test.rb'
-          :path => 'cookbooks/one/cb_one/metadata.rb'
-          :path => 'cookbooks/one/cb_one/recipes/test.rb'
-          :path => 'cookbooks/one/cb_one/metadata.rb'
-          :path => 'cookbooks/two/cb_one/recipes/test.rb'
-          :path => 'cookbooks/two/cb_one/recipes/test2.rb'
-          :path => 'cookbooks/two/cb_one/metadata.rb'
-          :path => 'cookbooks/two/cb_one/metadata.rb'
-          :path => 'cookbooks/two/cb_one/README.md'
-          :path => 'cookbooks/two/cb_one/recipe/default.rb'
-          :path => 'cookbooks/two/OWNERS'
-          :path => 'cookbooks/OWNERS'
-          :path => 'OWNERS'
-        logger
BREAKS HERE
-depends           'openstack-common', '~> 10.0.1'
BREAKS HERE
-    FileUtils.cp_r $base_dir.join('support', 'secret_cookbook'), 'cookbooks/secret_cookbook'
BREAKS HERE
-                     raise "Trying to load a regular data bag item #{id} from #{bag}, and databag_fallback is disabled"
BREAKS HERE
-          # List all files and empty directories recursively
-          files = FileSyncer.glob(File.join(src, '**/*')).reject do |dir|
-            File.directory?(dir) and Dir.entries(dir) != [".", ".."]
-          end
BREAKS HERE
-license           'Apache 2.0'
BREAKS HERE
-default[:bamboo][:url]                            = 'http://localhost'                  # bamboo server URL
-default[:bamboo][:home_dir]                       = '/opt/bamboo'                       # bamboo installation directory
-default[:bamboo][:data_dir]                       = '/var/bamboo'                       # bamboo data directory
-default[:bamboo][:user]                           = 'bamboo'                            # bamboo user
-default[:bamboo][:group]                          = 'bamboo'                            # bamboo group
-default[:bamboo][:user_home]                      = '/home/bamboo'                      # bamboo system user home directory
-default[:bamboo][:name]                           = 'bamboo'                            # bamboo application/service name
-default[:bamboo][:version]                        = '5.13.2'
-default[:bamboo][:database][:type]                = 'postgresql'
-  default[:bamboo][:database][:version]           = '5.6'
-default[:java][:install_flavor]                   = 'oracle'
-default[:java][:oracle][:accept_oracle_download_terms] = true
BREAKS HERE
-        return true if conf.has_key?('mail_plugins') and conf['mail_plugins'].include?(plugin)
BREAKS HERE
-    property :username, String, required: true, name_property: true
BREAKS HERE
-  server URI.parse('https://chef.compliance.test/compliance/')
-  server URI.parse('https://chef.compliance.test/compliance/')
BREAKS HERE
-version '1.13.1'
BREAKS HERE
-          options[:tags]
-        else
-          cookbook_tags(p[:filename])
-        end
-            cookbook_matches(state)
-          else
-            other_matches(state)
-          end
-              '{metadata.rb,{attributes,definitions,libraries,providers,'\
-              'recipes,resources}/*.rb,templates/*/*.erb}'
-            else
-              '*.rb'
-            end
BREAKS HERE
-          if !main_resource.chain_content.nil? && !main_resource.chain_name.nil?
BREAKS HERE
-  tags %w{deprecated chef13}
BREAKS HERE
-# Recipes:: default
BREAKS HERE
-    :solr_dir => extract_path,
-    :solr_dir => extract_path,
BREAKS HERE
-    command "start runsvdir"
-  if node[:platform_version].to_f < 8.04
BREAKS HERE
-            .with_retries(@config[:tags_submission_retries])
BREAKS HERE
-          description: 'PostfixAdmin required packages array for PostgreSQL support',
BREAKS HERE
-            execute "PERL5LIB=\"#{params[:perl5lib]}.join(':')\" perl -e \"use Plack #{node[:psgi][:plack][:version]}\""
BREAKS HERE
-    # @option options [Symbol, Array] :without 
-    # @option options [Symbol, Array] :without 
-    #   group to not be resolved
-        sources: sources(exclude: options[:without])
BREAKS HERE
-# Cookbook Name:: heartbeat
-# Copyright 2009-2016, Chef Software, Inc.
BREAKS HERE
-      let(:cached_cb) { double('cached_cb', version: version) }
-        subject.stub(:cookbooks).and_return([cached_cb])
-      it "returns a list of CachedCookbooks" do
BREAKS HERE
-attribute :aws_session_token,     kind_of: String, default: nil
-attribute :region,                kind_of: String, default: nil
BREAKS HERE
-        if new_resource.templates
-          directory "#{app_dir}/local" do
-            recursive true
-            mode 00755
-          end
BREAKS HERE
-node.default_unless['openldap']['syncrepl_config']['searchbase'] = "\"#{node['openldap']['basedn']}\""
-node.default_unless['openldap']['syncrepl_config']['binddn'] = "\"#{node['openldap']['syncrepl_cn']},#{node['openldap']['basedn']}\""
-node.default_unless['openldap']['syncrepl_config']['credentials'] = "\"#{node['openldap']['slapd_replpw']}\""
BREAKS HERE
-# ruby_block 'sleep 5s to allow services to be fully started' do
-#   block do
-#     sleep 5
-#   end
-# end
-# file '/tmp/notifier' do
-#   content Time.now.to_s
-#   notifies :restart, 'service[plain-defaults]', :immediately
-# end
BREAKS HERE
-default['openresty']['source']['version']     = '1.11.2.2'
-default['openresty']['source']['checksum']    = '7f9ca62cfa1e4aedf29df9169aed0395fd1b90de254139996e554367db4d5a01'
-default['openresty']['source']['url']         = "http://agentzh.org/misc/nginx/%{name}.tar.gz"
BREAKS HERE
-
-Chef::Platform.set(
-  resource: :jenkins_user,
-  provider: Chef::Provider::JenkinsUser
-)
BREAKS HERE
-    repo_name "datastax"
-    url "http://rpm.datastax.com/community"
-    action :add
BREAKS HERE
-      return '5.1' if el6?
-      return '5.6' if node['platform'] == 'fedora'
-      return '5.6' if node['platform_family'] == 'suse'
-      return '/usr/sbin/mysqld' if node['platform_family'] == 'fedora' && v56plus
-      return '/usr/libexec/mysqld' if node['platform_family'] == 'fedora'
BREAKS HERE
-include_recipe "java"
-include_recipe "ark"
-ark "maven" do
-  url node['maven'][mvn_version]['url']
-  version node['maven'][mvn_version]['version']
-template "/etc/mavenrc" do
-  source "mavenrc.erb"
-  mode 00755
BREAKS HERE
-  default['openldap']['db_dir']    = '/var/lib/ldap'
-  default['openldap']['db_dir']    = '/var/lib/ldap'
-  default['openldap']['db_dir']    = '/var/db/openldap-data'
-  default['openldap']['db_dir']    = '/var/lib/ldap'
BREAKS HERE
-               /srv/www/#{application}/shared/scripts/unicorn stop"
BREAKS HERE
-    attr_accessor :run_context, :yaml
-    def initialize(driver, repo_path, run_context, yaml = '.kitchen.yml')
-      @driver = driver
-        "kitchen #{action}",
BREAKS HERE
-url_version = version.gsub('.', '_')
-  default_rpm_package = "rabbitmq-server-#{version}-1.suse.noarch.rpm"
BREAKS HERE
-      data_bag = chef_server.node.find(params[:data_bag])
-      bags = 
-        bags: chef_server.data_bag,
-        data_bag: data_bag
BREAKS HERE
-        begin
-          $stdin  = @stdin
-          $stdout = @stdout
-          $stderr = @stderr
-
-          Berkshelf::Cli.start(@argv)
-          @kernel.exit(0)
-        rescue Berkshelf::BerkshelfError => e
-          Berkshelf.ui.error e
-          Berkshelf.ui.error "\t" + e.backtrace.join("\n\t") if ENV["BERKSHELF_DEBUG"]
-          @kernel.exit(e.status_code)
-        rescue Ridley::Errors::RidleyError => e
-          Berkshelf.ui.error "#{e.class} #{e}"
-          Berkshelf.ui.error "\t" + e.backtrace.join("\n\t") if ENV["BERKSHELF_DEBUG"]
-          @kernel.exit(47)
-        end
-          if self.subcommands.include?(command)
BREAKS HERE
-    block { ENV["JVM_ARGS"] = "-DautoAcceptCertificates=true" }
-    not_if { ENV["JVM_ARGS"] == "-DautoAcceptCertificates=true" }
BREAKS HERE
-            cookbook_version: version.version
-
BREAKS HERE
-include_recipe 'chef-sugar'
-
-# the chef-sugar gem files would be owned by root otherwise
-execute 'fix-chef-sugar-file-permissions' do
-  command "sudo chown -R #{devbox_user}:#{devbox_group} #{devbox_userhome}/.chefdk"
-end
-
BREAKS HERE
-version          "7.0.5"
BREAKS HERE
-version          '10.0.2'
BREAKS HERE
-      set_source(source.name, source)
-          set_source(source.name, source)
-    # @param [#to_s] source
-    # @param [#to_s] source
-      # @param [#to_s] source
-      #   name of the source to set
-      # @param [CookbookSource] value
-      #   source to set as value
-      def set_source(source, value)
-        @sources[source.to_s] = value
BREAKS HERE
-  require 'knife_cookbook_dependencies'
BREAKS HERE
-          ::File.exists?("/etc/systemd/system/#{conf['name']}.#{type}")
BREAKS HERE
-  },
-  'monitoring' => {
-    'default_tenant' => 'service',
-    'roles' => { 'Member' => ['admin'] }
BREAKS HERE
-     :boolean => true
BREAKS HERE
-      demands.find { |demand| demand.name == name }
BREAKS HERE
-    describe "cinder-volume-usage-audit" do
-      before do
-        f = "/usr/local/bin/cinder-volume-usage-audit"
-        @file = @chef_run.cookbook_file f
-      end 
-
-      it "has proper owner" do
-        expect(@file).to be_owned_by "root", "root"
-      end 
-
-      it "has proper modes" do
-        expect(sprintf("%o", @file.mode)).to eq "755"
-      end 
-    end 
-
-    it "has cinder-volume-usage-audit cronjob" do
-      cron = @chef_run.cron "cinder-volume-usage-audit"
-      cmd = "/usr/local/bin/cinder-volume-usage-audit > " \
-            "/var/log/cinder/audit.log 2>&1"
-      expect(cron.command).to eq cmd
-      expect(cron.minute).to eq '00'
-    end
-
BREAKS HERE
-        end
-        node[:network][:interfaces][interface][:addresses].select do |_, e|
BREAKS HERE
-node.set['openstack']['identity']['internalURL'] = identity_endpoint.to_s
-  endpoint_internalurl node['openstack']['identity']['adminURL']
BREAKS HERE
-      install_or_use_source(source)
-      package_version = add_version(package, Version.new(source.metadata.version))
-      add_dependencies(package_version, source.dependencies) if include_dependencies
-          install_or_use_source(source)
-          dep_pkgver = add_version(dep_package, Version.new(source.metadata.version))
-          add_dependencies(dep_pkgver, source.dependencies)
-          source = get_source(name)
-          cached_cookbooks << CachedCookbook.new(source.name, source.local_path, source.metadata)
-      def install_or_use_source(source)
-        if downloader.downloaded?(source)
-          msg = "Using #{source.name} (#{source.metadata.version})"
-
-          if source.location.is_a?(CookbookSource::PathLocation)
-            msg << " at #{source.location}"  
-          end
-          Berkshelf.ui.info msg
-          downloader.download!(source)
-          Berkshelf.ui.info "Installing #{source.name} (#{source.local_version}) from #{source.location}"
-          package_version = package(source.name)[Version.new(source.metadata.version)]
-          add_dependencies(package_version, source.dependencies)
BREAKS HERE
-        "The cookbook '#{@cookbook.cookbook_name} has invalid filenames:",
BREAKS HERE
-  node.set['ceph']['fsid-secret'] = secret
-  node.save
-  node.set['ceph']['monitor-secret'] = secret
-  node.save
-  node.set['ceph']['bootstrap-osd'] = secret
-  node.save
-  node.set['ceph']['bootstrap-rgw'] = secret
-  node.save
-  node.set['ceph']['bootstrap-mds'] = secret
-  node.save
-  node.set['ceph']['admin-secret'] = secret
-  node.save
-  node.set['ceph']['radosgw-secret'] = secret
-  node.save
-  node.set['ceph']["radosgw-secret-#{inst}"] = secret
-  node.save
-  node.set['ceph']['restapi-secret'] = secret
-  node.save
BREAKS HERE
-      validate_no_existing_tag
-      tag_new_cb_version
-    def validate_no_existing_tag
-      if existing_tags.include?(@version.to_s)
-    def tag_new_cb_version
-      shellout("git tag -a -m 'release v#{@version}' #{@version}")
BREAKS HERE
-  Chef::Log.fatal "rabbitmq_user_has_tag?: rabbitmqctl -q list_users | grep \"^#{name}\\b\" | grep #{tag}"
-  Chef::Log.fatal "rabbitmq_user_has_tag?: #{cmd.stdout}"
-# only_if "rabbitmqctl -q list_user_permissions #{new_resource.user} | grep ^/#{new_resource.vhost}\\b"
-# list_permissions is missing stuff
-  # if vhost.nil?
-  #   cmdStr = "rabbitmqctl -q list_user_permissions #{name} | grep ^/\\s"
-  # else
-  # end
-  Chef::Log.fatal "rabbitmq_user_has_permissions?: #{cmdStr}"
-  Chef::Log.fatal "rabbitmq_user_has_permissions?: #{cmd.stdout}"
-  if perm_list.nil? && run_command.nil?
-    Chef::Log.fatal "rabbitmq_user_has_permissions?: no permissions found"
-    return true
-      Chef::Log.fatal "rabbitmq_user_add: rabbitmqctl add_user #{new_resource.user} #{new_resource.password}"
-      Chef::Log.fatal "rabbitmq_user_delete: rabbitmqctl delete_user #{new_resource.user}"
-      Chef::Log.fatal "rabbitmq_user_set_user_tags: rabbitmqctl set_user_tags #{new_resource.user} #{new_resource.user_tag}"
-      Chef::Log.fatal "rabbitmq_clear_user_tags: rabbitmqctl set_user_tags #{new_resource.user}"
BREAKS HERE
-    hdp_update_version = '2.3.4.7'
-    hdp_update_version = '2.4.2.0'
BREAKS HERE
-# Copyright:: 2016-2017, Chef Software, Inc.
-default['chef_client_updater']['prevent_downgrade'] = true
BREAKS HERE
-  notifies :run, "bash[extract_cassandra_source]", :immediately
-# 4. Extract it
-# 5. Copy to node.cassandra.installation_dir, update permissions
-  action  :nothing
-end
-
-# 6. Create and Change Ownership C* directories
-
-directory node.cassandra.source_dir do
-  owner     node.cassandra.user
-  group     node.cassandra.group
-  recursive true
-  mode      0755
-  action    :create
BREAKS HERE
-# Note(frickler): Work around for https://github.com/chef/chef-dk/issues/966
-bash 'fix gem ext dir' do
-  code "rmdir ~/.chefdk/gem/ruby/2.1.0/extensions && ln -s /opt/chefdk/embedded/lib/ruby/gems/2.1.0/extensions ~/.chefdk/gem/ruby/2.1.0/extensions || true"
-end
-
BREAKS HERE
-      cookbooks = run_context.cookbook_collection
BREAKS HERE
-  execute "Fix permission Bug" do
-    command "sed -i 's/nova$/root/g' /etc/init/nova-vncproxy.conf"
-    action :run
-    only_if { File.readlines("/etc/init/nova-vncproxy.conf").grep(/exec.*nova$/).size > 0 }
-  end
BREAKS HERE
-recipe           "db", ""
-recipe           "server", ""
BREAKS HERE
-          if response['Set-Cookie'].is_a?(String)
-            self.cookie = response['set-cookie'].split(';')[0]
-            Chef::Log.debug("#{name}##{__method__} cookie: #{cookie}")
-          end
-      unless defined?(::PostfixAdmin::API::HTTP::STDOUT_REGEXP)
-        STDOUT_REGEXP = /^.*class=['"]standout['"][^>]*>([^\n]*?)\n.*$/m
-      end
-      unless defined?(::PostfixAdmin::API::HTTP::ERROR_REGEXP1)
-        ERROR_REGEXP1 = /^.*class=['"]error_msg['"][^>]*>([^<]+)<.*$/m
-      end
-      unless defined?(::PostfixAdmin::API::HTTP::ERROR_REGEXP2)
-        ERROR_REGEXP2 = /^.*(Invalid\s+token!).*$/m
-      unless defined?(::PostfixAdmin::API::HTTP::SETUP_OK_REGEXP)
-        SETUP_OK_REGEXP = /You +are +done +with +your +basic +setup/
-      unless defined?(::PostfixAdmin::API::HTTP::SETUP_ERROR_REGEXP)
-        SETUP_ERROR_REGEXP = /Please +fix +the +errors +listed +above/
-      unless defined?(::PostfixAdmin::API::HTTP::SETUP_STDERR_REGEXP1)
-        SETUP_STDERR_REGEXP1 = %r{^.*<b>(Error: .+)</b>.*$}m
-      end
-      unless defined?(::PostfixAdmin::API::HTTP::SETUP_STDERR_REGEXP2)
-        SETUP_STDERR_REGEXP2 =
-      unless defined?(::PostfixAdmin::API::HTTP::TOKEN_REGEXP)
-        TOKEN_REGEXP =
-          /^.*<input\s+(?:[^>]*\s+)?name="token"\s+value="([^"]+)".*$/m
-      def self.token=(arg)
-        @@token = arg
-      end
-
-      def self.parse_response_error(body)
-        if body.match(ERROR_REGEXP1)
-          error("#{name}##{__method__}: #{body.gsub(ERROR_REGEXP1, '\1')}")
-        elsif body.match(ERROR_REGEXP2)
-          error("#{name}##{__method__}: #{body.gsub(ERROR_REGEXP2, '\1')}")
-        end
-      end
-
-        return if body.match(SETUP_OK_REGEXP)
-        if body.match(SETUP_ERROR_REGEXP)
-          error(strip_html(body.gsub(STDOUT_REGEXP, '\1')))
-        elsif body.match(SETUP_STDERR_REGEXP1)
-          error(strip_html(body.gsub(SETUP_STDERR_REGEXP1, '\1')))
-        elsif body.match(SETUP_STDERR_REGEXP2)
-          error(strip_html(body.gsub(SETUP_STDERR_REGEXP2, '\1')))
-        else
-          error('Unknown error during the setup of PostfixAdmin.')
-        parse_response_error(body)
-        strip_html(body.gsub(STDOUT_REGEXP, '\1')) if body.match(STDOUT_REGEXP)
-        if body.match(TOKEN_REGEXP)
-          body.gsub(TOKEN_REGEXP, '\1').tap do |token|
-            Chef::Log.debug("#{name}##{__method__} token: #{token}")
-          end
-        else
-          error("#{name}##{__method__}: Token not found.")
-        end
-        response =
-          API::HTTP::Request.new(method, path, body, ssl, port).response
-        if response.code.to_i >= 400
-          error("#{name}##{__method__}: #{response.code} #{response.message}")
-        else
-          parse_response_body(response.body)
-        end
-      end
-
-      def self.get(path, ssl = false, port = nil)
-        request('get', path, nil, ssl, port)
-      end
-
-      def self.post(path, body, ssl = false, port = nil)
-        request('post', path, body, ssl, port)
-      end
-
-      def self.index(ssl = false, port = nil)
-        get('/login.php', ssl, port)
-        response =
-          API::HTTP::Request.new('post', '/setup.php', body, ssl, port).response
-        if response.code.to_i >= 400
-          error("#{name}##{__method__}: #{response.code} #{response.message}")
-        else
-          parse_setup_body(response.body)
-          parse_response_body(response.body)
-      def self.get_token(url)
-        response = API::HTTP::Request.new('get', url, nil, @ssl, @port).response
-        if response.code.to_i >= 400
-          error("#{name}##{__method__}: #{response.code} #{response.message}")
-        else
-          parse_token_body(response.body)
-        end
-        self.class.index(@ssl, @port)
-        self.class.post('/login.php', body, @ssl, @port)
-        self.class.token = self.class.get_token('/edit.php?table=domain')
-        self.class.get(path, @ssl, @port)
-        self.class.post(path, body, @ssl, @port)
BREAKS HERE
-  ['rhel','fedora','amazon','scientific'] => ['openssl-devel', 'readline-devel', 'ncurses-devel', 'bzip2'],
-  'suse' => ['libopenssl-devel', 'readline-devel', 'ncurses-devel', 'bzip2'],
-  'debian' => ['libperl-dev', 'libssl-dev', 'libreadline-dev', 'libncurses5-dev', 'bzip2', 'zlib1g-dev']
BREAKS HERE
-  cached(:chef_run) { ChefSpec::SoloRunner.converge('docker_test::image') }
BREAKS HERE
-        Chef::Runner.new(run_context).converge
BREAKS HERE
-depends 'galera', '~> 0.4.1'
BREAKS HERE
-                  'salt'    => salt
BREAKS HERE
-  attr_accessor :ip_address, :hostname, :aliases, :comment
-  # Creates a new Hostsfile::Entry object by parsing a text line. The
-  # `line` attribute will be in the following format:
-  #
-  #     1.2.3.4 hostname [alias[, alias[, alias]]] [# comment]
-  #
-  # This returns a new Entry object...
-  def self.parse(line)
-    entry_part, comment_part = line.split('#', 2).collect{ |part| part.strip.empty? ? nil : part.strip }
-
-    # Return nil if the line is empty
-    return nil if entry_part.nil?
-
-    # Otherwise, collect all the entries and make a new Entry
-    entries = entry_part.split(/\s+/).collect{ |entry| entry.strip unless entry.nil? || entry.strip.empty? }.compact
-    return self.new(
-      :ip_address => entries[0],
-      :hostname => entries[1],
-      :aliases => entries[2..-1],
-      :comment => comment_part
-    )
-  end
-  # Sort by comparing hostnames
-  def <=>(other_entry)
-    if self.hostname == 'localhost'
-      -1
-    elsif other_entry.hostname == 'localhost'
-      1
-    else
-      self.hostname <=> other_entry.hostname
-      [ pad(ip_address), hostname, alias_string, "# #{comment}" ].join(' ')
-      [ pad(ip_address), hostname, alias_string].join(' ')
BREAKS HERE
-    if node['platform_version'].to_float < 15.04
BREAKS HERE
-    notifies :restart, 'service[sytem-probe]', :delayed unless agent_start == false
BREAKS HERE
-
-  context 'When server and refresh_token are specified' do
-    let(:chef_run) do
-      ChefSpec::ServerRunner.new do |node|
-        node.override['audit']['collector'] = 'chef-compliance'
-        node.override['audit']['profiles'] = { 'admin/myprofile' => true }
-        node.override['audit']['server'] = 'https://my.compliance.test/api'
-        node.override['audit']['refresh_token'] = 'abcdefg'
-        node.override['audit']['insecure'] = true
-      end.converge(described_recipe)
-    end
-
-    it 'creates compliance_token resource' do
-      expect(chef_run).to create_compliance_token('Compliance Token').with(
-        server: 'https://my.compliance.test/api',
-        insecure: true,
-        token: 'abcdefg'
-      )
-    end
-
-    it 'fetches and executes compliance_profile[myprofile]' do
-      expect(chef_run).to fetch_compliance_profile('myprofile').with(
-        server: 'https://my.compliance.test/api',
-      )
-      expect(chef_run).to execute_compliance_profile('myprofile').with(
-        server: 'https://my.compliance.test/api',
-      )
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'When two profiles are specified' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'admin/myprofile' => true,
-                                               'base/ssh' => false }
-      runner.node.override['audit']['inspec_version'] = 'latest'
-      runner.node.override['audit']['quiet'] = true
-      runner.converge(described_recipe)
-    end
-    let(:myprofile) { chef_run.compliance_profile('myprofile') }
-
-    it 'fetches and executes compliance_profile[myprofile]' do
-      expect(chef_run).to fetch_compliance_profile('myprofile').with(
-        owner: 'admin',
-        server: nil,
-        token: nil,
-      )
-      expect(chef_run).to execute_compliance_profile('myprofile').with(
-        owner: 'admin',
-        server: nil,
-        token: nil,
-        quiet: true,
-      )
-    end
-
-    it 'notifies compliance_report[chef-server]' do
-      expect(myprofile).to notify('compliance_report[chef-server]').delayed
-    end
-
-    it 'skips compliance_profile[ssh]' do
-      expect(chef_run).to_not fetch_compliance_profile('ssh')
-      expect(chef_run).to_not execute_compliance_profile('ssh')
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'When invalid profile is passed' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'myprofile' => true }
-      runner.converge(described_recipe)
-    end
-
-    it 'does raise an error' do
-      expect { chef_run }.to raise_error("Invalid profile name 'myprofile'. Must contain /, e.g. 'john/ssh'")
-    end
-  end
-
-  context 'When specifying profiles with alternate sources' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = {
-        'base/linux' => true,
-        'base/apache' => false,
-        'brewinc/ssh-hardening' => {
-          'source' => 'supermarket://hardening/ssh-hardening',
-        },
-        'brewinc/tmp_compliance_profile' => {
-          'source' => 'https://github.com/nathenharvey/tmp_compliance_profile',
-        },
-        'brewinc/tmp_compliance_profile-master' => {
-          'source' => '/tmp/tmp_compliance_profile-master',
-        },
-        'exampleorg/myprofile' => {
-          'disabled' => true,
-        },
-      }
-      runner.converge(described_recipe)
-    end
-    let(:linux_profile) { chef_run.compliance_profile('linux') }
-
-    it 'executes base/linux in backward compatible mode' do
-      expect(chef_run).to execute_compliance_profile('linux').with(
-        path: nil,
-      )
-    end
-    it 'executes brewinc/ssh-hardening from supermarket' do
-      expect(chef_run).to execute_compliance_profile('ssh-hardening').with(
-        path: 'supermarket://hardening/ssh-hardening',
-      )
-    end
-    it 'executes brewinc/tmp_compliance_profile from github' do
-      expect(chef_run).to execute_compliance_profile('tmp_compliance_profile').with(
-        path: 'https://github.com/nathenharvey/tmp_compliance_profile',
-      )
-    end
-    it 'executes brewinc/tmp_compliance_profile-master from filesystem' do
-      expect(chef_run).to execute_compliance_profile('tmp_compliance_profile-master').with(
-        path: '/tmp/tmp_compliance_profile-master',
-      )
-    end
-    it 'does not execute disabled exampleorg/myprofile' do
-      expect(chef_run).to_not execute_compliance_profile('myprofile')
-    end
-    it 'notifies compliance_report[chef-server]' do
-      expect(linux_profile).to notify('compliance_report[chef-server]').delayed
-    end
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'when set to run on an interval and not due to run' do
-    before(:each) do
-      allow_any_instance_of(Chef::Resource).to receive(:profile_overdue_to_run?).and_return(false)
-    end
-
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'admin/myprofile' => true }
-      runner.node.override['audit']['interval']['enabled'] = true
-      runner.converge(described_recipe)
-    end
-
-    it 'does not fetch or execute on compliance profile' do
-      expect(chef_run).to_not fetch_compliance_profile('myprofile')
-      expect(chef_run).to_not execute_compliance_profile('myprofile')
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
BREAKS HERE
-      # not to immediately reboot. The windows_reboot 'notifies' does that. 
-      notifies :request, 'windows_reboot[powershell]', :immediately unless node['powershell']['installation_reboot_mode'] == 'no_reboot'
BREAKS HERE
-       :id => nil do
-      :daemon_name => daemon_name,
-      :full_name => "Adobe CQ #{node['cq']['version']} " +
-      :conf_file => "#{cq_instance_conf_dir(
-      :kill_delay => node['cq']['service']['kill_delay'],
-      :restart_sleep => node['cq']['service']['restart_sleep']
-      lazy {
-          :port => node['cq'][local_id]['port'],
-          :jmx_ip => node['cq'][local_id]['jmx_ip'],
-          :jmx_port => node['cq'][local_id]['jmx_port'],
-          :debug_ip => node['cq'][local_id]['debug_ip'],
-          :debug_port => node['cq'][local_id]['debug_port'],
-          :instance_home => instance_home,
-          :run_mode => node['cq'][local_id]['run_mode'],
-          :min_heap => node['cq'][local_id]['jvm']['min_heap'],
-          :max_heap => node['cq'][local_id]['jvm']['max_heap'],
-          :max_perm_size => node['cq'][local_id]['jvm']['max_perm_size'],
-          :code_cache => node['cq'][local_id]['jvm']['code_cache_size'],
-          :jvm_general_opts => node['cq'][local_id]['jvm']['general_opts'],
-          :jvm_code_cache_opts => node['cq'][local_id]['jvm']['code_cache_opts'],
-          :jvm_gc_opts => node['cq'][local_id]['jvm']['gc_opts'],
-          :jvm_jmx_opts => node['cq'][local_id]['jvm']['jmx_opts'],
-          :jvm_debug_opts => node['cq'][local_id]['jvm']['debug_opts'],
-          :jvm_crx_opts => node['cq'][local_id]['jvm']['crx_opts'],
-          :jvm_extra_opts => node['cq'][local_id]['jvm']['extra_opts']
-      }
-    supports :status => true, :restart => true
BREAKS HERE
-  
-    
BREAKS HERE
-          # Get the current list of tags, remove any "role:" entries
-          host_tags = @dog.host_tags(hostname)[1]["tags"] || []
-          host_tags.delete_if { |tag| tag.start_with?('role:') }
-
-          # Get list of chef roles, rename them to tag format
-          chef_roles = node.run_list.roles
-          chef_roles.collect! { |role| "role:" + role }
-
-          # Get the chef environment (as long as it's not '_default')
-          if node.respond_to?('chef_environment') && node.chef_environment != '_default'
-            host_tags.delete_if { |tag| tag.start_with?('env:') }
-            host_tags << "env:" + node.chef_environment
-          end
-
-          # Combine (union) both arrays. Removes dupes, preserves non-chef tags.
-          new_host_tags = host_tags | chef_roles
BREAKS HERE
-version           "7.1.0"
BREAKS HERE
-    property :settings, Hash, required: true # See the API docs for what settings are available
-      if settings.empty?
-        Chef::Log.error 'BIOS settings hash is empty! Nothing will be set. Please check your recipe.'
-        return
-      end
BREAKS HERE
-if node['apache'].attribute?('listen_ports')
-  # Compatibility with cookbook 'apache' < 3.2.0
-  node.default['apache']['listen_ports'] |= [
-    node['bamboo']['apache2']['port'],
-    node['bamboo']['apache2']['ssl']['port']
-  ]
-else
-  node.default['apache']['listen'] |= [
-    "*:#{node['bamboo']['apache2']['port']}",
-    "*:#{node['bamboo']['apache2']['ssl']['port']}"
-  ]
-end
BREAKS HERE
-      node.default[:deploy][application][:passenger_handler] = if File.exists?("#{inner_deploy[:deploy_to]}/current/config.ru")
BREAKS HERE
-    @cookbook_version_metrics = @cookbook_version.metric_results
BREAKS HERE
-require_relative 'coverage/outputs'
-      @outputs    = {}
-      add_output(PutsOutput.new)
-    #
-    # @param [Output] output
-    #   the output to add
-    def add_output(output = nil, &block)
-      id = "#{output.inspect}/#{block.inspect}".hash
-      @outputs[id] = if output.kind_of?(Output)
-                       output
-                     elsif block
-                       BlockOutput.new(&block)
-                     else
-                       raise ArgumentError, 'Please specify either an ouput, ' \
-                         'or block to output the results to!'
-                     end
-      
-      begin
-        erb = Erubis::Eruby.new(File.read(@template))
-        reportOutput = erb.evaluate(report)
-        @outputs.each { |_,value| value.output(reportOutput) }
-      rescue NameError => e
-        raise Error::ErbTemplateParseError.new(original_error: e.message)
BREAKS HERE
-        not_if "vagrant plugin list | grep -q '#{name} (#{version})'",
BREAKS HERE
-  group ['ceph']['group']
-  group ['ceph']['group']
BREAKS HERE
-  role_name service_role
-  role_name service_role
BREAKS HERE
-default['openstack']['network']['nova']['nova_ca_certificates_file'] = nil
-default['openstack']['network']['nova']['nova_api_insecure'] = false
BREAKS HERE
-require 'solve'
-        sorted = versions.sort_by { |version| Solve::Version.new(version) }
BREAKS HERE
-  supports :manage_home => true
BREAKS HERE
-version          "2.5.0-pre"
BREAKS HERE
-      PERMISSIONS = %w{create read update delete grant}
-      DEFAULT_SUPERUSERS = %w{pivotal}
-      }
-          #ANGRY
BREAKS HERE
-
BREAKS HERE
-      addresses: Nomad::Helpers.conf_keys_include_opts(%w( http rpc serf )),
-      advertise: Nomad::Helpers.conf_keys_include_opts(%w( http rpc serf )),
-      log_level: { kind_of: String, equal_to: %w( WARN INFO DEBUG ) },
-      ports: Nomad::Helpers.conf_keys_include_opts(%w( http rpc serf )),
-        %w( cpu memory disk reserved_ports )
BREAKS HERE
-          recipes.each do |recipe|
BREAKS HERE
-  if node['platform_version'].to_i > 6
-    default['vim']['source']['dependencies']  = %w( ctags
-                                                    gcc
-                                                    lua-devel
-                                                    luajit-devel
-                                                    make
-                                                    ncurses-devel
-                                                    perl-devel
-                                                    perl-ExtUtils-CBuilder
-                                                    perl-ExtUtils-Embed
-                                                    perl-ExtUtils-ParseXS
-                                                    python-devel
-                                                    ruby-devel
-                                                    tcl-devel
-                                                )
-      default['vim']['source']['dependencies']  = %w( ctags
-                                                    gcc
-                                                    make
-                                                    ncurses-devel
-                                                    perl
-                                                    python-devel
-                                                    ruby-devel
-                                                    tcl-devel
-                                                    libselinux-devel
-                                                )
-  default['vim']['source']['dependencies']  = %w( exuberant-ctags
-                                                  gcc
-                                                  libncurses5-dev
-                                                  libperl-dev
-                                                  lua5.1
-                                                  make
-                                                  python-dev
-                                                  ruby-dev
-                                                  tcl-dev
-                                              )
BREAKS HERE
-cq_instance "CQ Publish" do
BREAKS HERE
-# nginx.conf must only be accessible to user root
-file '/etc/nginx/nginx.conf' do
-  owner 'root'
-  group 'root'
-  mode '0600'
BREAKS HERE
-  node['bluepill']['state_dir']
BREAKS HERE
-        if(defined?(Chef::Util::PathHelper) != nil)
BREAKS HERE
-# Cookbook Name:: drbd
-# Copyright 2009-2016, Chef Software, Inc.
BREAKS HERE
-
-  context 'When server and refresh_token are specified' do
-    let(:chef_run) do
-      ChefSpec::ServerRunner.new do |node|
-        node.override['audit']['collector'] = 'chef-compliance'
-        node.override['audit']['profiles'] = { 'admin/myprofile' => true }
-        node.override['audit']['server'] = 'https://my.compliance.test/api'
-        node.override['audit']['refresh_token'] = 'abcdefg'
-        node.override['audit']['insecure'] = true
-      end.converge(described_recipe)
-    end
-
-    it 'creates compliance_token resource' do
-      expect(chef_run).to create_compliance_token('Compliance Token').with(
-        server: 'https://my.compliance.test/api',
-        insecure: true,
-        token: 'abcdefg'
-      )
-    end
-
-    it 'fetches and executes compliance_profile[myprofile]' do
-      expect(chef_run).to fetch_compliance_profile('myprofile').with(
-        server: 'https://my.compliance.test/api',
-      )
-      expect(chef_run).to execute_compliance_profile('myprofile').with(
-        server: 'https://my.compliance.test/api',
-      )
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'When two profiles are specified' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'admin/myprofile' => true,
-                                               'base/ssh' => false }
-      runner.node.override['audit']['inspec_version'] = 'latest'
-      runner.node.override['audit']['quiet'] = true
-      runner.converge(described_recipe)
-    end
-    let(:myprofile) { chef_run.compliance_profile('myprofile') }
-
-    it 'fetches and executes compliance_profile[myprofile]' do
-      expect(chef_run).to fetch_compliance_profile('myprofile').with(
-        owner: 'admin',
-        server: nil,
-        token: nil,
-      )
-      expect(chef_run).to execute_compliance_profile('myprofile').with(
-        owner: 'admin',
-        server: nil,
-        token: nil,
-        quiet: true,
-      )
-    end
-
-    it 'notifies compliance_report[chef-server]' do
-      expect(myprofile).to notify('compliance_report[chef-server]').delayed
-    end
-
-    it 'skips compliance_profile[ssh]' do
-      expect(chef_run).to_not fetch_compliance_profile('ssh')
-      expect(chef_run).to_not execute_compliance_profile('ssh')
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'When invalid profile is passed' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'myprofile' => true }
-      runner.converge(described_recipe)
-    end
-
-    it 'does raise an error' do
-      expect { chef_run }.to raise_error("Invalid profile name 'myprofile'. Must contain /, e.g. 'john/ssh'")
-    end
-  end
-
-  context 'When specifying profiles with alternate sources' do
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = {
-        'base/linux' => true,
-        'base/apache' => false,
-        'brewinc/ssh-hardening' => {
-          'source' => 'supermarket://hardening/ssh-hardening',
-        },
-        'brewinc/tmp_compliance_profile' => {
-          'source' => 'https://github.com/nathenharvey/tmp_compliance_profile',
-        },
-        'brewinc/tmp_compliance_profile-master' => {
-          'source' => '/tmp/tmp_compliance_profile-master',
-        },
-        'exampleorg/myprofile' => {
-          'disabled' => true,
-        },
-      }
-      runner.converge(described_recipe)
-    end
-    let(:linux_profile) { chef_run.compliance_profile('linux') }
-
-    it 'executes base/linux in backward compatible mode' do
-      expect(chef_run).to execute_compliance_profile('linux').with(
-        path: nil,
-      )
-    end
-    it 'executes brewinc/ssh-hardening from supermarket' do
-      expect(chef_run).to execute_compliance_profile('ssh-hardening').with(
-        path: 'supermarket://hardening/ssh-hardening',
-      )
-    end
-    it 'executes brewinc/tmp_compliance_profile from github' do
-      expect(chef_run).to execute_compliance_profile('tmp_compliance_profile').with(
-        path: 'https://github.com/nathenharvey/tmp_compliance_profile',
-      )
-    end
-    it 'executes brewinc/tmp_compliance_profile-master from filesystem' do
-      expect(chef_run).to execute_compliance_profile('tmp_compliance_profile-master').with(
-        path: '/tmp/tmp_compliance_profile-master',
-      )
-    end
-    it 'does not execute disabled exampleorg/myprofile' do
-      expect(chef_run).to_not execute_compliance_profile('myprofile')
-    end
-    it 'notifies compliance_report[chef-server]' do
-      expect(linux_profile).to notify('compliance_report[chef-server]').delayed
-    end
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
-
-  context 'when set to run on an interval and not due to run' do
-    before(:each) do
-      allow_any_instance_of(Chef::Resource).to receive(:profile_overdue_to_run?).and_return(false)
-    end
-
-    let(:chef_run) do
-      runner = ChefSpec::ServerRunner.new(platform: 'centos', version: '6.5')
-      runner.node.override['audit']['profiles'] = { 'admin/myprofile' => true }
-      runner.node.override['audit']['interval']['enabled'] = true
-      runner.converge(described_recipe)
-    end
-
-    it 'does not fetch or execute on compliance profile' do
-      expect(chef_run).to_not fetch_compliance_profile('myprofile')
-      expect(chef_run).to_not execute_compliance_profile('myprofile')
-    end
-
-    it 'converges successfully' do
-      expect { chef_run }.to_not raise_error
-    end
-  end
BREAKS HERE
-version '2.7.0'
BREAKS HERE
-    # Try to connect to docker socket twenty times
-    def docker_wait_ready
-      bash 'docker-wait-ready' do
-        code <<-EOF
-        timeout=0
-        while [ $timeout -lt 20 ];  do
-          ((timeout++))
-          #{docker_cmd} ps | head -n 1 | grep ^CONTAINER
-          if [ $? -eq 0 ]; then
-            break
-          fi
-          sleep 1
-        done
-        [[ $timeout -eq 20 ]] && exit 1
-        exit 0
-        EOF
-        not_if "#{docker_cmd} ps | head -n 1 | grep ^CONTAINER"
-      end
-    end
-
-
-    def update_storage_driver?
-      return false if storage_driver.nil?
-      return true if current_resource.storage_driver != storage_driver
-      false
-    end
BREAKS HERE
-default['jira']['build']['exclude_jars'] = %w{jcl-over-slf4j jul-to-slf4j log4j slf4j-api slf4j-log4j12}
-default['jira']['jars']['deploy_jars'] = %w{carol carol-properties hsqldb jcl-over-slf4j jonas_timer jotm jotm-iiops_stubs jotm-jmrp_stubs jta jul-to-slf4j log4j objectweb-datasource ots-jts slf4j-api slf4j-log4j12 xapool}
BREAKS HERE
-    service "cinder-group-active" do
-      service_name "cinder-group-active"
-      supports :status => true, :restart => true
-      action [:enable, :start]
-    end
-
-      notifies :restart, "service[cinder-group-active]", :immediately
BREAKS HERE
-    conf['templates_dir'] ||= 'templates'
BREAKS HERE
-  # For enabling HTTPS transport in dsc recipe
-  default['powershell']['winrm']['thumbprint'] = '75A3C92D9D86BB721C3AFED6A86F56C464213E9F'	# change this
BREAKS HERE
-Install-Module posh-git
BREAKS HERE
-             repo_name.first
-           else
-             repo_name.last
-           end
-  def run! cmd
-  def run cmd
-
BREAKS HERE
-    '2.1.7.0'
-    '5.3.2'
BREAKS HERE
-version          '9.1.2'
BREAKS HERE
-install_rubies(
-  rubies: node['travis_build_environment']['rubies'],
-  default_ruby: node['travis_build_environment']['default_ruby'],
-  global_gems: node['travis_build_environment']['global_gems'],
-  gems: node['travis_build_environment']['gems'],
-  user: node['travis_build_environment']['user']
-)
BREAKS HERE
-  Chef::Platform::ServiceHelpers.service_resource_providers.include?(:systemd)
-    provider Chef::Provider::Service::Systemd
-    provider Chef::Provider::Service::Systemd
-    provider Chef::Provider::Service::Systemd
-    provider Chef::Provider::Service::Systemd
-    provider Chef::Provider::Service::Systemd
BREAKS HERE
-    ENV['http_proxy'] = ENV['HTTP_PROXY'] if ENV['HTTP_PROXY'] && !ENV['http_proxy']
-    ENV['https_proxy'] = ENV['HTTPS_PROXY'] if ENV['HTTPS_PROXY'] && !ENV['https_proxy']
-    ENV['ftp_proxy'] = ENV['FTP_PROXY'] if ENV['FTP_PROXY'] && !ENV['ftp_proxy']
-    ENV['no_proxy'] = ENV['NO_PROXY'] if ENV['NO_PROXY'] && !ENV['no_proxy']
BREAKS HERE
-depends 'erlang', '~> 2.0.0'
BREAKS HERE
-      'resources/.*.rb',
BREAKS HERE
-require 'thor'
-require 'thor/monkies'
BREAKS HERE
-depends 'erlang', '~> 2.0.0'
BREAKS HERE
-  execute "Wait for enabled #{service}" do
-    command "#{describe_services} --filter service-type=#{service} | grep enabled"
-    retries 15
-    retry_delay 20
BREAKS HERE
-      :database => database_info,
BREAKS HERE
-  if node['erlang']['esl'] then
BREAKS HERE
-depends 'mysql', '~> 6.0.13'
-depends 'mysql2_chef_gem', '~> 1.0.1'
BREAKS HERE
-    let(:client_name) { 'reset' }
-    let(:client_key)  { fixtures_path.join('reset.pem').to_s }
BREAKS HERE
-  subscribes :write, "file[filename]", :immediately
BREAKS HERE
-        return is_new_value(document, xpath, value_to_check) || value_to_check == '' ? false : true
BREAKS HERE
-      dependencies = lockfile_reduce(berksfile.dependencies(options.slice(:except, :only))
BREAKS HERE
-file "/etc/nginx/conf.d/default.conf" do
-end
BREAKS HERE
-            owner new_resource.owner
-            group new_resource.group
-            owner new_resource.owner
-            group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-                owner new_resource.owner
-                group new_resource.group
-                owner new_resource.owner
-                group new_resource.group
-            owner new_resource.owner
-            group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
-            owner new_resource.owner
-            group new_resource.group
-              owner new_resource.owner
-              group new_resource.group
BREAKS HERE
-  users.each do |user|
-  admins.each do |user|
-  remove_users.each do |user|
BREAKS HERE
-    let(:path) { fixtures_path.join('cookbooks', 'example_cookbook').to_s }
-    let(:relative_path) { '../../../fixtures/cookbooks/example_cookbook' }
-        absolute_path = File.expand_path(relative_path, File.dirname(berksfile.filepath))
-        expect(subject.to_s).to eq("source at #{relative_path}")
BREAKS HERE
-%w(deb_package_url rpm_package rpm_package_url).each do |key|
BREAKS HERE
-    opts << "--storage-opt=#{new_resource.storage_opt}" if new_resource.storage_opt
BREAKS HERE
-    'cinder_iscsitarget_packages' => ['targetcli'],
BREAKS HERE
-          versions.sort! do |a, b|
-            Gem::Version.new(b.version) <=> Gem::Version.new(a.version)
-          end
-        inventory_cookbook_paths.map { |path| Minimart::Cookbook.new(path) }
BREAKS HERE
-version    "0.0.5"
BREAKS HERE
-    content '1'
BREAKS HERE
-property :name, String, name_property: true
BREAKS HERE
-    r = zk.get('path' => znode_path)
-    rc = r['rc']
-    zk.close if !zk.nil? && !zk.clsed?
-    lock_acquired = true if ret['rc'] == Zookeeper::Constants::ZOK
-    zk.close if !zk.nil? && !zk.clsed?
-    ret = zk.get('path' => znode_path)
-    zk.close if !zk.nil? && !zk.clsed?
-    lock_released = true if ret['rc'] == Zookeeper::Constants::ZOK
-    zk.close if !zk.nil? && !zk.clsed?
-    ret = zk.get('path' => znode_path)
-    val = ret['data'] if ret['rc'] == Zookeeper::Constants::ZOK
-    zk.close if !zk.nil? && !zk.clsed?
-    if start_time? && (Time.parse(restart_failure_time).to_i < Time.parse(start_time).to_i)
-  user_found = true if cmd.exitstatus.zero?
-  cmd.exitstatus.zero ? true : false
-  cmd.exitstatus.zero? && cmd.stdout.include?('NORMAL')
-    if cmd.exitstatus.zero?
BREAKS HERE
-    role_name service_role
BREAKS HERE
-  run_simple(unescape("knife berks install"), false)
BREAKS HERE
-  revision "v1.1.3"
BREAKS HERE
-      %w(neutron-plugin-linuxbridge-agent)
BREAKS HERE
-dynatrace_copy_or_download_file name.to_s do
-  dynatrace_run_tar_installer name.to_s do
-  dynatrace_configure_init_scripts name.to_s do
BREAKS HERE
-    action :remove
BREAKS HERE
-case platform_family
-                         libffi-devel python-devel python-setuptools),
-    tempest_packages: %w(git libssl-dev libffi-dev python-dev libxml2-dev
-                         libxslt1-dev libpq-dev libxml2-dev libxslt-dev
-                         testrepository python-dev libffi-dev),
-    package_overrides: "-o Dpkg::Options::='--force-confold' -o Dpkg::Options::='--force-confdef'",
BREAKS HERE
-node.default[:graylog2] ||= {}
-node.default[:mongodb] ||= {}
-default.graylog2[:repo_version]              = '1-1'
-default.graylog2[:major_version]             = '2.1'
-default.graylog2[:server][:version]          = '2.1.1-1'
-default.graylog2[:server][:repos]            = {
-#    'url' => "https://packages.graylog2.org/repo/el/stable/#{node.graylog2[:major_version]}/x86_64/",
-#    'components' => ['stable', node.graylog2[:major_version]],
-default.graylog2[:root_username]             = 'admin'
-default.graylog2[:root_email]                = nil
-default.graylog2[:root_timezone]             = nil
-default.graylog2[:restart]                   = 'delayed'
-default.graylog2[:no_retention]              = nil
-default.graylog2[:disable_sigar]             = nil
-default.graylog2[:dashboard_widget_default_cache_time] = '10s'
-default.graylog2[:secrets_data_bag]                    = 'secrets'
-default.graylog2[:server][:user]  = 'graylog'
-default.graylog2[:server][:group] = 'graylog'
-default.graylog2[:password_secret]              = nil # pwgen -s 96 1
-default.graylog2[:password_secret_enclose_char] = '"'
-default.graylog2[:root_password_sha2]           = nil # echo -n yourpassword | shasum -a 256
-default.graylog2[:node_id_file] = '/etc/graylog/server/node-id'
-default.graylog2[:plugin_dir]   = '/usr/share/graylog-server/plugin'
-default.graylog2[:trusted_proxies]  = nil
-default.graylog2[:http_proxy_uri]   = nil
-default.graylog2[:authorized_ports] = 514
-default.graylog2[:rest][:listen_uri]              = 'http://0.0.0.0:9000/api'
-default.graylog2[:rest][:transport_uri]           = nil
-default.graylog2[:rest][:enable_cors]             = nil
-default.graylog2[:rest][:enable_gzip]             = nil
-default.graylog2[:rest][:admin_access_token]      = nil # pwgen -s 96 1
-default.graylog2[:rest][:enable_tls]              = nil
-default.graylog2[:rest][:tls_cert_file]           = nil
-default.graylog2[:rest][:tls_key_file]            = nil
-default.graylog2[:rest][:tls_key_password]        = nil
-default.graylog2[:rest][:max_chunk_size]          = nil
-default.graylog2[:rest][:max_header_size]         = nil
-default.graylog2[:rest][:max_initial_line_length] = nil
-default.graylog2[:rest][:thread_pool_size]        = nil
-default.graylog2[:rest][:worker_threads_max_pool_size] = nil
-default.graylog2[:elasticsearch][:config_file]                          = '/etc/graylog/server/graylog-elasticsearch.yml'
-default.graylog2[:elasticsearch][:shards]                               = 4
-default.graylog2[:elasticsearch][:replicas]                             = 0
-default.graylog2[:elasticsearch][:index_prefix]                         = 'graylog'
-default.graylog2[:elasticsearch][:cluster_name]                         = 'graylog'
-default.graylog2[:elasticsearch][:http_enabled]                         = false
-default.graylog2[:elasticsearch][:discovery_zen_ping_unicast_hosts]     = '127.0.0.1:9300'
-default.graylog2[:elasticsearch][:unicast_search_query]                 = nil
-default.graylog2[:elasticsearch][:search_node_attribute]                = nil
-default.graylog2[:elasticsearch][:network_host]                         = nil
-default.graylog2[:elasticsearch][:network_bind_host]                    = nil
-default.graylog2[:elasticsearch][:network_publish_host]                 = nil
-default.graylog2[:elasticsearch][:analyzer]                             = 'standard'
-default.graylog2[:elasticsearch][:output_batch_size]                    = 500
-default.graylog2[:elasticsearch][:output_flush_interval]                = 1
-default.graylog2[:elasticsearch][:output_fault_count_threshold]         = 5
-default.graylog2[:elasticsearch][:output_fault_penalty_seconds]         = 30
-default.graylog2[:elasticsearch][:transport_tcp_port]                   = 9350
-default.graylog2[:elasticsearch][:disable_version_check]                = nil
-default.graylog2[:elasticsearch][:disable_index_optimization]           = nil
-default.graylog2[:elasticsearch][:index_optimization_max_num_segments]  = nil
-default.graylog2[:elasticsearch][:index_ranges_cleanup_interval]        = nil
-default.graylog2[:elasticsearch][:template_name]                        = nil
-default.graylog2[:elasticsearch][:node_name_prefix]                     = nil
-default.graylog2[:elasticsearch][:template_name]                        = nil
-default.graylog2[:mongodb][:uri] = 'mongodb://127.0.0.1:27017/graylog'
-default.graylog2[:mongodb][:max_connections] = 100
-default.graylog2[:mongodb][:threads_allowed_to_block_multiplier] = 5
-default.graylog2[:allow_leading_wildcard_searches] = false
-default.graylog2[:allow_highlighting]              = false
-default.graylog2[:stream_processing_max_faults] = 3
-default.graylog2[:processbuffer_processors]  = 5
-default.graylog2[:outputbuffer_processors]   = 3
-default.graylog2[:async_eventbus_processors] = 2
-default.graylog2[:outputbuffer_processor_keep_alive_time]        = 5000
-default.graylog2[:outputbuffer_processor_threads_core_pool_size] = 3
-default.graylog2[:outputbuffer_processor_threads_max_pool_size]  = 30
-default.graylog2[:processor_wait_strategy]   = 'blocking'
-default.graylog2[:ring_size]                 = 65536
-default.graylog2[:udp_recvbuffer_sizes]      = 1048576
-default.graylog2[:inputbuffer_ring_size]     = 65536
-default.graylog2[:inputbuffer_processors]    = 2
-default.graylog2[:inputbuffer_wait_strategy] = 'blocking'
-default.graylog2[:message_journal_enabled]        = true
-default.graylog2[:message_journal_dir]            = '/var/lib/graylog-server/journal'
-default.graylog2[:message_journal_max_age]        = '12h'
-default.graylog2[:message_journal_max_size]       = '5gb'
-default.graylog2[:message_journal_flush_age]      = '1m'
-default.graylog2[:message_journal_flush_interval] = 1000000
-default.graylog2[:message_journal_segment_age]    = '1h'
-default.graylog2[:message_journal_segment_size]   = '100mb'
-default.graylog2[:output_module_timeout]     = 10000
-default.graylog2[:stale_master_timeout]      = 2000
-default.graylog2[:shutdown_timeout]          = 30000
-default.graylog2[:stream_processing_timeout] = 2000
-default.graylog2[:ldap_connection_timeout]   = 2000
-default.graylog2[:api_client_timeout]        = 300
-default.graylog2[:http_connect_timeout]      = '5s'
-default.graylog2[:http_read_timeout]         = '10s'
-default.graylog2[:http_write_timeout]        = '10s'
-default.graylog2[:elasticsearch][:cluster_discovery_timeout]       = 5000
-default.graylog2[:elasticsearch][:discovery_initial_state_timeout] = '3s'
-default.graylog2[:elasticsearch][:request_timeout]                 = '1m'
-default.graylog2[:server][:alert_check_interval] = nil
-default.graylog2[:ip_of_master]                  = node.ipaddress
-default.graylog2[:lb_recognition_period_seconds] = 3
-default.graylog2[:transport_email_enabled]           = false
-default.graylog2[:transport_email_hostname]          = 'mail.example.com'
-default.graylog2[:transport_email_port]              = 587
-default.graylog2[:transport_email_use_auth]          = true
-default.graylog2[:transport_email_use_tls]           = true
-default.graylog2[:transport_email_use_ssl]           = true
-default.graylog2[:transport_email_auth_username]     = 'you@example.com'
-default.graylog2[:transport_email_auth_password]     = 'secret'
-default.graylog2[:transport_email_subject_prefix]    = '[graylog]'
-default.graylog2[:transport_email_from_email]        = 'graylog@example.com'
-default.graylog2[:transport_email_web_interface_url] = nil
-default.graylog2[:server][:log_file]              = '/var/log/graylog-server/server.log'
-default.graylog2[:server][:log_max_size]          = '50MB'
-default.graylog2[:server][:log_max_index]         = 10
-default.graylog2[:server][:log_pattern]           = "%d{yyyy-MM-dd'T'HH:mm:ss.SSSXXX} %-5p [%c{1}] %m%n"
-default.graylog2[:server][:log_level_application] = 'info'
-default.graylog2[:server][:log_level_root]        = 'warn'
-default.graylog2[:server][:java_bin] = '/usr/bin/java'
-default.graylog2[:server][:java_home] = ''
-default.graylog2[:server][:java_opts] = '-Djava.net.preferIPv4Stack=true -Xms1g -Xmx1g -XX:NewRatio=1 -server -XX:+ResizeTLAB -XX:+UseConcMarkSweepGC -XX:+CMSConcurrentMTEnabled -XX:+CMSClassUnloadingEnabled -XX:+UseParNewGC -XX:-OmitStackTraceInFastThrow'
-default.graylog2[:server][:args]      = ''
-default.graylog2[:server][:wrapper]   = ''
-default.graylog2[:server][:gc_warning_threshold] = nil
-default.graylog2[:server][:override_restart_command] = false
-default.graylog2[:server][:additional_options]       = nil
-default.graylog2[:server][:additional_env_vars]      = nil
-default.graylog2[:server][:install_tzdata_java]      = true
-default.graylog2[:web][:enable] = true
-default.graylog2[:web][:listen_uri] = 'http://0.0.0.0:9000'
-default.graylog2[:web][:endpoint_uri] = nil
-default.graylog2[:web][:enable_cors] = nil
-default.graylog2[:web][:enable_gzip] = nil
-default.graylog2[:web][:enable_tls] = nil
-default.graylog2[:web][:tls_cert_file] = nil
-default.graylog2[:web][:tls_key_file] = nil
-default.graylog2[:web][:tls_key_password] = nil
-default.graylog2[:web][:max_header_size] = nil
-default.graylog2[:web][:max_initial_line_length] = nil
-default.graylog2[:web][:thread_pool_size] = nil
-default.graylog2[:sidecar][:release]                        = '0.0.9'
-default.graylog2[:sidecar][:version]                        = '0.0.9'
-default.graylog2[:sidecar][:build]                          = 1
-default.graylog2[:sidecar][:arch]                           = 'amd64'
-default.graylog2[:sidecar][:package_base_url]               = "https://github.com/Graylog2/collector-sidecar/releases/download/#{node.graylog2[:sidecar][:release]}"
-default.graylog2[:sidecar][:server_url]                     = 'http://localhost:9000/api'
-default.graylog2[:sidecar][:update_interval]                = 10
-default.graylog2[:sidecar][:tls_skip_verify]                = false
-default.graylog2[:sidecar][:send_status]                    = false
-default.graylog2[:sidecar][:list_log_files]                 = nil # single directory or '[dir1, dir2, dir3]'
-default.graylog2[:sidecar][:name]                           = 'graylog-collector-sidecar'
-default.graylog2[:sidecar][:id]                             = 'file:/etc/graylog/collector-sidecar/collector-id'
-default.graylog2[:sidecar][:log_path]                       = '/var/log/graylog/collector-sidecar'
-default.graylog2[:sidecar][:log_rotation_time]              = 86400
-default.graylog2[:sidecar][:log_max_age]                    = 604800
-default.graylog2[:sidecar][:tags]                           = 'linux' # multiple tags '[tag1, tag2, tag3]'
-default.graylog2[:sidecar][:backends][:nxlog][:enabled]               = false
-default.graylog2[:sidecar][:backends][:nxlog][:binary_path]           = '/usr/bin/nxlog'
-default.graylog2[:sidecar][:backends][:nxlog][:configuration_path]    = '/etc/graylog/collector-sidecar/generated/nxlog.conf'
-default.graylog2[:sidecar][:backends][:filebeat][:enabled]            = true
-default.graylog2[:sidecar][:backends][:filebeat][:binary_path]        = '/usr/bin/filebeat'
-default.graylog2[:sidecar][:backends][:filebeat][:configuration_path] = '/etc/graylog/collector-sidecar/generated/filebeat.yml'
-default.graylog2[:server][:collector_inactive_threshold]    = '1m'
-default.graylog2[:server][:collector_expiration_threshold]  = '14d'
-default.graylog2[:server][:content_packs_loader_enabled] = false
-default.graylog2[:server][:content_packs_dir]            = '/usr/share/graylog-server/contentpacks'
-default.graylog2[:server][:content_packs_auto_load]      = 'grok-patterns.json'
BREAKS HERE
-  every_enabled_rds do |rds|
-  databases = [Drivers::Db::Factory.build(application, node)] if rdses.blank?
-
BREAKS HERE
-when 'rhel'
-  include_recipe 'yum-epel'
BREAKS HERE
-  command "cmd /c \\\"#{client_cmd} > NUL 2>&1\\\""
BREAKS HERE
-
-      ####################
-      # Load Current Value
-      ####################
-
-      load_current_value do
-        # Grab the container and assign the container property
-        begin
-          with_retries { container Docker::Container.get(container_name, connection) }
-        rescue Docker::Error::NotFoundError
-          current_value_does_not_exist!
-        end
-
-        # Go through everything in the container and set corresponding properties:
-        # c.info['Config']['ExposedPorts'] -> exposed_ports
-        (container.info['Config'].to_a + container.info['HostConfig'].to_a).each do |key, value|
-          next if value.nil? || key == 'RestartPolicy'
-          # Image => image
-          # Set exposed_ports = ExposedPorts (etc.)
-          property_name = to_snake_case(key)
-          public_send(property_name, value) if respond_to?(property_name)
-        end
-
-        # RestartPolicy is a special case for us because our names differ from theirs
-        restart_policy container.info['HostConfig']['RestartPolicy']['Name']
-        restart_maximum_retry_count container.info['HostConfig']['RestartPolicy']['MaximumRetryCount']
-      end
BREAKS HERE
-version          "0.2.4"
BREAKS HERE
-        provider Chef::Provider::Service::Upstart
BREAKS HERE
-default[:exhibitor][:defaultconfig][:zookeeper_install_directory] = '/opt/zookeeper/*'
BREAKS HERE
-      config.royal_crown.node_attributes.keys.should =~ [:reliable, :tasty]
-      other_config.royal_crown.node_attributes.should == {:tasty => "maybe"}
BREAKS HERE
-            node.set["sensu"]["yum_repo_releasever"] = "dory"
BREAKS HERE
-        return unless http_resp.code.start_with?('20')
BREAKS HERE
-  action [ :enable, :disable ]
BREAKS HERE
-  variables :web_passwords => web_passwords
BREAKS HERE
-    extend ChefVaultItem if Kernel.const_defined?("ChefVaultItem")
BREAKS HERE
-      node.set['osquery']['version'] = '1.7.3'
-    stub_command('`which osqueryi` -version').and_return('osqueryi version 1.7.1')
-  let(:osquery_vers) { '1.7.3' }
-  it 'fetches osquery pkg' do
BREAKS HERE
-end
BREAKS HERE
-              # If segment_filenames is fixed before ManifestV2 is merged, remove this.
-              file = file['full_path'] if file.is_a?(Hash)
BREAKS HERE
-    'desc' => 'Hadoop HDFS NameNode',
BREAKS HERE
-case node['platform_family']
-when 'debian', 'ubuntu'
-  package %w(transmission transmission-cli transmission-daemon)
-else
-  package %w(transmission transmission-cli transmission-daemon)
-end
BREAKS HERE
-    tar xzf #{src_filename} -C #{extract_path}
BREAKS HERE
-version '0.4.5'
-depends 'windows', '~> 1.38.0'
BREAKS HERE
-              kind_of: [String, nil]
BREAKS HERE
-  mode      0644
BREAKS HERE
-  it "displays the user's email account" do 
BREAKS HERE
-  auth_host auth_uri
BREAKS HERE
-version '2.10.0'
BREAKS HERE
-    cmd = "#{node["nova"]["floating_cmd"]} --ip_range=#{floating["ipv4_range"]}"
-    not_if "nova-manage floating list"
BREAKS HERE
-  if bigtop_release.casecmp('develop') && !(node['hadoop'].key?('yum_repo_url') || node['hadoop'].key?('apt_repo_url'))
-  validate_repo_key = bigtop_release.casecmp('develop') ? false : true
BREAKS HERE
-      "ubuntu" => { "default" => :run }
BREAKS HERE
-default['openldap']['ssl_cert'] = "#{openldap['ssl_dir']}/#{openldap['server']}.pem"
BREAKS HERE
-        expect { subject.source(invalid_uri) }.to raise_error(Berkshelf::InvalidSourceURI)
BREAKS HERE
-# Cookbook Name:: security
BREAKS HERE
-
-    default['nfs']['client-services'] = \
-      if node['platform_version'] == '7.0.1406'
-        %w(nfs-lock.service)
-      else
-        %w(nfs-config.service nfs-client.target)
-      end
-
-  default['nfs']['server_flags'] = \
-    if node['nfs']['threads'] >= 0
-      "-u -t -n #{node['nfs']['threads']}"
-    else
-      '-u -t'
-    end
-
-
-
-
-        # Debian 6.0
-        when 6 # (1..6)
-          default['nfs']['packages'] = %w(nfs-common portmap)
-          default['nfs']['service']['portmap'] = 'portmap'
-        when 9 # (9..99)
-          # identical to Ubuntu > 15.04?!
-          default['nfs']['service']['lock'] = 'rpc-statd'
-          default['nfs']['service']['idmap'] = 'nfs-idmapd'
-          default['nfs']['client-services'] = %w(portmap lock nfs-config.service)
-
-
-
BREAKS HERE
-attribute :name, :kind_of => String, :name_attribute => true
-attribute :cookbook, :kind_of => String, :default => 'cron'
-attribute :predefined_value, :kind_of => [String], :default => nil, :callbacks => { 'should be a valid predefined value' => lambda { |spec| validate_predefined_value(spec) } }
-attribute :minute, :kind_of => [Integer, String], :default => '*', :callbacks => { 'should be a valid minute spec' => lambda { |spec| validate_numeric(spec, 0, 59) } }
-attribute :hour, :kind_of => [Integer, String], :default => '*', :callbacks => { 'should be a valid hour spec' => lambda { |spec| validate_numeric(spec, 0, 23) } }
-attribute :day, :kind_of => [Integer, String], :default => '*', :callbacks => { 'should be a valid day spec' => lambda { |spec| validate_numeric(spec, 1, 31) } }
-attribute :month, :kind_of => [Integer, String], :default => '*', :callbacks => { 'should be a valid month spec' => lambda { |spec| validate_month(spec) } }
-attribute :weekday, :kind_of => [Integer, String], :default => '*', :callbacks => { 'should be a valid weekday spec' => lambda { |spec| validate_dow(spec) } }
-attribute :command, :kind_of => String, :required => true
-attribute :user, :kind_of => String, :default => 'root'
-attribute :mailto, :kind_of => [String, NilClass]
-attribute :path, :kind_of => [String, NilClass]
-attribute :home, :kind_of => [String, NilClass]
-attribute :shell, :kind_of => [String, NilClass]
-attribute :comment, :kind_of => [String, NilClass]
-attribute :environment, :kind_of => Hash, :default => {}
-attribute :mode, :kind_of => [String, Integer], :default => '0644'
BREAKS HERE
-depends           "yum", '< 3'
BREAKS HERE
-        if params['iter']
-          iter = params['iter'].to_i
-        else
-          iter = 1
-        end
-        digest = OpenSSL::Digest.new(algo.gsub('-', ''))
BREAKS HERE
-  rpm-plugin-selinux
BREAKS HERE
-  action :enable
BREAKS HERE
-    command "bash #{node['eucalyptus']['home-directory']}/init.sh"
BREAKS HERE
-    property :force, Boolean
BREAKS HERE
-  provider Chef::Provider::Service::Upstart if node['platform'] == 'ubuntu' && node['platform_version'].to_f >= 13.04
BREAKS HERE
-        variables(docker_name: docker_name)
BREAKS HERE
-    describe '/var/cache/cinder' do
-      let(:dir) { chef_run.directory('/var/cache/cinder') }
BREAKS HERE
-case node['platform']
-when 'mac_os_x'
-  # FIXME: The resource has three distinct groups of properties used in
-  # different providers... should we make multiple resource types instead?
-  git_client 'default' do
-    osx_dmg_app_name  node['git']['osx_dmg']['app_name']
-    osx_dmg_package_id node['git']['osx_dmg']['package_id']
-    osx_dmg_volumes_dir node['git']['osx_dmg']['volumes_dir']
-    osx_dmg_url node['git']['osx_dmg']['url']
-    osx_dmg_checksum node['git']['osx_dmg']['checksum']
-    action :install
-  end
-else
-  git_client 'default' do
-    action :install
-  end
-end
BREAKS HERE
-      host node['postfixadmin']['database']['host']
-      password db_password
-      action :create
-    end
-
-    postgresql_database_user node['postfixadmin']['database']['user'] do
-      connection postgresql_connection_info
-      action :grant
BREAKS HERE
-platform_options["#{db_type}_python_packages"].each do |pkg|
-  package pkg do
-    action :install
BREAKS HERE
-    cacher.name(node['apt']['cacher_ipaddress'])
-    cacher.set['ipaddress'] = node['apt']['cacher_ipaddress']
-    cacher.set['port'] = node['apt']['cacher_port']
BREAKS HERE
-  user_name stack_domain_admin
-  action :grant_role
BREAKS HERE
-describe HealthInspector::Checklists::Cookbooks do
-    expect(HealthInspector::Context).to receive(:new).with(nil).
-      and_return health_inspector_context
-      health_inspector_context.stub_chain(:rest, :get_rest).
-        with('/cookbooks').and_return({
-        'cookbook_one' => { 'versions' => [{ 'version' => '1.0.0' }] },
-        'cookbook_two' => { 'versions' => [{ 'version' => '0.0.1' }] }
-      })
-      expect(checklist.server_items).to eq({
-      })
-      expect(checklist.local_items).to eq({
-      })
BREAKS HERE
-      @client.converge(@run_context)
BREAKS HERE
-      parse if File.exists?(@filepath)
-      File.exists?(filepath) && !File.read(filepath).strip.empty?
-      unless File.exists?(environment_file)
BREAKS HERE
-    if new_resource.package_source
-      # parse the file from the source URL
-      package_file = PushJobsHelper.package_file(node['push_jobs']['package_url'])
-
-      remote_file "#{Chef::Config[:file_cache_path]}/#{package_file}" do
-        source new_resource.package_source
-        checksum new_resource.package_checksum unless new_resourcce.package_checksum.nil?
-      end
BREAKS HERE
-  cmd = shell_out("#{appcmd(node)} list apppool #{desired.name}")
BREAKS HERE
-        version: '6.4'
BREAKS HERE
-      it "raises a LocalJumpError if no block is given" do
-        lambda {
-          described_class.open(config)
-        }.should raise_error(LocalJumpError)
-  describe "#node" do
-    subject { instance.node }
-
-    it { should be_a(Ridley::NodeResource) }
-    its(:server_url) { should eql(config[:server_url]) }
-    its(:validator_path) { should eql(config[:validator_path]) }
-    its(:validator_client) { should eql(config[:validator_client]) }
-    its(:encrypted_data_bag_secret) { should eql(instance.encrypted_data_bag_secret) }
-    its(:ssh) { should eql(config[:ssh]) }
-    its(:winrm) { should eql(config[:winrm]) }
-    its(:chef_version) { should eql(config[:chef_version]) }
-  end
-    subject { instance }
-    it "returns a string" do
-      subject.encrypted_data_bag_secret.should be_a(String)
-    end
-        subject.stub(:encrypted_data_bag_secret_path) { nil }
-        subject.encrypted_data_bag_secret.should be_nil
-        subject.stub(:encrypted_data_bag_secret_path) { fixtures_path.join("not.txt").to_s }
-        lambda {
-          subject.encrypted_data_bag_secret
-        }.should raise_error(Ridley::Errors::EncryptedDataBagSecretNotFound)
BREAKS HERE
-        dependency = get_demand(name) || Dependency.new(berksfile, name, locked_version: version)
-        [ name, version, dependency ]
BREAKS HERE
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb"'
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb"'
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" HOME="/home/deploy" USER="deploy" ' \
-          'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" HOME="/home/deploy" USER="deploy" ' \
-            'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" HOME="/home/deploy" USER="deploy" ' \
-            'dummy-project.c298jfowejf.us-west-2.rds.amazon.com/dummydb" HOME="/home/deploy" USER="deploy" ' \
BREAKS HERE
-  compile_time true if Chef::Resource::ChefGem.method_defined?(:compile_time)
BREAKS HERE
-  source    node['confluence']['url']
-  checksum  node['confluence']['checksum']
-  mode      '0755'
-  action    :create_if_missing
-  mode   '0755'
BREAKS HERE
-ruby_block "minimize_access_to_root" do 
-  block do
-    `chmod 750 '/bin/su'` if not node['security']['users']['allow'].include?("change_user")
BREAKS HERE
-default[:ruby][:deb] = "ruby#{node[:ruby][:major_version]}_#{node[:ruby][:full_version]}-#{node[:ruby][:patch]}.#{node[:ruby][:pkgrelease]}_#{arch}.deb"
-default[:ruby][:rpm] = "ruby#{node[:ruby][:major_version].delete('.')}-#{node[:ruby][:full_version]}-#{node[:ruby][:patch]}-#{node[:ruby][:pkgrelease]}.#{rhel_arch}.rpm"
BREAKS HERE
-  delayed_attrs = {_FULL_VERSION: hdp_version}
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
-depends 'openstack-identity', '>= 14.0.0'
-depends 'openstack-image', '>= 14.0.0'
-depends 'openstack-network', '>= 14.0.0'
BREAKS HERE
-version          '1.1.0'
BREAKS HERE
-        %w[rhel amazon] => "centos#{node['platform_version'].to_i}",
-    rescue StandardError => e
BREAKS HERE
-require "hashie"
-require "hashie/logger"
-Hashie.logger = Logger.new(nil)
BREAKS HERE
-    # Returns version of Java for given compiled file
-    def compiled_with?(path)
-      cmd_str = "javap -verbose #{path}"
-      cmd = Mixlib::ShellOut.new(cmd_str)
-      Chef::Log.debug("#{path} was compiled with Java #{java_version}")
-      Chef::Application.fatal!("Cannot disassemble #{path} file: #{e}")
-    def jvm_version_changed?(path)
-      node['java']['jdk_version'] != compiled_with?(path)
-                           jvm_version_changed?(decryptor_path)
BREAKS HERE
-unit = "rspec spec/"
-lint = "cookstyle"
-syntax = "foodcritic . --exclude spec -f any -t ~supermarket"
BREAKS HERE
-    packagecloud_repo 'imeyer/runit'
BREAKS HERE
-version '11.0.0'
BREAKS HERE
-        add_source(CookbookSource.new(name, constraint))
BREAKS HERE
-  cmdstr = "rabbitmq-plugins list -e '#{name}\\b'"
BREAKS HERE
-  cmd = Mixlib::ShellOut.new("rabbitmqctl -q list_users |grep '^#{name}\\b'")
-  Chef::Log.debug "rabbitmq_user_exists?: rabbitmqctl -q list_users |grep '^#{name}\\b'"
-  Chef::Log.debug "rabbitmq_user_has_tag?: rabbitmqctl -q list_users | grep \"^#{name}\\b\" | grep #{tag}"
-  cmdStr = "rabbitmqctl -q list_user_permissions #{name} | grep ^/#{vhost}\\s"
-  begin
-    cmd.error!
-    current_permissions = cmd.stdout.each_line.first.split.drop(1)
-    Chef::Log.info "Rights for #{name} are #{current_permissions} (we want #{perm_list})"
-    current_permissions == perm_list
-  rescue Exception => e
-    Chef::Log.warn "User has probably no right on that virtual host: #{e}"
-    false
-    execute "rabbitmqctl add_user #{new_resource.user} #{new_resource.password}" do
-      Chef::Log.debug "rabbitmq_user_add: rabbitmqctl add_user #{new_resource.user} #{new_resource.password}"
-    execute "rabbitmqctl delete_user #{new_resource.user}" do
-      Chef::Log.debug "rabbitmq_user_delete: rabbitmqctl delete_user #{new_resource.user}"
-    execute "rabbitmqctl set_permissions #{vhostOpt} #{new_resource.user} \"#{perm_list.join("\" \"")}\"" do
-      Chef::Log.fatal "rabbitmq_user_set_permissions: rabbitmqctl set_permissions #{vhostOpt} #{new_resource.user} \"#{perm_list.join("\" \"")}\""
-  # clear the permissions if they exist, empty perm_list for any permissions
-    execute "rabbitmqctl clear_permissions #{vhostOpt} #{new_resource.user}" do
-      Chef::Log.fatal "rabbitmq_user_clear_permissions: rabbitmqctl clear_permissions #{vhostOpt} #{new_resource.user}"
-    execute "rabbitmqctl set_user_tags #{new_resource.user} #{new_resource.user_tag}" do
-      Chef::Log.debug "rabbitmq_user_set_user_tags: rabbitmqctl set_user_tags #{new_resource.user} #{new_resource.user_tag}"
-    execute "rabbitmqctl set_user_tags #{new_resource.user}" do
-      Chef::Log.debug "rabbitmq_clear_user_tags: rabbitmqctl set_user_tags #{new_resource.user}"
BREAKS HERE
-  variables(:groups => groupnames)
BREAKS HERE
-      "password #{root_password}\" | debconf-set-selections"
BREAKS HERE
-      ::Berkshelf::CookbookGenerator.new([name, File.join(Dir.pwd, name)], options).invoke_all
BREAKS HERE
-              kind_of: [String, nil]
BREAKS HERE
-  "build_nodes": {},
BREAKS HERE
-    glance_cmd = "glance --insecure"
-      not_if "#{glance_cmd} image-list | grep #{img.to_s}-image"
BREAKS HERE
-          define_method(:respond_to_missing?) do |name, include_private|
-            if @context && respond_to?("#{@context}_#{name}".to_sym)
-              true
-            else
-              super(name, include_private)
-            end
-          end
-
BREAKS HERE
-  env_vars [{ 'CATALINA_PID' => '/opt/tomcat_helloworld/bin/non_standard_location.pid' }, { 'SOMETHING' => 'some_value'}]
BREAKS HERE
-default['chef_client']['channel'] = 'stable'
-default['chef_client']['prevent_downgrade'] = true
-default['chef_client']['version'] = 'latest'
-default['chef_client']['post_install_action'] = 'kill'
BREAKS HERE
-        checked[dependency.name] = true
-
-    def satisfies_transitive?(graph_item, checked)
-      graph_item.dependencies.all? do |name, constraint|
-        return true if checked[name]
-        checked[name] = true
-        return false if graphed.nil?
-        Semverse::Constraint.new(constraint).satisfies?(graphed.version) &&
-        satisfies_transitive?(graphed, checked)
BREAKS HERE
-log "Found chef-client in #{client_bin}" do
-  level :debug
-end
BREAKS HERE
-module ::Openstack # rubocop:disable Documentation
BREAKS HERE
-        host: nil,
BREAKS HERE
-
-
-
-
-
-
-
-
BREAKS HERE
-        req_path = '/bin/querybuilder.json?'\
-          'path=/home/users&'\
-          pass
BREAKS HERE
-      unless OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY, token)
BREAKS HERE
-      @url ||= if @options[:host].first.include?(':')
-                 URI("#{sch}://[#{@options[:host].first}]:#{port}").to_s
-                 URI("#{sch}://#{@options[:host].first}:#{port}").to_s
-      [options[:port]].flatten.each do |port|
-        if listen(options[:host], port)
BREAKS HERE
-ruby_block "#{name}" do
-    node.set[:dynatrace][:collector][:installation][:is_required] = Dynatrace::Helpers.requires_installation?(installer_prefix_dir, installer_path, 'collector', type=:jar)
BREAKS HERE
-    keyserver 'keyserver.ubuntu.com'
BREAKS HERE
-    '--skip-controls',
-    '--skip-acl',
BREAKS HERE
-default["bluepill"]["bin"] = "#{node['languages']['ruby']['bin_dir']}/bluepill"
-default["bluepill"]["logfile"] = "/var/log/bluepill.log"
-default["bluepill"]["pid_dir"] = "/var/run/bluepill"
-default["bluepill"]["state_dir"] = "/var/lib/bluepill"
-default["bluepill"]["group"] = 0
-default["bluepill"]["use_rsyslog"] = false
-when "arch"
-  default["bluepill"]["init_dir"] = "/etc/rc.d"
-  default["bluepill"]["conf_dir"] = "/etc/bluepill"
-  default["bluepill"]["defaults_dir"] = "/etc/default"
-when "freebsd"
-  default["bluepill"]["init_dir"] = "/usr/local/etc/rc.d"
-  default["bluepill"]["conf_dir"] = "/usr/local/etc/bluepill"
-  default["bluepill"]["defaults_dir"] = "/etc/defaults"
-  default["bluepill"]["init_dir"] = "/etc/init.d"
-  default["bluepill"]["conf_dir"] = "/etc/bluepill"
-when "fedora","rhel"
-  default["bluepill"]["defaults_dir"] = "/etc/sysconfig"
-when "debian","ubuntu"
-  default["bluepill"]["defaults_dir"] = "/etc/default"
BREAKS HERE
-  notifies :run, 'bash[install_vim]', :immediately
-  action :nothing
BREAKS HERE
-    def compile_metadata
BREAKS HERE
-      command =  %Q("#{options[:java]}")
-      command << %Q( -jar "#{options[:cli]}")
-      command << " -s #{URI.escape(options[:endpoint])}" if options[:endpoint]
-      command << %Q( -i "#{options[:key]}")  if options[:key]
-      command << " -p #{uri_escape(options[:proxy])}"    if options[:proxy]
-      command << " #{pieces.join(' ')}"
-      command = Mixlib::ShellOut.new(command, command_options.merge(timeout: options[:timeout]))
-      command.run_command
-      command.error!
-      command.stdout.strip
BREAKS HERE
-  include_recipe 'winbox::chefdk_shortcut'
BREAKS HERE
-default['bcpc']['ceph']['rgw']['name'] = '.rgw.buckets'
BREAKS HERE
-
BREAKS HERE
-    role_name service_role
BREAKS HERE
-                JSON.parse(path)['build_version']
BREAKS HERE
-execute 'update-pam' do
-  command 'pam-auth-update --package'
-  action :nothing
-end
-
-  execute 'update-pam'
BREAKS HERE
-
-    it 'displays information about cookbook activity when current_user was nil at creation' do
-      test_cookbook_5_0.user = nil
-      activity = xml_body['feed']['entry'].first
-       expect(activity['author']['name']).to eql(test_cookbook.owner.name)
-       expect(activity['author']['uri']).to eql(user_url(test_cookbook.maintainer))
-    end
-end
BREAKS HERE
-# Copyright 2012-2013, Seth Vargo
-# Copyright 2012, CustomInk, LCC
-attribute :priority, kind_of: Fixnum
BREAKS HERE
-# Cookbook Name:: cron
-# Copyright 2008-2016, Chef Software, Inc.
-    if spec.is_a? Fixnum
-    if spec.class == Fixnum
-      return validate_numeric(spec, 1, 12)
-      return validate_numeric(spec, 1, 12)
-      return false
-    if spec.class == Fixnum
-      return validate_numeric(spec, 0, 7)
-      return validate_numeric(spec, 0, 7)
-      return false
BREAKS HERE
-    describe "#versions" do
BREAKS HERE
-version          '9.0.0'
BREAKS HERE
-    finalizer do
-      uploader.terminate if uploader && uploader.alive?
-    end
BREAKS HERE
-        node.set['graylog2']['sidecar']['version'] = '0.0.8'
-        node.set['graylog2']['sidecar']['build'] = 1
BREAKS HERE
-define :nginx_fastcgi, :servers => [], :root => nil, :static => nil, :fastcgi_param => [] do
-            :site_name => File.basename(params[:name]).chomp(File.extname(params[:name]))
BREAKS HERE
-      include ChefDK::Exceptions
-
-      # :base_dir => Relative path of the component w.r.t. omnibus_app_dir
-        File.join(omnibus_app_dir, component_info[:base_dir])
BREAKS HERE
-include_recipe 'postfix::hash_maps' if node['postfix']['hash_maps']
BREAKS HERE
-%w{ hadoop_client scala spark-core }.each do |pkg|
BREAKS HERE
-  let(:connection) { double('chef-connection') }
-  subject { described_class.new(double('registry')) }
-  before  { subject.stub(connection: connection) }
-  describe "#download_file" do
BREAKS HERE
-  def self.package_file(url = 'http://www.opscode.com/chef/install.sh')
BREAKS HERE
-version '0.3.0'
BREAKS HERE
-        Chef::Log.warn("You have specified replicated, so the attribute replica_count will be set to be the same number as the bricks you have")
-        node.set['gluster']['server']['volumes']["#{volume_name}"]["replica_count"] = "#{brick_count}"
BREAKS HERE
-  default['postfix']['aliases_db'] = 'opt/omni/etc/postfix/aliases'
BREAKS HERE
-    if major.nil? || major == '1'
-    else
-
BREAKS HERE
-node.set['openstack']['identity']['adminURL'] = identity_admin_endpoint.to_s
-node.set['openstack']['identity']['internalURL'] = identity_internal_endpoint.to_s
-node.set['openstack']['identity']['publicURL'] = identity_public_endpoint.to_s
BREAKS HERE
-ark 'nsq' do
-  # ark is broken in the case of bumping versions
-  # (it continues to use a cached download)
-  # by adding the version to the name, this effectively fixes it
-  name nsq_release
BREAKS HERE
-version '1.10.23'
BREAKS HERE
-                if ($exact_version_check == 0 && CPAN::Version->vcmp($inst_v, "#{module_version}") >= 0){
-                }elsif($exact_version_check == 1 &&  CPAN::Version->vcmp($inst_v, "#{module_version}") != 0){
BREAKS HERE
-        .select { |file| File.exist?(file) }
-        .each do|file|
-          Chef::Log.info "suid_sgid: Blacklist SUID/SGID for '#{file}', removing bit..."
-          remove_suid_sgid_from(file)
-        end
BREAKS HERE
-        when 6.0, 6.1, 6.2, 6.3, 10
BREAKS HERE
-depends "openstack-image"
-depends "openstack-identity", ">= 7.0.0"
-depends "openstack-common", ">= 0.1.7"
BREAKS HERE
-    source r.name
BREAKS HERE
-elsif node.yocto?
-  service_name = 'rsyslogd'
-  config_file = '/etc/syslog.conf'
-  not_if { node.yocto? || node.macosx? }
-actions = [:start]
-support = { :status => true }
-# rsyslog, unlike sysklogd, needs a full restart to pick up configs, because
-# it uses HUP (i.e. reload) only to close descriptors (i.e. logrotate).  Given
-# that sysklogd is going to be out of the equation and it would be the only
-# one using a reload action for picking up configs, I'm defaulting to
-# :restart.
-support.merge({ :restart => true, :reload => true }) unless node.macosx?
-support.merge({ :status => false, :reload => false }) if node.yocto?
-  supports support
BREAKS HERE
-  case node['platform_family']
-  when 'windows'
-    ::Win32::Service.exists? 'sumo-collector'
-  else
-    ::File.exist? '/etc/init.d/collector'
-  end
BREAKS HERE
-template "/etc/resolv.conf" do
-  source "resolv.conf.erb"
-  owner "root"
-  group "root"
-  mode 0644
BREAKS HERE
-    notifies :restart, 'service[neutron-server]'
-# and not the api server components, so we ignore restart
-# failures here as there may be no neutron-server process
-  ignore_failure true
-  notifies :restart, 'service[neutron-server]', :delayed
-  notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
-    notifies :restart, 'service[neutron-server]', :delayed
BREAKS HERE
-      envs.collect do |resource|
-        future(:delete, resource)
-      end.map(&:value)
BREAKS HERE
-depends 'openstack-common', '>= 11.0.0'
BREAKS HERE
-      expect(chef_run).to execute_compliance_report('chef-server').with(
-        owner: nil,
-        server: nil,
-        token: nil,
-        quiet: true,
-      )
-    it 'executes execute_compliance_report[chef-server]' do
-      expect(chef_run).to execute_compliance_report('chef-server')
-
BREAKS HERE
-      until (Dir.entries(file) & %w(metadata.rb metadata.json)).any?
BREAKS HERE
-cookbook_file_path = File.join(cookbook_dir, "files", "default", "#{context.new_file_basename}")
BREAKS HERE
-        if property_is_set?(:restart_policy) &&
-        if new_resource.autoremove == true && (property_is_set?(:restart_policy) && restart_policy != 'no')
BREAKS HERE
-  directory node['spark']['spark_env']['spark_log_dir'] do
BREAKS HERE
-      Dovecot::Protocols.list(conf).join(' ')
BREAKS HERE
-version           "7.0.5"
BREAKS HERE
-      cmd = "#{chef_zero_path} --host #{@addr} --port #{@state.port} -d"
-      if TasteTester::Config.chef_zero_logging
-        cmd << " --log-file #{@log_file} --log-level debug"
-      end
-      if TasteTester::Config.use_ssl
-        cmd << ' --ssl'
-      Mixlib::ShellOut.new(cmd).run_command.error!
-      logger.info('Killing your chef-zero instances')
-      s = Mixlib::ShellOut.new("pkill -9 -u #{ENV['USER']} -f bin/chef-zero")
-      s.run_command
-      # You have to give it a moment to stop or the stat fails
-      sleep(1)
BREAKS HERE
-        map.map do |k, v|
-          if v.is_a? Hash
-            # treat it as a new group and process the child hash
-            # in a separate options run
-            "#{k} {\n" + options(v, indentation + 1) + "}\n"
-          elsif v.is_a? Array
-            # treat it as multiple calls to the same element
-            v.map { |x| "#{k} #{x};\n" }.join(indent)
-          else
-            # for anything else, just join it up
-            "#{k} #{v};\n"
-          end
-        end.join(indent)
BREAKS HERE
-maintainer 'Copyright © 2017 Microsoft. All rights reserved.'
-version '0.1.0'
-
-depends 'chef-client'
BREAKS HERE
-      it 'has signing_dir' do
-        expect(chef_run).to render_file(file.name).with_content('signing_dir = /var/cache/cinder/api')
-      end
-
-      it 'has auth_uri' do
-        expect(chef_run).to render_file(file.name).with_content('auth_uri = http://127.0.0.1:5000/v2.0')
-      end
-      it 'has auth_host' do
-        expect(chef_run).to render_file(file.name).with_content('auth_host = 127.0.0.1')
-      end
-      it 'has auth_port' do
-        expect(chef_run).to render_file(file.name).with_content('auth_port = 35357')
-      end
-      it 'has auth_protocol' do
-        expect(chef_run).to render_file(file.name).with_content('auth_protocol = http')
-      end
-      it 'has no auth_version when auth_version is v2.0' do
-        expect(chef_run).not_to render_file(file.name).with_content('auth_version = v2.0')
-      end
-      it 'has auth_version when auth version is not v2.0' do
-        node.set['openstack']['block-storage']['api']['auth']['version'] = 'v3.0'
-        expect(chef_run).to render_file(file.name).with_content('auth_version = v3.0')
BREAKS HERE
-  revision "v1.1.2"
BREAKS HERE
-    require 'minitest'
BREAKS HERE
-    it { is_expected.to eq('yum' => '> 3.0.0') }
BREAKS HERE
-# This file autogenerated by Chef
-# Do not edit, changes will be overwritten
BREAKS HERE
-
-service 'fail2ban' do
-  supports [status: true, restart: true]
-  action [:enable, :start]
-
-  if (platform?('ubuntu') && node['platform_version'].to_f < 12.04) ||
-     (platform?('debian') && node['platform_version'].to_f < 7)
-    # status command returns non-0 value only since fail2ban 0.8.6-3 (Debian)
-    status_command "/etc/init.d/fail2ban status | grep -q 'is running'"
-  end
-end
BREAKS HERE
-        downloader.download!(source)
BREAKS HERE
-    variables(
-      mgmt_users: wildfly['users']['mgmt'],
-      api_user: lazy { node.run_state['wf_chef_user_' + new_resource.service_name] }
-    )
BREAKS HERE
-  default[:ruby][:patch] = platform?('ubuntu') && node[:platform_version] == '14.04' ? 'p481' : 'p451' # this attribute will disapier in favor of the sematic versioning schema
-  default[:ruby][:patch] = ''  # this attribute will disapier in favor of the sematic versioning schema
BREAKS HERE
-  %w(centos redhat fedora amazon) => { 'default' => '2.10.0-1' },
-  %w(debian ubuntu raspbian) => { 'default' => '2.10.0-1' },
-  %w(windows) => { 'default' => '2.10.0' }
BREAKS HERE
-        @output = {cookbooks: [], errors: [], messages: []}
-        @cookbooks = {}
-        @cookbooks.each do |name, details|
-          @output[:cookbooks] << details
-        print MultiJson.dump(@output)
-        @cookbooks[cookbook] ||= {}
-        @cookbooks[cookbook][:version] = version
-        @cookbooks[cookbook][:location] = location.to_s
-      def use(cookbook, version, path=nil)
-        @cookbooks[cookbook] ||= {}
-        @cookbooks[cookbook][:version] = version
-        @cookbooks[cookbook][:location] = path if path
-      def upload(cookbook, version, chef_server_url)
-        @cookbooks[cookbook] ||= {}
-        @cookbooks[cookbook][:version] = version
-        @cookbooks[cookbook][:uploaded_to] = chef_server_url
-        @output[:messages] << message
-        @output[:errors] << message
BREAKS HERE
-  mode 0755
-  mode 0755
BREAKS HERE
-        msg << " at path: '#{cached.path}'" if source.location.is_a?(CookbookSource::PathLocation)
BREAKS HERE
-    banner('Usage: spiceweasel [option] file\n       spiceweasel [option] --extractlocal')
BREAKS HERE
-  pending
BREAKS HERE
-  #check if https listener already exists
-  winrm_cmd = "powershell.exe winrm enumerate winrm/config/listener"
-  shell_out.run_command  
-  if !shell_out.stdout.include? "Transport = HTTPS"
BREAKS HERE
-cookbook_file Helper.home('.zsh/ssh.zsh') do
-  owner Helper.user
-end
-
BREAKS HERE
-default["airflow"]["config"]["core"]["sql_alchemy_conn"] = "sqlite///#{node["airflow"]["config"]["core"]["airflow_home"]}/airflow.db"
BREAKS HERE
-default['cassandra']['opscenter']['server']['authentication'] = false 
BREAKS HERE
-        # use agent proxy settings if available
-        hostname = resolve_correct_hostname(run_status.node, config)
-        # Send the metrics
-        metrics =
-            .for_hostname(hostname)
-            .using_run_status(run_status)
-        # Collect tags
-        tags =
-            .for_hostname(hostname)
-            .for_node(node)
-            .with_application_key(@config[:application_key])
-        # Build the event
-        event =
-            .for_hostname(hostname)
-            .using_run_status(run_status)
-            .with_tags(tags.combined_host_tags)
-
-        # Submit the details back to Datadog
-        begin
-          metrics.emit_to_datadog
-          event.emit_to_datadog
-          tags.update_to_datadog
-        rescue Errno::ECONNREFUSED, Errno::ETIMEDOUT => e
-          Chef::Log.error("Could not connect to Datadog. Connection error:\n" + e)
-          Chef::Log.error('Data to be submitted was:')
-          Chef::Log.error(event.event_title)
-          Chef::Log.error(event.event_body)
-          Chef::Log.error('Tags to be set for this run:')
-          Chef::Log.error(tags.combined_host_tags)
-        end
-      ensure
-        # restore the env proxy settings before leaving
-        restore_env_proxies unless ENV['DATADOG_PROXY'].nil?
-      private
-      # @param node [Chef::Node] from `run_status`, can feasibly any `node`
-      # @param config [Hash] config object passed in to handler
-      def resolve_correct_hostname(node, config)
BREAKS HERE
-default['push_jobs']['chef']['verify_api_cert']     = false
BREAKS HERE
-        zone_objects.each do |resourceKey, resourceObject|
-          if resourceObject['object_class'] == 'object'
-            object_resources[resourceKey] = resourceObject
-          elsif resourceObject['object_class'] == 'template'
-            template_resources[resourceKey] = resourceObject
-            Chef::Application.fatal!("Unknown object_class (#{resourceObject['object_class']}), resourceKey=#{resourceKey}, resourceObject=#{resourceObject}", 1)
BREAKS HERE
-    TIMER_PATH = '/etc/systemd/timers'
-    UNIT_PATH = '/etc/systemd/system'
-    }
BREAKS HERE
-      extend ChefIngredientCookbook::Helpers
-      fqdn_resolves?(node['chef-server']['api_fqdn'])
BREAKS HERE
-default_action :create
BREAKS HERE
-package 'linux-generic-lts-xenial'
BREAKS HERE
-default[:exhibitor][:version] = "1.4.3"
-default[:exhibitor][:environment] = "stage"
-default[:exhibitor][:s3config] = ""
-default[:exhibitor][:s3backup] = "true"
BREAKS HERE
-include_recipe 'openstack-network::common'
BREAKS HERE
-        errors.full_messages.join(', ')
BREAKS HERE
-  admins "#{ node['fqdn'] },#{ bootstrap }"
BREAKS HERE
-
-
-
-# Attributes for Slack intergration using webhook. No API key required. 
-#default['chef_client']['handler']['slack']['webhooks']['name'].push('webhook1')
-#default['chef_client']['handler']['slack']['webhooks']['webhook1']['url'] = nil
-#default['chef_client']['handler']['slack']['webhooks']['webhook1']['fail_only'] = nil
-#default['chef_client']['handler']['slack']['webhooks']['webhook1']['detail_level'] = nil
-default['chef_client']['handler']['slack']['fail_only'] = nil
BREAKS HERE
-        action :stop
-      end
-
-      service mysql_name do
-        provider Chef::Provider::Service::Upstart
-        action :start
-        action :stop
-      end
-
-      service mysql_name do
-        provider Chef::Provider::Service::Upstart
-        action :start
BREAKS HERE
-      resource.instance_eval(&block) if block_given?
BREAKS HERE
-          '/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-          'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" ' \
-          'bundle exec sidekiqctl stop /run/lock/dummy_project/sidekiq_dummy_project-1.pid 8\''
-          '/bin/su - deploy -c \'cd /srv/www/dummy_project/current && ENV_VAR1="test" ' \
-          'ENV_VAR2="some data" RAILS_ENV="staging" HOME="/home/deploy" USER="deploy" '\
-          'bundle exec sidekiqctl stop /run/lock/dummy_project/sidekiq_dummy_project-2.pid 8\''
BREAKS HERE
-      it 'upgrades python-ceph package' do
-        expect(chef_run).to upgrade_package('python-ceph')
-      end
-
-      it 'honors platform package name and option overrides for ceph packages' do
-        node.set['openstack']['image']['platform']['package_overrides'] = '--override1 --override2'
-        node.set['openstack']['image']['platform']['ceph_packages'] = ['my-ceph']
-
-        expect(chef_run).to upgrade_package('my-ceph').with(options: '--override1 --override2')
-      end
-
-      it 'includes the ceph_client recipe from openstack-common' do
-        expect(chef_run).to include_recipe('openstack-common::ceph_client')
-      end
-
-      describe 'cephx client keyring file' do
-        let(:file) { chef_run.template('/etc/ceph/ceph.client.glance.keyring') }
-
-        it 'creates /etc/ceph/ceph.client.glance.keyring' do
-          expect(chef_run).to create_template(file.name).with(
-            user: 'glance',
-            group: 'glance',
-            mode: 00600,
-            cookbook: 'openstack-common'
-          )
-        end
-
-        it 'has the proper content' do
-          [/^\[client\.glance\]$/,
-           /^  key = rbd-pass$/].each do |content|
-            expect(chef_run).to render_file(file.name).with_content(content)
-          end
-        end
-        %w(store_ceph_conf store_user store_pool store_chunk_size).each do |attr|
-            node.set['openstack']['image']['api']['rbd']["rbd_#{attr}"] = "rbd_#{attr}_value"
-            expect(chef_run).to render_file(file.name).with_content(/^rbd_#{attr} = rbd_#{attr}_value$/)
BREAKS HERE
-#execute "Stop any running cloud process" do
-#  command "service eucalyptus-cloud stop || true"
-#  not_if  "ls /usr/share/eucalyptus/eucalyptus-core-4.0.0.jar"
-#end
-
-execute "Clear $EUCALYPTUS/var/run/eucalyptus" do
-	command "rm -rf #{node["eucalyptus"]["home-directory"]}/var/run/eucalyptus/*"
-end
-
-execute "Wait for credentials." do
-  command "rm -rf admin.zip && #{node["eucalyptus"]["home-directory"]}/usr/sbin/euca_conf --get-credentials admin.zip && unzip -o admin.zip"
-  cwd node['eucalyptus']['admin-cred-dir']
-  retries 10
-  retry_delay 50
-end
BREAKS HERE
-module Chef
-  module Recipe
BREAKS HERE
-	tempdir = "#{ENV['TEMP']}"
-		directory "#{tempdir}" do
-	 		inherits true
BREAKS HERE
-template_path = File.join(cookbook_dir, "templates", "default", template_filename)
BREAKS HERE
-execute "nova-manage network create --label=public" do
-  command "nova-manage network create --multi_host='T' --label=#{node["nova"]["network"]["public"]["label"]} --fixed_range_v4=#{node["nova"]["network"]["public"]["ipv4_cidr"]} --num_networks=#{node["nova"]["network"]["public"]["num_networks"]} --network_size=#{node["nova"]["network"]["public"]["network_size"]} --bridge=#{node["nova"]["network"]["public"]["bridge"]} --bridge_interface=#{node["nova"]["network"]["public"]["bridge_dev"]} --dns1=#{node["nova"]["network"]["public"]["dns1"]} --dns2=#{node["nova"]["network"]["public"]["dns2"]}"
-  action :run
-  not_if "nova-manage network list | grep #{node["nova"]["network"]["public"]["ipv4_cidr"]}"
-execute "nova-manage network create --label=private" do
-  command "nova-manage network create --multi_host='T' --label=#{node["nova"]["network"]["private"]["label"]} --fixed_range_v4=#{node["nova"]["network"]["private"]["ipv4_cidr"]} --num_networks=#{node["nova"]["network"]["private"]["num_networks"]} --network_size=#{node["nova"]["network"]["private"]["network_size"]} --bridge=#{node["nova"]["network"]["private"]["bridge"]} --bridge_interface=#{node["nova"]["network"]["private"]["bridge_dev"]}"
-  action :run
-  not_if "nova-manage network list | grep #{node["nova"]["network"]["private"]["ipv4_cidr"]}"
-end
-
-
BREAKS HERE
-chocolatey 'atom'
BREAKS HERE
-          :host_name, arg,
BREAKS HERE
-          package 'e2fsprogs'
BREAKS HERE
-          run_context.resource_collection.each do |resource|
BREAKS HERE
-package 'rabbitmq-server'
BREAKS HERE
-version '14.0.0'
-depends 'openstack-common', '>= 14.0.0'
BREAKS HERE
-      node.set['openstack']['db']['image']['service_type'] = 'sqlite'
-        node.set['openstack']['db']['image']['service_type'] = service_type
-        node.set['openstack']['db']['python_packages'][service_type] = ["my-#{service_type}-py"]
-      node.set['openstack']['db']['image']['service_type'] = 'sqlite'
-        node.set['openstack']['db']['image']['migrate'] = false
BREAKS HERE
-            expect(chef_run).to render_file(file.name).with_content(/^#{attr} = #{attr}_value1,#{attr}_value2$/)
BREAKS HERE
-if run_context.cookbook_collection['iptables'].version >= '3.0.0'
-  iptables_rule 'firewall_jump_rule' do
-    lines '-A INPUT -j OS_FIREWALL_ALLOW'
-  end
-else
-  iptables_rule 'firewall_jump_rule' do
-    content '-A INPUT -j OS_FIREWALL_ALLOW'
-  end
BREAKS HERE
-        rc = RegLoadKey(HKEY_USERS, "#{name}", file)
-        rc = RegUnLoadKey(HKEY_USERS, "#{name}")
-end
BREAKS HERE
-  # Host Agent is already installed
BREAKS HERE
-        if user.attribute?('max_buckets') && user['max_buckets'] > 0
-          max_buckets = "--max-buckets=#{user['max_buckets']}"
-        else
-          max_buckets = ''
-        end
-        rgw_admin = JSON.parse(%x[radosgw-admin user create --display-name="#{user['name']}" --uid="#{user['uid']}" "#{max_buckets}" --access_key="#{access_key}" --secret="#{secret_key}"])
-          rgw_admin_cap = JSON.parse(%x[radosgw-admin caps add --uid="#{user['uid']}" --caps="#{user['admin_caps']}"])
-
-      user['buckets'].each do | bucket |
-          command "radosgw-admin2 --user #{user['uid']} --endpoint #{node['ceph']['radosgw']['default_url'] } --port #{node['ceph']['radosgw']['port']} --key #{access_key} --secret #{secret_key} --bucket #{bucket} --action create"
-    node['ceph']['pools']['radosgw']['federated_zone_instances'].each do | inst |
-          if user.attribute?('max_buckets') && user['max_buckets'] > 0
-            max_buckets = "--max-buckets=#{user['max_buckets']}"
-          else
-            max_buckets = ''
-          end
-          rgw_admin = JSON.parse(%x[sudo radosgw-admin user create --name client.radosgw.#{inst['region']}-#{inst['name']} --display-name="#{user['name']}" --uid="#{user['uid']}" "#{max_buckets}" --access_key="#{access_key}" --secret="#{secret_key}"])
-            rgw_admin_cap = JSON.parse(%x[sudo radosgw-admin caps add --name client.radosgw.#{inst['region']}-#{inst['name']} --uid="#{user['uid']}" --caps="#{user['admin_caps']}"])
-
-      #if user.attribute?('buckets')
-      #end
-
BREAKS HERE
-include_recipe 'build-essential::default'
-include_recipe 'stackstorm::_python'
-include_recipe 'git::default'
-include_recipe 'stackstorm::user'
-[
-  node['stackstorm']['home'],
-  node['stackstorm']['etc_dir']
-].each do |path|
-  directory "creating st2 directory #{path}" do
-    path path
-    owner 'root'
-    group 'root'
-    mode '0755'
-    action :create
-  end
-end
-# Create default user and group to run unprivileged StackStorm services.
-user 'st2' do
-  home '/home/st2'
-  supports manage_home: true
-  action :create
-end
-directory "st2:log_dir" do
-  path node['stackstorm']['log_dir']
-  owner node['stackstorm']['runas_user']
-  group node['stackstorm']['runas_group']
-  mode '0755'
-  action :create
-end
-case node['stackstorm']['install_method'].to_sym
-when :system_wide
-  stackstorm_install 'st2common' do
-    packages %w[ st2common ]
-    action :install
-  end
-  remote_file "#{node['stackstorm']['etc_dir']}/st2-requirements.txt" do
-    source 'https://raw.githubusercontent.com/StackStorm/st2/master/requirements.txt'
-    mode '0644'
-  end
-  python_pip "install St2 requirements.txt system-wide" do
-    package_name "-r #{node['stackstorm']['etc_dir']}/st2-requirements.txt"
-    action  :install
-  end
-end
-# Backup original st2.conf
-file "#{node['stackstorm'][:etc_dir]}/st2.conf.dist" do
-  content lazy { ::IO.read("#{node['stackstorm'][:etc_dir]}/st2.conf") }
-  not_if { ::File.exist?("#{node['stackstorm'][:etc_dir]}/st2.conf.dist") }
-  only_if { ::File.exist?("#{node['stackstorm'][:etc_dir]}/st2.conf") }
-template "#{node['stackstorm'][:etc_dir]}/st2.conf" do
-  owner 'root' and group 'root'
-  mode 0644
-  source 'st2.conf.erb'
-  variables lazy { {config: node['stackstorm']['config']} }
-  action :create
BREAKS HERE
-property :path, kind_of: String, name_attribute: true
-property :source, kind_of: String, required: true
-property :checksum, kind_of: String
BREAKS HERE
-tile_uid = node[:etc][:passwd][:"tile"][:uid]
-www_data_gid = node[:etc][:group][:"www-data"][:gid]
-
-ruby_block node[:tile][:node_file] do
-  block do
-    File.chown(tile_uid, www_data_gid, node[:tile][:node_file])
-    File.chmod(0640, node[:tile][:node_file])
-  end
-  not_if do
-    stat = File.stat(node[:tile][:node_file])
-    stat.uid == tile_uid && stat.gid == www_data_gid && stat.mode == 0640
-  end
BREAKS HERE
-         container.info['NetworkSettings']['Networks'][network_mode] &&
-         container.info['NetworkSettings']['Networks'][network_mode]['IPAMConfig'] &&
-         container.info['NetworkSettings']['Networks'][network_mode]['IPAMConfig']['IPv4Address']
-        ip_address container.info['NetworkSettings']['Networks'][network_mode]['IPAMConfig']['IPv4Address']
-              'Ulimits'         => new_resource.ulimits_to_hash,
-            attach_stderr == true ||
-            attach_stdin == true ||
-            attach_stdout == true ||
-            stdin_once == true
-        if network_mode == 'host' &&
-        if network_mode == 'container' &&
-            !(hostname.nil? || hostname.empty?) ||
-            !(dns.nil? || dns.empty?) ||
-            !(dns_search.nil? || dns_search.empty?) ||
-            !(mac_address.nil? || mac_address.empty?) ||
-            !(extra_hosts.nil? || extra_hosts.empty?) ||
-            !(exposed_ports.nil? || exposed_ports.empty?) ||
-            !(port_bindings.nil? || port_bindings.empty?) ||
-            !(publish_all_ports.nil? || publish_all_ports.empty?) ||
-            !port.nil?
-        return nil if network_mode == 'host'
-        hostname
-        return nil if ulimits.nil?
-        ulimits.map do |u|
BREAKS HERE
-      it 'has default vmware_* settings' do
-        [
-          /^vmware_server_host = $/,
-          /^vmware_server_username = $/,
-          /^vmware_server_password = vmware_secret_name$/,
-          /^vmware_datacenter_path = $/,
-          /^vmware_datastore_name = $/,
-          /^vmware_api_retry_count = 10/,
-          /^vmware_task_poll_interval = 5$/,
-          /^vmware_store_image_dir = \/openstack_glance$/,
-          /^vmware_api_insecure = false$/
-        ].each do |line|
-          expect(chef_run).to render_file(file.name).with_content(line)
-        end
-      end
-
-
-      it 'has default vmware_* settings' do
-        [
-          'vmware_server_host = ',
-          'vmware_server_username = ',
-          'vmware_server_password = vmware_secret_name',
-          'vmware_datacenter_path = ',
-          'vmware_datastore_name = ',
-          'vmware_api_retry_count = 10',
-          'vmware_task_poll_interval = 5',
-          'vmware_store_image_dir = /openstack_glance',
-          'vmware_api_insecure = false'
-        ].each do |line|
-          expect(chef_run).to render_file(file.name).with_content(
-            /^#{Regexp.quote(line)}$/)
-        end
-      end
BREAKS HERE
-      expect(chef_run).to grant_domain_openstack_user(
-        service_user
-      ).with(
-        domain_name: domain_name,
-        role_name: role_name,
-        connection_params: connection_params
-      )
-    end
-
-    it do
BREAKS HERE
-  secret = Chef::EncryptedDataBagItem.load_secret("#{node["sentry"]["data_bag_secret"]}")
BREAKS HERE
-        if (options.keys & [:path, :git]).size > 1
-          invalid = (options.keys & [:path, :git]).map { |opt| "'#{opt}" }
BREAKS HERE
-# DB Stamp comes late in dev cycle, allow override for development and test
-default['openstack']['network']['db_stamp'] = node['openstack']['release']
-
BREAKS HERE
-  :default => 'dovecot'
-  :default => 'dovecot'
-  :default => '/etc/dovecot'
-  :default => 'root'
BREAKS HERE
-include_recipe 'collectd::default'
BREAKS HERE
-# Cookbook Name:: chef_stack
-# Copyright 2017 Chef Software Inc
BREAKS HERE
-  cmd2exec = "curl --insecure --header 'Content-Type:multipart/form-data' -F file='@#{update_file}' -u #{user}:#{passwd} -v '#{rest_update_url}'" 
-  puts cmd2exec
-  %x[ #{cmd2exec} ]
BREAKS HERE
-# Copyright:: Copyright (c) 2013-2014 Onddo Labs, SL. (www.onddo.com)
-    { 'unix:director-userdb' => { 'mode' => '0666' } },
-    { 'inet' => { 'port' => '5432' } }
BREAKS HERE
-property    :cfg_cmd,   String,             name_attribute: true
BREAKS HERE
-    DIRNAME_REGEXP = /^(.+)-(\d+\.\d+\.\d+)$/
BREAKS HERE
-        set_or_return(:sv_timeout, arg, kind_of: [Fixnum])
-        if run_context && run_context.node && run_context.node[:runit]
-          run_context.node[:runit]
BREAKS HERE
-      if File.file?('./Berksfile')
-        objects['berksfile'] = nil
-        berksfile = Berksfile.new(objects['berksfile'])
-      end
-      roles = []
-      Dir.glob('roles/*.{rb,json}').each do |role_full_path|
-        role = grab_name_from_path(role_full_path)
-        Spiceweasel::Log.debug("dir_ext: role: '#{role}'")
-        roles << { role => nil }
-      end
-      objects['roles'] = roles.sort_by { |r| [r.keys[0]] } unless roles.nil?
-      objects['data bags'] = data_bags.sort_by { |d| [d.keys[0]] } unless data_bags.empty?
-      # NODES
-      # TODO: Cant use this yet as node_list.rb doesnt support node from file syntax but expects the node info to be part of the objects passed in
-      # nodes = []
-      # Dir.glob("nodes/*.{rb,json}").each do |node_full_path|
-      #   node = self.grab_name_from_path(node_full_path)
-      #   nodes  << {node => nil}
-      # end
-      # objects['nodes'] = nodes unless nodes.empty?
-      objects
BREAKS HERE
-auth_url = auth_uri_transform identity_endpoint.to_s, node['openstack']['api']['auth']['version']
-%w(telemetry telemetry-metric aodh).each do |telemetry_service|
-  when 'telemetry-metric'
-    admin: { url: admin_endpoint(telemetry_service) },
BREAKS HERE
-              to sv_bin
BREAKS HERE
-Chef::Log.info "  Creating Sumo Logic director at #{node['sumologic']['installDir']}"
-
BREAKS HERE
-    secret_file = node['cookbook-openshift3']['openshift_cloud_providers']['aws']['secret_file'] || nil
-    aws_vars = Chef::EncryptedDataBagItem.load(node['cookbook-openshift3']['openshift_cloud_providers']['aws']['data_bag_name'], node['cookbook-openshift3']['openshift_cloud_providers']['aws']['data_bag_item_name'], secret_file)
-    sysconfig_vars['aws_access_key_id'] = aws_vars['access_key_id']
-    sysconfig_vars['aws_secret_access_key'] = aws_vars['secret_access_key']
BREAKS HERE
-    # Create a recipe that controls a service using the specified method.
-    #
-    # @param [Symbol] method How to start the service, one of: :init_d, :invoke_rc_d, :upstart, :service, :service_full_path.
-    # @param [Boolean] do_sleep Whether to prefix the service cmd with a bash sleep
-    # @param [Symbol] action The action to take (start, stop, reload, restart)
-    def recipe_controls_service(method = :service, do_sleep = false, action = :start)
-      cmds = { :init_d => "/etc/init.d/foo #{action}", :invoke_rc_d => "invoke-rc.d foo #{action}", :upstart => "#{action} foo",
-               :service => "service foo #{action}", :service_full_path => "/sbin/service foo #{action}" }
-      write_recipe %Q{
-        execute "#{action}-foo-service" do
-          command "#{do_sleep ? 'sleep 5; ' : ''}#{cmds[method]}"
-          action :run
-        end
-      }
-    end
-
BREAKS HERE
-        # The actual things containers correspond to don't have to exist, as long as the container does
-          when "containers/environments", "containers/roles", "containers/policy_groups", "containers/policies"
-          when "containers/cookbooks", "containers/cookbook_artifacts", "containers/data"
-            {
-              "create" => { "groups" => %w{admins users clients} },
-              "read"   => { "groups" => %w{admins users clients} },
-              "update" => { "groups" => %w{admins users clients} },
-              "delete" => { "groups" => %w{admins users clients} },
-              "grant"  => { "groups" => %w{admins} },
-            }
BREAKS HERE
-      def send_report(reporter, server, user, profiles, report)
-          Reporter::ChefAutomate.new(entity_uuid, run_id, gather_nodeinfo, insecure, report).send_report
-
-        elsif reporter == 'chef-compliance'
-          raise_if_unreachable = node['audit']['raise_if_unreachable']
-          url = construct_url(server, File.join('/owners', user, 'inspec'))
-          if server
-            Reporter::ChefCompliance.new(url, gather_nodeinfo, raise_if_unreachable, cc_profile_index(profiles), report).send_report
-          else
-            Chef::Log.warn "'server' and 'token' properties required by inspec report collector #{reporter}. Skipping..."
-          end
-            Reporter::ChefServerAutomate.new(entity_uuid, run_id, gather_nodeinfo, insecure, report).send_report(url)
-        elsif reporter == 'chef-server-compliance' || reporter == 'chef-server' # chef-server is legacy reporter
-            Reporter::ChefServer.new(url, gather_nodeinfo, raise_if_unreachable, cc_profile_index(profiles), report).send_report
-          Reporter::JsonFile.new(report, timestamp).send_report
BREAKS HERE
-node['tomcat'].each{|k,v| node['tomcat'][k] = v.gsub("tomcat6", "tomcat#{node['tomcat']['base_version']}") if v.kind_of?(String) }
-template "/etc/tomcat#{node["tomcat"]["base_version"]}/server.xml" do
BREAKS HERE
-        cmd = %Q{rsync -rl #{rsync_permissions} --rsh="ssh #{ssh_args}" #{extra_opts}}
BREAKS HERE
-when 'arch', 'debian', 'rhel', 'fedora', 'suse', 'openbsd', 'freebsd'
BREAKS HERE
-attribute :user, :kind_of => String, :name_attribute => true
-attribute :password, :kind_of => String, :default => nil
-attribute :admin_user, :kind_of => String, :default => nil
-attribute :admin_password, :kind_of => String, :default => nil
-attribute :port, :kind_of => String, :default => nil
-attribute :aem_version, :kind_of => String, :default => node[:aem][:version]
-attribute :path, :kind_of => String, :default => nil #the path to the user in AEM
-attribute :group, :kind_of => String, :default => nil
BREAKS HERE
-      add_sources_dependencies
-    #   if true, after adding the source the dependencies defined in the
-    #   sources metadata will be added to the graph and downloaded
-    # @return [DepSelector::PackageVersion]
-
-      add_dependencies(package_version, source.cached_cookbook.dependencies) if include_dependencies
-      package_version
-    # @param [DepSelector::PackageVersion] parent_pkgver
-    #   the PackageVersion you would like to add the given dependencies to. In this case
-    #   the package version is a version of a Cookbook.
-    # @param [Hash] dependencies
-    #   A hash containing Cookbook names for keys and version constraint strings for
-    #   values. This is the same format obtained by sending the 'dependencies' message
-    #   to an instance of Chef::Cookbook::Metadata.
-    #   Example:
-    #       { 
-    #         "build-essential" => ">= 0.0.0",
-    #         "ohai" => "~> 1.0.2"
-    #       }
-    def add_dependencies(parent_pkgver, dependencies)
-      dependencies.each do |name, constraint|
-        dep_package = add_package(name)
-        parent_pkgver.dependencies << Dependency.new(dep_package, VersionConstraint.new(constraint))
-
-        unless has_source?(name)
-          source = CookbookSource.new(name, constraint)
-
-          use_source(source) || install_source(source)
-
-          dep_pkgver = add_version(dep_package, Version.new(source.cached_cookbook.version))
-          add_dependencies(dep_pkgver, source.cached_cookbook.dependencies)
-          set_source(source)
-        end
-      # Add the dependencies of each source to the graph
-      def add_sources_dependencies
-        sources.each do |source|
-          package_version = package(source.name)[Version.new(source.cached_cookbook.version)]
-          add_dependencies(package_version, source.cached_cookbook.dependencies)
-        end
-      end
-
BREAKS HERE
-directory node['haproxy']['conf_dir']
-template "/etc/init.d/haproxy" do
-  source "haproxy-init.erb"
-  owner "root"
-  group "root"
-  mode 00755
-  variables(
-    :hostname => node['hostname'],
-    :conf_dir => node['haproxy']['conf_dir'],
-    :prefix => "/usr"
-  )
BREAKS HERE
-  notifies :restart, 'service[kafka-broker]', :immediately
BREAKS HERE
-xvpvnc_bind = public_endpoint 'compute-xvpvnc-bind'
-novnc_bind = public_endpoint 'compute-novnc-bind'
-vnc_bind = public_endpoint 'compute-vnc-bind'
-vnc_proxy_bind = public_endpoint 'compute-vnc-proxy-bind'
-compute_api_bind = public_endpoint 'compute-api-bind'
-compute_metadata_api_bind = public_endpoint 'compute-metadata-api-bind'
-ec2_api_bind = public_endpoint 'compute-ec2-api-bind'
-serial_console_bind = public_endpoint 'compute-serial-console-bind'
BREAKS HERE
-# Copyright 2011, Opscode, Inc.
-  Chef::Log.fatal "rabbitmq_user_exists?: rabbitmqctl list_users |grep '^#{name}\\b'"
-  Chef::Log.fatal "rabbitmq_user_exists?: #{cmd.stdout}"
BREAKS HERE
-      no_host_uuid: { kind_of: Boolean },
BREAKS HERE
-include_recipe 'dynatrace::dynatrace_user'
BREAKS HERE
-  include_recipe 'apt::default'
-  include_recipe 'apt::default'
-
BREAKS HERE
-# bootstrap the shcluster and elect a captain if initial_captain set to true and this is the initial shcluster build
-if node['splunk']['shclustering']['mode'] == "captain"
-	execute 'bootstrap-shcluster' do
-	  command "#{splunk_cmd} bootstrap shcluster-captain -servers_list #{shcluster_servers_list} -auth '#{splunk_auth_info}'"
-	  not_if { ::File.exist?("#{splunk_dir}/etc/.setup_shcluster") }
-	  notifies :restart, 'service[splunk]'
-	end
-end
-
-file "#{splunk_dir}/etc/.setup_shcluster" do
-  content 'true\n'
-  owner node['splunk']['user']['username']
-  group node['splunk']['user']['username']
-  mode 00600
-end
-
-	notifies :restart, 'service[splunk]'
BREAKS HERE
-property :name, String, name_attribute: true
BREAKS HERE
-          @dog.emit_event(Dogapi::Event.new(event_data,
-                                            :msg_title => event_title,
-                                            :event_type => 'config_management.run',
-                                            :event_object => hostname,
-                                            :alert_type => alert_type,
-                                            :priority => event_priority,
-                                            :source_type_name => 'chef'
-                                            ), :host => hostname)
-          Chef::Log.debug("Submitted Chef event to Datadog for #{hostname}")
-          @dog.update_tags(hostname, new_host_tags)
-          Chef::Log.debug("Updated #{hostname}'s tags to #{new_host_tags}")
BREAKS HERE
-  not_if { ::File.exist? '/usr/local/bin/brew' }
-  not_if { ::File.exist? '/usr/local/bin/brew' }
BREAKS HERE
-  :name_attribute => true,
-  :kind_of        => String,
-  :regex          => /^[\w-]+$/
-  :kind_of => [TrueClass, FalseClass]
-  :kind_of        => String
BREAKS HERE
-        elsif ['weekly', 'monthly', 'yearly'].include?(
-          block['overrides']['rotation'])
BREAKS HERE
-        foodcritic_feedback: params[:foodcritic_feedback],
-        collaborator_failure: params[:collaborator_failure],
-        collaborator_failure: params[:collaborator_failure]
-  def require_evaluation_params
BREAKS HERE
-  include_recipe 'openstack-compute::api-metadata'
BREAKS HERE
-default['openstack']['orchestration']['heat_stack_user_role'] = 'heat_stack_user'
BREAKS HERE
-Given 'a cookbook that contains a LWRP that does not trigger notifications' do
-  write_provider("site", %Q{
BREAKS HERE
-  log_name = name
-  template "/etc/rsyslog.d/#{priority}-#{name}.conf" do
-    source template_source
-    cookbook cookbook_source
-    variables 'file_name' => file,
-              'severity' => severity,
-              'facility' => facility
BREAKS HERE
-depends 'rabbitmq'
BREAKS HERE
-        sources = hash[:sources].collect { |source| Berkshelf::CookbookSource.from_hash(source) }
-        sha = hash[:sha]
-
-        self.new(sources: sources, sha: sha, filepath: filepath)
-    # @return [Array<Berkshelf::CookbookSource>]
-    #   the list of sources in this lockfile
-    attr_reader :sources
-
-      @sources = options[:sources] || []
-      @sha = options[:sha]
-      sources = [sources].flatten unless sources.is_a?(Array)
-
-      unless sources.all? { |cookbook| cookbook.is_a?(Berkshelf::CookbookSource) }
-        raise Berkshelf::ArgumentError, "`source` must be a Berkshelf::CookbookSource!"
-      end
-
-      @sources = sources
-    def append(source)
-      unless source.is_a?(Berkshelf::CookbookSource)
-        raise Berkshelf::ArgumentError, "`source` must be a Berkshelf::CookbookSource!"
-      end
-
-      @sources.push(source) unless @sources.include?(source)
-    #   * :options [Hash] an arbitrary list of options for this lockfile
-        sources: sources
-  # Legacy support for old lockfiles
-  #
-  # @author Seth Vargo <sethvargo@gmail.com>
-  class LockfileLegacy
-    class << self
-      def parse(content)
-        sources = content.split("\n").collect do |line|
-          self.new(line).to_hash unless line.empty?
-        end.compact
-
-        {
-          sha: nil,
-          sources: sources
-        }
-    end
-    def initialize(content)
-      instance_eval(content).to_json
-    end
-    def cookbook(name, options = {})
-      @name = name
-      @options = options
-    end
-    def to_hash
-      {
-        name: @name.to_s,
-        options: @options.to_hash
-      }
-  end
BREAKS HERE
-  default[:ruby][:patch_version] = '0'
-  default[:ruby][:patch] = 'p353'
-  default[:ruby][:patch] = 'p484'
BREAKS HERE
-    "quantum_openvswitch_service" => "openvswitch",
BREAKS HERE
-    conf = "#{conf_d}/#{entry}"
-
-    file conf do
-      only_if { File.file?(conf) && File.extname(entry) == ".conf" && !keys.include?(File.basename(entry, ".conf")) }
BREAKS HERE
-EOS
BREAKS HERE
-default["glance"]["api"]["swift"]["store_container"] = "glance"             # node_attribute
-default["glance"]["api"]["swift"]["store_large_object_size"] = "200"        # node_attribute
-default["glance"]["api"]["swift"]["store_large_object_chunk_size"] = "200"  # node_attribute
BREAKS HERE
-  context 'Mysql + Puma + Apache2' do
BREAKS HERE
-    sys_gid_max: node['os-hardening']['auth']['sys_gid_max']
BREAKS HERE
-          ruby_block 'zap extra env files' do
BREAKS HERE
-  # service is one of 'compute', 'image', 'identity', 'network',
-  # and 'volume'
-      if type == 'pgsql'
-      when 'postgresql'
-        "#{type}://#{user}:#{pass}@#{host}:#{port}/#{name}"
-      when 'mysql'
-        "#{type}://#{user}:#{pass}@#{host}:#{port}/#{name}?charset=utf8"
-        "sqlite:///#{path}"
-      when 'db2'
-        if service == 'telemetry'
-          "db2://#{user}:#{pass}@#{host}:#{info['nosql']['port']}/#{name}"
-        else
-          "ibm_db_sa://#{user}:#{pass}@#{host}:#{port}/#{name}?charset=utf8"
-        end
BREAKS HERE
-  checksum = node['nodejs']['binary']['checksums']["linux_#{arch}"]
BREAKS HERE
-      request['User-Agent'] = Chef::REST::RESTRequest.user_agent
BREAKS HERE
-
-      uri = URI.parse("http://localhost:#{node['cq'][local_id]['port']}"\
-                        "#{node['cq']['healthcheck_resource']}")
BREAKS HERE
-file Chef::Config[:validation_key] do
-  action :delete
-  backup false
-  only_if { ::File.exists?(Chef::Config[:client_key]) }
BREAKS HERE
-is_master_server = server_info.master_server?
BREAKS HERE
-version '2.0.0'
BREAKS HERE
-          cmd_text = "Add-Computer -DomainName #{new_resource.name} -Credential $mycreds -Force:$true -Restart"
-          cmd_text << " /reboot"
-      $secpasswd = ConvertTo-SecureString '#{new_resource.domain_pass}' -AsPlainText -Force
-      $mycreds = New-Object System.Management.Automation.PSCredential ('#{new_resource.domain_user}', $secpasswd)
-      Remove-Computer -UnjoinDomainCredential $mycreds -Force:$true -Restart
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
BREAKS HERE
-    # @param [Berkshelf::Location] location
-    #   the location that is mismatched
-    #   the cached_cookbook that is mismatched
-    def initialize(location, cached_cookbook)
-      @location = location
-        "  cookbook '#{@location.name}'",
BREAKS HERE
-    notifies :create, 'ruby_block[reload_client_config]', :immediately
BREAKS HERE
-            environment: 'staging',
-               environment: 'staging',
BREAKS HERE
-default['openstack']['common']['client_version'] = '3.4.1'
BREAKS HERE
-    glance_api_ip = glance[0]['glance']['api_ipaddress']
-    glance_api_port = glance[0]['glance']['api_port']
-    glance_api_ip = node['glance']['api_ipaddress']
-    glance_api_port = node['glance']['api_port']
BREAKS HERE
-            # @config = Compliance::Configuration.new
-            # Chef::Log.info "Report to Chef Compliance: #{@config['server']}/owners/#{@config['user']}/inspec"
-            # @url = URI("#{@config['server']}/owners/#{@config['user']}/inspec")
-            token = @config['token']
BREAKS HERE
-    'db2_python_packages' => ['db2-odbc', 'python-ibm-db', 'python-ibm-db-sa'],
BREAKS HERE
-property :install_path, String, default: nil
BREAKS HERE
-        only_if { run_user == 'kubernetes' }
-        owner run_user
-                  container_runtime_service: container_runtime_service
BREAKS HERE
-    run_level :highest
-    command   full_command
BREAKS HERE
-      mode  '0755'
-    mode  '0644'
-  source   'ntp.conf.erb'
-  owner    node['ntp']['conf_owner']
-  group    node['ntp']['conf_group']
-  mode     '0644'
-  action   [:enable, :start]
BREAKS HERE
-  module Opscode::IIS
-    class Helper
BREAKS HERE
-  it 'write_to_file with interval enabled writes simple filename' do
-    report = 'some info'
-    profiles = [{'name'=> 'ssh', 'url'=> 'https://github.com/dev-sec/tests-ssh-hardening'}, {'name'=> 'linux', 'compliance'=> 'base/linux'}]
-    interval_enabled = true
-    write_to_file = false
-    @helpers.write_to_file(report, profiles, interval_enabled, write_to_file)
-    expected_file_path = File.expand_path("../../../../ssh_linux_.json", __FILE__)
-    expect(File).to exist("#{expected_file_path}")
-    File.delete("#{expected_file_path}")
-  end
-
-  it 'write_to_file with write to file enabled writes filename with timestamp' do
-    report = 'some info'
-    profiles = [{'name'=> 'ssh', 'url'=> 'https://github.com/dev-sec/tests-ssh-hardening'}, {'name'=> 'linux', 'compliance'=> 'base/linux'}]
-    interval_enabled = false
-    write_to_file = true
-    timestamp = Time.now.utc.to_s.gsub(" ", "_")
-    @helpers.write_to_file(report, profiles, interval_enabled, write_to_file)
-    expected_file_path = File.expand_path("../../../../ssh_linux_-#{timestamp}.json", __FILE__)
-
-  it 'check_attributes given true for write_to_file and interval_enabled returns false' do
-    write_to_file = true
-    interval_enabled = true
-    expect(@helpers.check_attributes(write_to_file, interval_enabled)).to eq false
-  end
BREAKS HERE
-    'db2_python_packages' => ['db2-odbc', 'python-ibm-db', 'python-ibm-db-sa'],
BREAKS HERE
-default['postfixadmin']['version'] = '2.3.6'
BREAKS HERE
-    owner "root"
-    group root_group
BREAKS HERE
-# Copyright:: 2018, Chef Software, Inc.
-property :user_store, [true, false], default: false
-  add_cert(OpenSSL::X509::Certificate.new(raw_source))
-    Chef::Log.info('Certificate not found')
-    gem 'win32-certstore', '>= 0.1.8'
-    Chef::Log.debug('Did not find win32-certstore >= 0.1.8 gem installed. Installing now')
-  def verify_cert
-    store.valid?(new_resource.source)
BREAKS HERE
-  case node['kernel']['machine'].to_s
-  when 'x86_64'
-    default['perl']['bitness'] = '64bit'
-  else
-    default['perl']['bitness'] = '32bit'
-  end
BREAKS HERE
-      # :base_dir => Relative path of the component w.r.t. #{omnibus_dir}/apps
-      attr_reader :omnibus_dir
-        locate_omnibus_dir
-      #
-      # Locates the directory components are installed on the system.
-      #
-      # In omnibus installations ruby lives at:
-      # omnibus_install_dir/embedded/bin and components live at
-      # omnibus_install_dir/embedded/apps
-      #
-      def locate_omnibus_dir
-        @omnibus_dir = config[:omnibus_dir] || File.expand_path(File.join(Gem.ruby, "..","..", "apps"))
-
-        raise OmnibusInstallNotFound.new() unless (omnibus_dir and File.directory?(omnibus_dir) )
-
-        File.join(omnibus_dir, component_info[:base_dir])
-            bin_path = File.expand_path(File.join(omnibus_dir, "..", "bin"))
-
-                "PATH" => "#{bin_path}:#{ENV['PATH']}"
BREAKS HERE
-        json = MultiJson.load(contents)
-        sources = json['sources'].collect { |s| Berkshelf::CookbookSource.from_json(s) }
-        sha = json['sha']
-        self.new(sources: sources, sha: sha)
-    # The default filename for the lockfile (Berksfile.lock)
-    DEFAULT_FILENAME = "#{Berkshelf::DEFAULT_FILENAME}.lock".freeze
-
-      @sources = options[:sources]
-      File.open(DEFAULT_FILENAME, 'wb') do |file|
BREAKS HERE
-    package 'init-system-helpers'
-
BREAKS HERE
-
BREAKS HERE
-  not_if "#{command_path} | grep #{node['docker_compose']['release']}"
BREAKS HERE
-# Determine service params
-service_config = {}
-service_config['consul'] = node['consul_template']['consul']
-service_config['templates'] = node['consul_template']['templates']
-
-optional_params = [
-  :token, :wait
-]
-
-optional_params.each do |key|
-  if node['consul_template'][key]
-    service_config[key] = node['consul_template'][key]
-  end
-end
-
-consul_template_config_filename = File.join(node['consul_template']['config_dir'], 'config.json')
-
-template consul_template_config_filename do
-  mode 0600
-  variables(
-    service_config: service_config
-  )
-when 'init'
-  consul_template_binary = "#{node['consul_template']['install_dir']}/consul-template"
-  config_dir = "-config #{consul_template_config_filename}"
-  command = "#{consul_template_binary} #{config_dir}"
-    variables(
-      consul_template_binary: "#{node['consul_template']['install_dir']}/consul-template",
-      config_dir: node['consul_template']['config_dir'],
-      command: command,
-    )
-
-    subscribes :restart, "file[#{consul_template_config_filename}]", :delayed
-    options(
-      consul_template_binary: "#{node['consul_template']['install_dir']}/consul-template",
-      config_file: consul_template_config_filename,
-    )
BREAKS HERE
-        ulimit: new_resource.ulimit
BREAKS HERE
-action_class do
-  def ohai_hint_path
-    path = ::File.join(::Ohai::Config.ohai.hints_path.first, new_resource.hint_name)
-    path << '.json' unless path.end_with?('.json')
-    path
-  end
-
-  def build_content
-    # passing nil to file produces deprecation warnings so pass an empty string
-    return nil if new_resource.content.nil? || new_resource.content.empty?
-    JSON.pretty_generate(new_resource.content)
-  end
-
-  def file_content(path)
-    return JSON.parse(::File.read(path))
-  rescue JSON::ParserError
-    Chef::Log.debug("Could not parse JSON in ohai hint at #{ohai_hint_path}. It's probably an empty hint file")
-    return nil
-  end
-end
-
BREAKS HERE
-  attribute(:source, kind_of: String, default: "nginx.conf.erb")
-  attribute(:access_log, kind_of: String, default: '/var/log/nginx/access.log')
-  attribute(:error_log, kind_of: String, default: '/var/log/nginx/error.log')
-      directory "#{new_resource.instance} :create /var/log/nginx" do
-        path "/var/log/nginx"
-        owner "www-data"
-        group "adm"
-        mode "0755"
-      directory "/run/nginx" do
-        owner "www-data"
-        group "root"
-        mode "0755"
-      directory "#{new_resource.instance} :create /etc/nginx" do
-        path "/etc/nginx"
-        owner "root"
-        group "root"
-        mode "0755"
-        directory "#{new_resource.instance} :create /etc/nginx/#{dir}" do
-          path "/etc/nginx/#{dir}"
-          owner "root"
-          group "root"
-          mode "0755"
-      template "#{new_resource.instance} :create /etc/nginx/nginx.conf" do 
-        path "/etc/nginx/nginx.conf"
-        source "nginx.conf.erb"
-        owner "root"
-        group "root"
-        cookbook "nginx"
-    service.environment({'PID' => '/run/nginx/nginx.pid'})
-    service.options :systemd, template: "nginx:systemd.erb"
-    service.options :upstart, template: "nginx:upstart.erb"
BREAKS HERE
-  default['ntp']['packages'] = %w(ntp ntpdate)
BREAKS HERE
-  :choice => [ 'YES', 'NO' ],
-  :choice => [ 'YES', 'NO' ],
-  :choice => [ 'YES', 'NO' ],
BREAKS HERE
-version '1.2.1'
BREAKS HERE
-# keyring = "/etc/ceph/#{node['ceph']['cluster']}.mon.keyring"
-keyring = "/tmp/#{node['ceph']['cluster']}.mon.keyring"
BREAKS HERE
-log 'debug client_cmd' do
-  message "Final client_cmd: #{client_cmd}"
-  level :debug
-end
-
BREAKS HERE
-	variables(
-	)
-    action %i[enable stop]
-    action %i[disable stop]
BREAKS HERE
-        !([:create, :create_if_missing] & Array(resource.action).map(&:to_sym)).empty?
BREAKS HERE
-  notifies :restart, 'service[datadog-agent-sysprobe]', :delayed unless sysprobe_agent_start == false
-  notifies :restart, 'service[datadog-agent]', :delayed unless sysprobe_agent_start == false
-  subscribes :restart, "template[#{system_probe_config_file}]", :delayed unless sysprobe_agent_start == false
BREAKS HERE
-  get_password("heat")
BREAKS HERE
-default[:apache][:version] = '2.4' unless node[:platform_version] < '13.10'
-
BREAKS HERE
-  :seeds            => [], :concurrent_reads => 32,
BREAKS HERE
-# Cookbook Name:: chef_handlers
-# Copyright 2011, Chef Software, Inc.
BREAKS HERE
-recipe 'openstack-compute::api-metadata', 'Installs the nova metadata package'
-recipe 'openstack-compute::api-os-compute', 'Installs OS API'
-recipe 'openstack-compute::client', 'Install nova client packages'
-recipe 'openstack-compute::compute', 'nova-compute service'
-recipe 'openstack-compute::conductor', 'Installs nova conductor service'
-recipe 'openstack-compute::libvirt', 'Installs libvirt, used by nova compute for management of the virtual machine environment'
-recipe 'openstack-compute::libvirt_rbd', 'Manages the RBD portions of libvirt. Included by openstack-compute::libvirt'
-recipe 'openstack-compute::identity_registration', 'Registers the API endpoints with Keystone'
-recipe 'openstack-compute::network', 'Installs nova network service'
-recipe 'openstack-compute::nova-cert', 'Installs nova-cert service'
-recipe 'openstack-compute::nova-common', 'Builds the basic nova.conf config file with details of the rabbitmq, mysql, glance and keystone servers'
-recipe 'openstack-compute::nova-setup', 'Sets up the nova database on the mysql server, including the initial schema and subsequent creation of the appropriate networks'
-recipe 'openstack-compute::scheduler', 'Installs nova scheduler service'
-recipe 'openstack-compute::vncproxy', 'Installs and configures the vncproxy service for console access to VMs'
-recipe 'openstack-compute::serialproxy', 'Installs and configures the serialproxy service for serial console access to VMs'
-
-depends 'selinux', '~> 0.9.0'
BREAKS HERE
-    'hadoop_log_dir' => hadoop_log_dir,
BREAKS HERE
-require 'chef/rest'
BREAKS HERE
-    action       actions
-    supports     [:restart, :reload, :status]
BREAKS HERE
-      @ui ||= ::Thor::Shell::Color.new
BREAKS HERE
-        when 'installer'
-          "#{product}-#{jira_arch}.bin"
-        when 'standalone'
-          "#{product}.tar.gz"
-        when 'war'
-          fail 'WAR install type is no longer supported by Atlassian and removed from this cookbook.'
BREAKS HERE
-          return raise RestErrorResponse.new(412, "Unsolvable versions!")
BREAKS HERE
-        @options[:client_name] ||= Berkshelf::Config.instance.chef.node_name
-        @options[:client_key] ||= Berkshelf::Config.instance.chef.client_key
-                         api_key = client_options.delete(:api_key) || ENV['ARTIFACTORY_API_KEY']
BREAKS HERE
-              "#{error_state_barrier} recent attempts to get OSGi "\
-              "#{path_desc(path)} state have failed! Rescuing, as "\
BREAKS HERE
-    not_if "euca-describe-services | grep osg-#{uf_ip}"
BREAKS HERE
-        @_berkshelf_path ||= tmp_path.join('berkshelf').expand_path
-        @_tmp_path ||= app_root.join('tmp').expand_path
-        @_fixtures_path ||= app_root.join('spec/fixtures').expand_path
-        @_chef_config_path ||= app_root.join('spec/config/knife.rb').expand_path.to_s
-        @_chef_config ||= Berkshelf::Chef::Config.from_file(chef_config_path)
-        # The "root" of berkshelf
-        #
-        # @return [Pathname]
-        def app_root
-          @_app_root ||= Pathname.new(File.expand_path('../../..', __FILE__))
-        end
-
-        def purge_store_and_configs!
-          FileUtils.rm_rf(tmp_path)
-          FileUtils.mkdir(tmp_path)
-
-          FileUtils.mkdir(Berkshelf.berkshelf_path)
-          FileUtils.mkdir(Berkshelf.cookbooks_dir)
-
BREAKS HERE
-    Chef::Log.debug("Skipping deploy::php application #{application} as it is not an PHP app")
BREAKS HERE
-  variables :certificate => certificate
BREAKS HERE
-      let(:resolver) { double('resolver') }
-      before(:each) { Berkshelf::Resolver.stub(:new) { resolver } }
-      context "when a lockfile is not present" do
-        before(:each) do
-          subject.should_receive(:lockfile_present?).and_return(false)
-          resolver.should_receive(:sources).and_return([])
-        let(:cached_cookbooks) do
-          [
-            double('cached_one'),
-            double('cached_two')
-          ]
-        it "returns the result from sending the message resolve to resolver" do
-          resolver.should_receive(:resolve).and_return(cached_cookbooks)
-          subject.install.should eql(cached_cookbooks)
-        end
-        it "sets a value for self.cached_cookbooks equivalent to the return value" do
-          resolver.should_receive(:resolve).and_return(cached_cookbooks)
-          subject.install
-          subject.cached_cookbooks.should eql(cached_cookbooks)
-        end
-        it "creates a new resolver and finds a solution by calling resolve on the resolver" do
-          resolver.should_receive(:resolve)
-          subject.install
-        end
-        it "writes a lockfile with the resolvers sources" do
-          resolver.should_receive(:resolve)
-          subject.should_receive(:write_lockfile).with([])
-          subject.install
-        end
-      end
-      context "when a lockfile is present" do
-        before(:each) { subject.should_receive(:lockfile_present?).and_return(true) }
-        it "does not write a new lock file" do
-          resolver.should_receive(:resolve)
-          subject.should_not_receive(:write_lockfile)
-          subject.install
-        end
-      end
-      context "when a value for :path is given" do
-        before(:each) { resolver.should_receive(:resolve) }
-        it "sends the message 'vendor' to Berksfile with the value for :path" do
-          path = double('path')
-          subject.class.should_receive(:vendor).with(subject.cached_cookbooks, path)
-          subject.install(path: path)
-        end
-      end
-      context "when a value for :except is given" do
-        before(:each) { resolver.should_receive(:resolve) }
-        it "filters the sources and gives the results to the Resolver initializer" do
-          filtered = double('sources')
-          subject.should_receive(:sources).with(except: [:skip_me]).and_return(filtered)
-          Resolver.should_receive(:new).with(anything, sources: filtered)
-          subject.install(except: [:skip_me])
-        end
-      end
-      context "when a value for :only is given" do
-        before(:each) { resolver.should_receive(:resolve) }
-        it "filters the sources and gives the results to the Resolver initializer" do
-          filtered = double('sources')
-          subject.should_receive(:sources).with(only: [:skip_me]).and_return(filtered)
-          subject.install(only: [:skip_me])
-        end
-      end
BREAKS HERE
-        symbolized = Hash[options.map {|k, v| [k.to_sym, v] }]
-        from_file(options[:berksfile], symbolized.select { |k, | [:except, :only, :delete].include? k })
BREAKS HERE
-      16 => 'STOPPED'
BREAKS HERE
-# Set `enable_log_agent` to:
BREAKS HERE
-  node.default['rabbitmq'][key] = node['rabbitmq'][key].gsub('{VERSION}', version)
BREAKS HERE
-      'aws' => {}
-      when 'aws'
-        config_vars['aws']['zone'] = Chef::HTTP.new('http://169.254.169.254/latest/meta-data/placement/availability-zone').get('/')
-end
BREAKS HERE
-    @priority = options[:priority] || calculate_priority(@ip_address)
-        :comment => comment_part,
-        :priority => calculate_priority(entries[0])
-      return 81 if ip_address == IPAddr.new("127.0.0.1")
-      return 80 if IPAddr.new("127.0.0.0/8").include?(ip_address) # local
-      return 60 if IPAddr.new(ip_address, Socket::AF_UNSPEC).ipv4? # ipv4
-      return 20 if IPAddr.new(ip_address, Socket::AF_UNSPEC).ipv6? # ipv6
-      return 00 #
-
-  private
-  # Proxy to the class method
-  def calculate_priority(ip_address)
-    Entry.send(:calculate_priority, ip_address)
-  end
BREAKS HERE
-  mode 0755
BREAKS HERE
-  attribute :concurrency, :kind_of => [ TrueClass, FalseClass ]
BREAKS HERE
-  fail(Chef::Exceptions::UnsupportedPlatform, node['platform'])
-    fail(Chef::Exceptions::ValidationFailed, "Invalid app entry '#{a}'")
BREAKS HERE
-version          '0.4.0'
BREAKS HERE
-
-    resp = search(:node, query, &block)
BREAKS HERE
-provides :dynamo_db
-
BREAKS HERE
-    'local6.*;local7.*' => "-#{node['rsyslog']['default_log_dir']}/localmessages"
-    'local7.*' => "#{node['rsyslog']['default_log_dir']}/boot.log"
-    '*.emerg' => ':omusrmsg:*'
BREAKS HERE
-    :port => node['mesos']['port'],
BREAKS HERE
-        # Debian 6.0
-        when 6 # (1..6)
-          default['nfs']['packages'] = %w(nfs-common portmap)
-          default['nfs']['service']['portmap'] = 'portmap'
-        when 9 # (9..99)
-          # identical to Ubuntu > 15.04?!
-          default['nfs']['service']['lock'] = 'rpc-statd'
-          default['nfs']['service']['idmap'] = 'nfs-idmapd'
-          default['nfs']['client-services'] = %w(portmap lock nfs-config.service)
BREAKS HERE
-end
BREAKS HERE
-    notifies :restart, "service[mysql]", :delayed
-        # Commented out to prevent mysql from always restarting when 1 head-node 
-        #notifies :run, "bash[remove-bare-gcomm]", :delayed
-package "percona-xtradb-cluster-server-5.5" do
-    action :upgrade
-end
-
-
-ruby_block "initial-mysql-config" do
-    block do
-        if not system "mysql -uroot -p#{get_config('mysql-root-password')} -e 'SELECT user from mysql.user where User=\"haproxy\"'" then
-            %x[ mysql -u root -e "UPDATE mysql.user SET password=PASSWORD('#{get_config('mysql-root-password')}') WHERE user='root'; FLUSH PRIVILEGES;"
-                mysql -u root -p#{get_config('mysql-root-password')} -e "UPDATE mysql.user SET host='%' WHERE user='root' and host='localhost'; FLUSH PRIVILEGES;"
-                mysql -u root -p#{get_config('mysql-root-password')} -e "GRANT USAGE ON *.* to #{get_config('mysql-galera-user')}@'%' IDENTIFIED BY '#{get_config('mysql-galera-password')}';"
-                mysql -u root -p#{get_config('mysql-root-password')} -e "GRANT ALL PRIVILEGES on *.* TO #{get_config('mysql-galera-user')}@'%' IDENTIFIED BY '#{get_config('mysql-galera-password')}';"
-                mysql -u root -p#{get_config('mysql-root-password')} -e "INSERT INTO mysql.user (Host,User) VALUES ('%','haproxy');"
-                mysql -u root -p#{get_config('mysql-root-password')} -e "FLUSH PRIVILEGES;"
-            ]
-        end
-    end
-end
BREAKS HERE
-node["chef_client"]["bin"] = client_bin
-  frequency_modifier (node['chef_client']['interval'].to_i / 60)
BREAKS HERE
-when "Debian","Ubuntu"
BREAKS HERE
-          elsif defined?(Chef::Resource.descendants)
-            # Chef 12.3. Like 12.2, but each class has its own node_map.
-            Chef::Resource.descendants.map {|klass| klass.node_map.instance_variable_get(:@map).keys }.flatten
-          else
-            # Chef < 12.3. There is no actual API for this.
-            Chef::Resource.node_map.instance_variable_get(:@map).keys
-          end.map {|name| name.to_s }.select {|name| name.start_with?('application_') }
BREAKS HERE
-  'patch.exe' => 'patch.bat'
BREAKS HERE
-    entries << "# This file is (partially) managed by Chef, using the hostsfile cookbook."
-    entries = entries + (unique_entries.sort)
BREAKS HERE
-extend RsyslogCookbook::Helpers
-
-declare_rsyslog_service
BREAKS HERE
-    expect(chef_run).to create_cookbook_file '/etc/apparmor.d/usr.sbin.ntpd'
-    file = chef_run.cookbook_file('/etc/apparmor.d/usr.sbin.ntpd')
BREAKS HERE
-        username: new_resource.username
BREAKS HERE
-      node.set['openstack']['identity']['syslog']['use'] = true
-        node.set['openstack']['identity']['identity']['domain_specific_drivers_enabled'] = true
-      node.set['openstack']['db']['identity']['service_type'] = 'sqlite'
-            node.set['openstack']['identity']['syslog']['use'] = true
-                node.set['openstack']['identity']['ldap']['use_tls'] = true
-        node.set['openstack']['db']['identity']['migrate'] = false
-        node.set['openstack']['identity']['pipeline']['public_api'] = 'public_service'
-        node.set['openstack']['identity']['pipeline']['api_v3'] = 'service_v3'
-        node.set['openstack']['identity']['misc_paste'] = ['MISC1 = OPTION1', 'MISC2 = OPTION2']
-      before { node.set['openstack']['identity']['pastefile_url'] = 'http://server/mykeystone-paste.ini' }
-          node.set['openstack']['identity']['ssl']['enabled'] = true
-          node.set['openstack']['identity']['custom_template_banner'] = 'custom_template_banner_value'
-            node.set['openstack']['identity']['ssl']['enabled'] = true
-            node.set['openstack']['identity']['ssl']['chainfile'] = '/etc/keystone/ssl/certs/chainfile.pem'
-            node.set['openstack']['identity']['ssl']['ciphers'] = 'ciphers_value'
-            node.set['openstack']['identity']['ssl']['cert_required'] = true
BREAKS HERE
-if node[:networking][:resolved]
-  service "systemd-resolved" do
-    action [:enable, :start]
-  end
-
-  directory "/etc/systemd/resolved.conf.d" do
-    owner "root"
-    group "root"
-    mode 0o755
-  end
-
-  template "/etc/systemd/resolved.conf.d/99-chef.conf" do
-    source "resolved.conf.erb"
-    owner "root"
-    group "root"
-    mode 0o644
-    notifies :restart, "service[systemd-resolved]"
-  end
-
-  file "/etc/resolv.conf" do
-    action :delete
-    not_if { ::File.symlink?("/etc/resolv.conf") }
-  end
-
-  link "/etc/resolv.conf" do
-    to "../run/systemd/resolve/stub-resolv.conf"
-  end
-  package "resolvconf" do
-    action :purge
-  end
-else
-  unless node[:networking][:nameservers].empty?
-    link "/etc/resolv.conf" do
-      action :delete
-      link_type :symbolic
-      to "/run/resolvconf/resolv.conf"
-      only_if { File.symlink?("/etc/resolv.conf") }
-    end
-    template "/etc/resolv.conf" do
-      source "resolv.conf.erb"
-      owner "root"
-      group "root"
-      mode 0o644
-    end
-  end
BREAKS HERE
-version '1.5.0'
BREAKS HERE
-    def password_column_name
-UPDATE mysql.user SET #{password_column_name}=PASSWORD('#{Shellwords.escape(new_resource.initial_root_password)}')#{password_column_name} WHERE user = 'root';
BREAKS HERE
-windows_package "Web Platform Installer" do
BREAKS HERE
-      :globals => global_modules,
-      :modules => rsync_modules
-  string.to_s.gsub(/_/, ' ')
BREAKS HERE
-  elsif joined_cluster?(var_node_name_to_join, var_cluster_status)
BREAKS HERE
-                environment({
-                 'DBUS_SESSION_BUS_ADDRESS' => "unix:path=/run/user/#{node['etc']['passwd'][r.user]['uid']}/bus"
-                }) if r.user
BREAKS HERE
-  if node["chef_client"]["ca_cert_path"]
-    command "mkitab '#{node['chef_client']['svc_name']}:2:once:/usr/bin/startsrc -e \"SSL_CERT_FILE=#{node["chef_client"]["ca_cert_path"]}\" -s #{node['chef_client']['svc_name']} > /dev/console 2>&1'"
BREAKS HERE
-    path =  "/etc/init.d/#{name}"
BREAKS HERE
-            not_if new_resource.exists_command, :environment => new_resource.environment
-            only_if new_resource.exists_command, :environment => new_resource.environment
-            only_if new_resource.exists_command, :environment => new_resource.environment
BREAKS HERE
-    def install_mixlib_versioning
-      # We need Mixlib::Versioning in the library helpers for
-      # parsing the version string.
-      chef_gem "#{new_resource.product_name}-mixlib-versioning" do # ~FC009 foodcritic needs an update
-        package_name 'mixlib-versioning'
-        compile_time true
-      end
-      require 'mixlib/versioning'
-    def install_mixlib_install
-      # TODO: Change this code to install mixlib-install from rubygems before merge.
-      chef_gem "#{new_resource.product_name}-mixlib-install" do # ~FC009 foodcritic needs an update
-        package_name 'mixlib-install'
-        compile_time true
-        source '/home/vagrant/mixlib-install/pkg/mixlib-install-0.8.0.gem'
-      require 'mixlib/install'
BREAKS HERE
-      if new_resource.policy_members.include?(policy.policy_arn)
-        new_policies.delete(policy.policy_arn)
-      end
BREAKS HERE
-# Copyright:: Copyright (c) 2014-2018 Chef Software Inc.
-      allow(::Dir).to receive(:exists?).and_call_original
BREAKS HERE
-version          '15.0.0'
-depends 'openstack-common', '>= 15.0.0'
-depends 'openstack-identity', '>= 15.0.0'
-depends 'openstack-image', '>= 15.0.0'
BREAKS HERE
-attribute :statistic, equal_to: [ 'SampleCount', 'Average', 'Sum', 'Minimum', 'Maximum' ]
-attribute :period , kind_of: Integer
-attribute :unit  , kind_of: String
-attribute :evaluation_periods , kind_of: Integer
-attribute :threshold  , kind_of: [Float, Integer]
-attribute :comparison_operator , equal_to: [ 'GreaterThanOrEqualToThreshold', 'GreaterThanThreshold', 'LessThanThreshold', 'LessThanOrEqualToThreshold' ]
-attribute :aws_role_session_name, kind_of: String
BREAKS HERE
-default["openstack"]["block-storage"]["rabbit_server_chef_role"] = node["openstack"]["mq"]["server_role"]
-default["openstack"]["block-storage"]["rabbit"]["username"] = node["openstack"]["mq"]["user"]
-default["openstack"]["block-storage"]["rabbit"]["vhost"] = node["openstack"]["mq"]["vhost"]
-default["openstack"]["block-storage"]["rabbit"]["port"] = node["openstack"]["mq"]["port"]
-default["openstack"]["block-storage"]["rabbit"]["host"] = node["openstack"]["mq"]["host"]
BREAKS HERE
-['quantum', 'neutron'].include?(node['openstack']['compute']['network']['service_type']) || return
-
-identity_admin_endpoint = admin_endpoint 'identity-admin'
-admin_api_endpoint = admin_endpoint 'network-api'
-public_api_endpoint = public_endpoint 'network-api'
-internal_api_endpoint = internal_endpoint 'network-api'
-service_tenant_name = node['openstack']['network']['service_tenant_name']
-service_user = node['openstack']['network']['service_user']
BREAKS HERE
-
-
-      # ## Base
-      #
-      # Base class for `chef generate` subcommands. Contains basic behaviors
-      # for setting up the generator context, detecting git, and launching a
-      # chef converge.
-      #
-      # The behavior of the generators is largely delegated to a chef cookbook.
-      # The default implementation is the `code_generator` cookbook in
-      # chef-dk/skeletons/code_generator.
-      class Base < Command::Base
-
-        attr_reader :params
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def initialize(params)
-          super()
-          @params = params
-        end
-
-        # An instance of ChefRunner. Calling ChefRunner#converge will trigger
-        # convergence and generate the desired code.
-        def chef_runner
-          @chef_runner ||= ChefRunner.new(generator_cookbook_path, ["code_generator::#{recipe}"])
-        end
-
-        # Path to the directory where the code_generator cookbook is located.
-        # For now, this is hard coded to the 'skeletons' directory in this
-        # repo.
-        def generator_cookbook_path
-          config[:generator_cookbook]
-        end
-
-        # Sets git related generator_context values.
-        def setup_context
-          Generator.context.have_git = have_git?
-          Generator.context.skip_git_init = false
-        end
-
-        # Delegates to `Generator.context`, the singleton instance of
-        # Generator::Context
-        def generator_context
-          Generator.context
-        end
-
-        # Checks the `PATH` for the presence of a `git` (or `git.exe`, on
-        # windows) executable.
-        def have_git?
-          path = ENV["PATH"] || ""
-          paths = path.split(File::PATH_SEPARATOR)
-          paths.any? {|bin_path| File.exist?(File.join(bin_path, "git#{RbConfig::CONFIG['EXEEXT']}"))}
-        end
-
-      end
-
-      # ## App
-      # chef generate app path/to/basename --generator-cookbook=path/to/generator
-      #
-      # Generates a full "application" directory structure.
-      class App < Base
-
-        banner "Usage: chef generate app NAME [options]"
-
-        attr_reader :errors
-        attr_reader :app_name_or_path
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def initialize(params)
-          @params_valid = true
-          @app_name = nil
-          super
-        end
-
-        def run
-          read_and_validate_params
-          if params_valid?
-            setup_context
-            chef_runner.converge
-          else
-            msg(banner)
-            1
-          end
-        end
-
-        def setup_context
-          super
-          generator_context.app_root = app_root
-          generator_context.app_name = app_name
-          generator_context.cookbook_root ||= cookbook_root
-          generator_context.cookbook_name ||= cookbook_name
-        end
-
-        def recipe
-          "app"
-        end
-
-        def app_name
-          File.basename(app_full_path)
-        end
-
-        def app_root
-          File.dirname(app_full_path)
-        end
-
-        def cookbook_root
-          File.join(app_full_path, 'cookbooks')
-        end
-
-        def cookbook_name
-          app_name
-        end
-
-        def app_full_path
-          File.expand_path(app_name_or_path, Dir.pwd)
-        end
-
-        def read_and_validate_params
-          arguments = parse_options(params)
-          @app_name_or_path = arguments[0]
-          @params_valid = false unless @app_name_or_path
-        end
-
-        def params_valid?
-          @params_valid
-        end
-
-      end
-
-      # ## CookbookFile
-      # chef generate cookbook path/to/basename --generator-cookbook=path/to/generator
-      #
-      # Generates a basic cookbook directory structure. Most file types are
-      # omitted, the user is expected to add additional files as needed using
-      # the relevant generators.
-      class Cookbook < Base
-
-        banner "Usage: chef generate cookbook NAME [options]"
-
-        attr_reader :errors
-
-        attr_reader :cookbook_name_or_path
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def initialize(params)
-          @params_valid = true
-          @cookbook_name = nil
-          super
-        end
-
-        def run
-          read_and_validate_params
-          if params_valid?
-            setup_context
-            chef_runner.converge
-          else
-            msg(banner)
-            1
-          end
-        end
-
-        def setup_context
-          super
-          generator_context.skip_git_init = cookbook_path_in_git_repo?
-          generator_context.cookbook_root = cookbook_root
-          generator_context.cookbook_name = cookbook_name
-        end
-
-        def recipe
-          "cookbook"
-        end
-
-        def cookbook_name
-          File.basename(cookbook_full_path)
-        end
-
-        def cookbook_root
-          File.dirname(cookbook_full_path)
-        end
-
-        def cookbook_full_path
-          File.expand_path(cookbook_name_or_path, Dir.pwd)
-        end
-
-        def read_and_validate_params
-          arguments = parse_options(params)
-          @cookbook_name_or_path = arguments[0]
-          @params_valid = false unless @cookbook_name_or_path
-        end
-
-        def params_valid?
-          @params_valid
-        end
-
-        def cookbook_path_in_git_repo?
-          Pathname.new(cookbook_full_path).ascend do |dir|
-            return true if File.directory?(File.join(dir.to_s, ".git"))
-          end
-          false
-        end
-
-      end
-
-      # ## CookbookCodeFile
-      # A base class for generators that add individual files to existing
-      # cookbooks.
-      class CookbookCodeFile < Base
-
-        attr_reader :errors
-        attr_reader :cookbook_path
-        attr_reader :new_file_basename
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def initialize(params)
-          @params_valid = true
-          @cookbook_full_path = nil
-          @new_file_basename = nil
-          @errors = []
-          super
-        end
-
-        def run
-          read_and_validate_params
-          if params_valid?
-            setup_context
-            chef_runner.converge
-          else
-            errors.each {|error| err("Error: #{error}") }
-            parse_options
-            msg(opt_parser)
-            1
-          end
-        end
-
-        def setup_context
-          super
-          generator_context.cookbook_root = cookbook_root
-          generator_context.cookbook_name = cookbook_name
-          generator_context.new_file_basename = new_file_basename
-        end
-
-        def cookbook_root
-          File.dirname(cookbook_path)
-        end
-
-        def cookbook_name
-          File.basename(cookbook_path)
-        end
-
-        def read_and_validate_params
-          arguments = parse_options(params)
-          case arguments.size
-          when 1
-            @new_file_basename = arguments[0]
-            @cookbook_path = Dir.pwd
-            validate_cookbook_path
-          when 2
-            @cookbook_path = arguments[0]
-            @new_file_basename = arguments[1]
-          else
-            @params_valid = false
-          end
-        end
-
-        def validate_cookbook_path
-          unless File.directory?(File.join(cookbook_path, "recipes"))
-            @errors << "Directory #{cookbook_path} is not a cookbook"
-            @params_valid = false
-          end
-        end
-
-        def params_valid?
-          @params_valid
-        end
-      end
-
-      # chef generate recipe [path/to/cookbook/root] name
-      class Recipe < CookbookCodeFile
-
-        banner "Usage: chef generate recipe [path/to/cookbook] NAME [options]"
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def recipe
-          'recipe'
-        end
-
-      end
-
-      # chef generate attribute [path/to/cookbook_root] NAME
-      class Attribute < CookbookCodeFile
-
-        banner "Usage: chef generate attribute [path/to/cookbook] NAME [options]"
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def recipe
-          'attribute'
-        end
-
-      end
-
-      # chef generate lwrp [path/to/cookbook_root] NAME
-      class LWRP < CookbookCodeFile
-
-        banner "Usage: chef generate lwrp [path/to/cookbook] NAME [options]"
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def recipe
-          'lwrp'
-        end
-
-      end
-
-      # chef generate template [path/to/cookbook_root] name --source=source_file
-      class Template < CookbookCodeFile
-
-        option :source,
-          :short => "-s SOURCE_FILE",
-          :long  => "--source SOURCE_FILE",
-          :description => "Copy content from SOURCE_FILE"
-
-        banner "Usage: chef generate template [path/to/cookbook] NAME [options]"
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def recipe
-          'template'
-        end
-
-        def setup_context
-          super
-          generator_context.content_source = config[:source]
-        end
-
-      end
-
-      # chef generate file [path/to/cookbook_root] name --source=source_file
-      class CookbookFile < CookbookCodeFile
-        option :source,
-          :short => "-s SOURCE_FILE",
-          :long  => "--source SOURCE_FILE",
-          :description => "Copy content from SOURCE_FILE"
-
-        banner "Usage: chef generate file [path/to/cookbook] NAME [options]"
-
-        options.merge!(SharedGeneratorOptions.options)
-
-        def recipe
-          'cookbook_file'
-        end
-
-        def setup_context
-          super
-          generator_context.content_source = config[:source]
-        end
-      end
-
-
-
BREAKS HERE
-                image_name=$(basename #{node["glance"]["image"][img]} .tar.gz)
-                #{glance_cmd} image-list | grep ${image_name} && exit 0
-          #{glance_cmd} image-list |grep "#{img.to_s}-image" && exit 0
-      not_if "#{glance_cmd} image-list --name #{img}-image"
BREAKS HERE
-  if node['kernel']['machine'] == 'i686'
-    default['nrpe']['ssl_lib_dir']     = '/usr/lib/i386-linux-gnu'
-  else
-    default['nrpe']['ssl_lib_dir']     = '/usr/lib/x86_64-linux-gnu'
-  end
-  if node['nrpe']['install_method'] == 'package'
-    default['nrpe']['service_name']    = 'nagios-nrpe-server'
-  else
-    default['nrpe']['service_name']    = 'nrpe'
-  end
BREAKS HERE
-  owner 'opscenter-agent'
-  group 'opscenter-agent'
BREAKS HERE
-    gem 'win32-certstore', '>= 0.1.7'
-    Chef::Log.debug('Did not find win32-certstore gem installed. Installing now')
BREAKS HERE
-node.override['stackstorm']['roles'] = %w(contoller worker client)
BREAKS HERE
-    Chef::EncryptedDataBagItem.load('ceph', 'radowgw', secret)['secret']
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.56.0/}) }
BREAKS HERE
-    :ec2_access_key => node["credentials"]["ec2"]["admin"]["access"],
-    :ec2_secret_key => node["credentials"]["ec2"]["admin"]["secret"]
BREAKS HERE
-        Berkshelf.log.level = ::Logger::DEBUG
-      upload_options             = options.except(:no_freeze, :berksfile).symbolize_keys
BREAKS HERE
-    def crypto_aem_libs
-      ::Dir[::File.join(crypto_aem_dir, '*')]
-    end
-
-    def crypto_log_libs
-      ::Dir[::File.join(crypto_log_dir, '*')]
-    end
-
-    # * all AEM libs
-    # * all log libs
-      (['.'] | [crypto_tmp_dir] | crypto_aem_libs | crypto_log_libs).join(':')
-    # |   |-- master
-      aem_libs = crypto_aem_libs
-      log_libs = %w(
-        /org/slf4j/slf4j-api/1.7.12/slf4j-api-1.7.12.jar
-        /org/slf4j/slf4j-simple/1.7.12/slf4j-simple-1.7.12.jar
-      )
-      log_libs.each do |l|
-        url = server_url + l
-      cmd.error!
-      Chef::Log.debug("Decryption command: #{cmd_str}")
-      Chef::Log.debug("Decrypted value: #{cmd.stdout}")
BREAKS HERE
-require 'chef/rest/rest_request'
BREAKS HERE
-    only_if { ::File.exist?("/etc/sv/chef-push-jobs-client/run") }
-    only_if { ::File.exist?("/etc/sv/chef-push-jobs-client/run") }
-
BREAKS HERE
-            command "aptitude update -y"
-            command "aptitude full-upgrade -y"
BREAKS HERE
-      runner.node.set['push_jobs']['package_url'] = 'http://foo.bar.com/opscode-push-jobs-client_x86_64.msi?key=value'
BREAKS HERE
-
-def initialize(*args)
-  super
-  @action = :add
-end
BREAKS HERE
-              name: nil,
BREAKS HERE
-version          '16.0.0'
-depends 'openstack-common', '>= 16.0.0'
-depends 'openstack-identity', '>= 16.0.0'
-depends 'openstack-image', '>= 16.0.0'
-depends 'openstack-compute', '>= 16.0.0'
-depends 'openstack-block-storage', '>= 16.0.0'
BREAKS HERE
-        " '#{@dependency.version_constraint}'."
BREAKS HERE
-
-openstack_user service_user do
-  domain_name service_domain_name
-  role_name service_role
-  connection_params connection_params
-  action :grant_domain
-end
BREAKS HERE
-  source node['kibana']['version'] == 4 ? 'nginx4.conf.erb' : 'nginx.conf.erb'
BREAKS HERE
-            service_name: 'push-jobs-client' },
-            service_name: 'push-jobs-client' },
BREAKS HERE
-default[:drbd][:remote_host] = nil
-default[:drbd][:disk] = nil
-default[:drbd][:mount] = nil
-default[:drbd][:fs_type] = "ext3"
-default[:drbd][:dev] = "/dev/drbd0"
-default[:drbd][:master] = false
-default[:drbd][:port] = 7789
-default[:drbd][:configured] = false
BREAKS HERE
-prometheus_job "prometheus" do
-  scrape_interval   "15s"
-  target        :template => node['prometheus']['flags']['config.file']
-  transform     { |jobs| jobs.sort_by { |j| j.name } }
-  notifies      :restart, "service[prometheus]"
-
-
BREAKS HERE
-  package_file_name = "haproxy_1.5-dev22_amd64.deb"
BREAKS HERE
-# Only if the vpnaas is enabled, migrate the database.
-bash 'migrate vpnaas database' do
-  only_if { node['openstack']['network_vpnaas']['enabled'] }
-  timeout timeout
-  migrate_command = "neutron-db-manage --subproject neutron-vpnaas --config-file /etc/neutron/neutron.conf --config-file #{plugin_config_file}"
-  code <<-EOF
-#{migrate_command} upgrade head
-EOF
-end
-
BREAKS HERE
-  action [:enable, :start]
BREAKS HERE
-  context 'in Ubuntu' do
-  end # context in Ubuntu
-  context 'in CentOS' do
-  end # context in CentOS
-  context 'in Arch' do
-    before { node.automatic['platform'] = 'arch' }
-  end # context in Arch
BREAKS HERE
-  it 'allows you to customize things' do
-    opts = {
-      host: 'narf.example.com',
-      port: 6060,
-      protocol: 'https'
-    }
-    expect(Universe.protocol_host_port(opts)).to eql('https://narf.example.com:6060')
-    expect(Universe.download_url(cookbook, version, 'https://narf.example.com:6060')).to eql('https://narf.example.com:6060/api/v1/cookbooks/redis/versions/1.3.1/download')
BREAKS HERE
-  def node()
-  def run_status_human_readable()
BREAKS HERE
-    notifies :restart, resources(:service => "tomcat6")
-    notifies :restart, resources(:service => "tomcat6")
-  notifies :restart, resources(:service => "tomcat6")
BREAKS HERE
-		command "set path #{node['perl']['install_dir']}bin;%path%"
BREAKS HERE
-  default[:bamboo][:database][:port]              = 3306
-  default[:bamboo][:database][:root_user_name]    = 'root'
-  default[:bamboo][:database][:port]              = 5432
-  default[:bamboo][:database][:root_user_name]    = 'postgres'
-  default[:bamboo][:database_type]                = 'PostgreSQL'
BREAKS HERE
-include_recipe "redis::server"
-
BREAKS HERE
-  class BaseResource < ChefCompat::Resource
BREAKS HERE
-include_recipe "redis::server_package"
BREAKS HERE
-  provider Chef::Provider::Service::Upstart if (platform?('amazon') || platform_family?('rhel')) && node['platform_version'].to_i == 6
BREAKS HERE
-default['openstack']['identity']['signing']['key_size'] = '1024'
BREAKS HERE
-      # will always be included in the filtered results even if the dependencie's name is not
BREAKS HERE
-require 'json'
-name = 'Dynatrace WebServer Agent package uninstall'
-
-if platform_family?('debian', 'fedora', 'rhel')
-  installer_prefix_dir = node['dynatrace']['wsagent_package']['linux']['installer']['prefix_dir']
-  installer_cache_dir = "#{Chef::Config['file_cache_path']}/dynatrace"
-
-  service = 'dynaTraceWebServerAgent'
-elsif platform_family?('windows')
-service name.to_s do
-  service_name service
-  supports     :status => true
-  action [:stop, :disable]
-end
-
-directory 'Delete the installer cache directory' do
-  path   installer_cache_dir
-  recursive true
-  action :delete
-end
-# NOTE: this may also delete files from other packages!
-link2del = installer_prefix_dir + '/dynatrace'
-dynatrace_delete_directory_by_link link2del.to_s do
-  link2delete link2del
BREAKS HERE
-          expect(collaborators_users).to include(jimmy, sally)
BREAKS HERE
-        if deploy_dir
-          solo_node.set['deploy']['a1']['global']['deploy_dir'] = deploy_dir
-        end
BREAKS HERE
-
-  # apt-1.8.0 has a bug that makes the new apt-repo not available right away
-  # running apt-get update clears the issue
-  log "Running apt-get update to work around COOK-2171" do
-    notifies :run, "execute[apt-get update]", :immediately
-    not_if "apt-cache search datadog-agent | grep datadog-agent"
-  end
BREAKS HERE
-  protocol: 'tcp',
BREAKS HERE
-          lockfile.dependencies.each { |dependency| cookbook_versions[dependency.name] = dependency.locked_version }
BREAKS HERE
-        install_from_lockfile
-      else
-        install_from_universe
-      end
-          source   = berksfile.source_for(name, version)
-      # @return [Array<CachedCookbook>]
-      #   the list of installed cookbooks
-      # @return [Array<CachedCookbook>]
-      #   the list of installed cookbooks
BREAKS HERE
-  action_stop
-  action_start
BREAKS HERE
-when 'rhel'
BREAKS HERE
-
-dynatrace_file_replace_line "Patch the Apache HTTPD's init script so that it is started after the #{name}" do
-  path    apache_init_script_path
-  regex   /^(# Required-Start:)(.*?)( dynaTraceWebServeragent)?$/
-  replace "\\1\\2 dynaTraceWebServeragent"
-  only_if { apache_do_patch_init_script }
-end
-
-dynatrace_file_replace_line "Patch the Apache HTTPD's init script so that it is stopped before the #{name}" do
-  path    apache_init_script_path
-  regex   /^(# Required-Stop:)(.*?)( dynaTraceWebServeragent)?$/
-  replace "\\1\\2 dynaTraceWebServeragent"
-  only_if { apache_do_patch_init_script }
-end
BREAKS HERE
-  "f-" + args.join('.')
-  args.join('.')
-  "s-" + args.join('.')
-  args.join('.')
BREAKS HERE
-# Copyright 2015, Dynatrace
-name = 'Dynatrace Server update'
-
-#https://downloads.dynatracesaas.com/updates/dynaTrace-6.3.4.1034.zip
-
-if platform_family?('debian', 'fedora', 'rhel')
-  # update file name in the user home directory.
-  update_file = node['dynatrace']['server']['linux']['update']['update_file']
-  
-  # A REST URL to update Dynatrace server
-  rest_update_url = node['dynatrace']['server']['linux']['update']['rest_update_url']
-    
-  user = node['dynatrace']['server']['linux']['update']['user']
-  passwd = node['dynatrace']['server']['linux']['update']['passwd']
-
-  service      = 'dynaTraceServer'
-else
-  # Unsupported
-end
-
-fileExists = update_file
-if File.exist?(update_file)
-  # Dynatrace Server is already installed
-  puts 'Dynatrace update file: ' + fileExists + ' exists. Update will be performed.'
-  cmd2exec = "curl --insecure --header 'Content-Type:multipart/form-data' -F file='@#{update_file}' -u #{user}:#{passwd} -v '#{rest_update_url}'"
-   
-#  result = %x[ #{cmd2exec} ]     - no return information in result ...
-  
-  execute "Update Dynatrace server using #{update_file} file." do
-    command cmd2exec
-    
-else
-  puts 'ERROR: Dynatrace update file: ' + fileExists + ' do not exists. Update will not be performed.'
-service "#{name}" do
-  service_name service
-  supports     :status => true
-  action       [:stop]
-service "#{name}" do
-  service_name service
-  supports     :status => true
-  action       [:start, :enable]
BREAKS HERE
-        Minimart::Mirror::InventoryConfiguration.new('spec/fixtures/bad_metadata_cookbook.yml')
-        allow_any_instance_of(Minimart::Download::GitRepository).to receive(:fetch).and_yield 'spec/fixtures/bad_metadata_cookbook'
BREAKS HERE
-node.set['mongodb3']['package']['version'] = nil
-node.set['mongodb3']['package']['repo']['url'] = nil
-node.set['mongodb3']['package']['repo']['apt']['name'] = nil  # eg. 3.0, 3.2
-node.set['mongodb3']['package']['repo']['apt']['keyserver'] = nil # eg. hkp://keyserver.ubuntu.com:80
-node.set['mongodb3']['package']['repo']['apt']['key'] = nil # eg. 3.2 : 'EA312927', 3.0 : '7F0CEB10'
-node.set['mongodb3']['package']['repo']['apt']['components'] = nil # eg. ['multiverse']
BREAKS HERE
-        # rubocop: disable MethodLength
-        # rubocop: disable AbcSize
-        # rubocop: enable AbcSize
-        # rubocop: enable MethodLength
-        # rubocop: disable MethodLength
-        # rubocop: disable AbcSize
-        # rubocop: enable MethodLength
-        # rubocop: enable AbcSize
-        # rubocop: disable MethodLength
-        # rubocop: disable AbcSize
-        # rubocop: enable AbcSize
-        # rubocop: enable MethodLength
BREAKS HERE
-tilecache_tokens = data_bag_item("tilecache", "tokens")
-  variables :tokens => tilecache_tokens
BREAKS HERE
-property :base_directory, String, default: '/etc'
-  template "#{new_resource.base_directory}/netdata" \
BREAKS HERE
-    notifies :run, "execute[#{rails_directory}]"
-    notifies :run, "execute[#{rails_directory}]"
-    notifies :run, "execute[#{rails_directory}]"
-    notifies :run, "execute[#{rails_directory}]"
-    notifies :run, "execute[#{rails_directory}]"
-  execute rails_directory do
-    action :nothing
-    command "passenger-config restart-app --ignore-app-not-running --ignore-passenger-not-running #{rails_directory}"
-    user "root"
-    group "root"
-    only_if { ::File.exist?("/usr/bin/passenger-config") }
-  end
-  execute rails_directory do
-    action :run
-    command "passenger-config restart-app --ignore-app-not-running --ignore-passenger-not-running #{rails_directory}"
-    user "root"
-    group "root"
BREAKS HERE
-  if FB::Version.new(node['platform_version']) > FB::Version.new('8')
BREAKS HERE
-    attr_accessor :ui
-    # @return [Logger]
-    def log
-      Celluloid.logger
-    end
-
BREAKS HERE
-  not_if "test `#{node[:nodejs][:dir]}/bin/node` == 'v#{node[:nodejs][:version]}'"
BREAKS HERE
-cookbook_file "#{ENV['ProgramW6432']}/conemu/conemu.xml" do
-  source 'conemu.xml'
-end
-
BREAKS HERE
-attribute :path, :kind_of => String, :name_attribute => true
BREAKS HERE
-    not_if { ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{new_resource.name}") }
-    only_if { ::File.symlink?("#{node['openresty']['dir']}/sites-enabled/#{new_resource.name}") }
BREAKS HERE
-  its('stdout') { should match(%r{^hab 0.74.0/}) }
BREAKS HERE
-      File.unlink("#{@log_file}")
BREAKS HERE
-default.graylog2[:server][:version] = '0.20.6-3'
-default.graylog2[:web][:version]    = '0.20.6-3'
-default.graylog2[:radio][:version]  = '0.20.6-3'
BREAKS HERE
-if system('where WebpiCmd.exe 2>&1 > NUL')
BREAKS HERE
-  comp.stdout.downcase.include?(new_resource.downcase.name) or comp.stdout.downcase.include?(new_resource.downcase.name.upcase)
BREAKS HERE
-    #include AwsCookbook::Ec2
-
BREAKS HERE
-  scm = Drivers::Scm::Factory.build(self, application)
-  fire_hook(:shutdown, items: databases + [scm, framework, appserver, worker, webserver])
BREAKS HERE
-module ChefServerIngredient
-Chef::Recipe.send(:include, ChefServerIngredient::Helpers)
-Chef::Resource.send(:include, ChefServerIngredient::Helpers)
-Chef::Provider.send(:include, ChefServerIngredient::Helpers)
BREAKS HERE
-	action :nothing
-	action :nothing
BREAKS HERE
-include_recipe "nrpe::_#{node['nrpe']['install_method']}"
BREAKS HERE
-# Copyright:: Copyright (c) 2014 Chef Software Inc.
BREAKS HERE
-              source = cert_source.gsub('-', '_')
-              unless Cert::SOURCES.include?(source)
-                fail "Cannot read SSL cert, unknown source: #{cert_source}"
-              end
-            end # @default_cert_content ||=
-          end # lazy
BREAKS HERE
-        blkid.exitstatus.zero? && blkid.stdout.strip == fs_type.strip
BREAKS HERE
-directory "#{basedir}" do
-
BREAKS HERE
-          if ::ROLLOUT.active?(:fieri) && ENV['FIERI_URL'].present?
BREAKS HERE
-        contents.delete_if{ |line| line =~ /cookbook '(#{sources.map(&:name).join('|')})'/ }
-      private
-        return definition
-      content = sources.map { |source| definition(source) }.join("\n")
-
-    private
-    def definition(source)
-      self.class.send(:definition, source)
-    end
BREAKS HERE
-      deploy[:scm] = {
-      deploy[:scm] = {
BREAKS HERE
-  log_size 100000 # smallish 10k
BREAKS HERE
-version          '0.4.0'
BREAKS HERE
-        add_source(CookbookSource.new(name, constraint: constraint))
BREAKS HERE
-source_url 'https://github.com/atomic-penguin/cookbook-nfs'
-issues_url 'https://github.com/atomic-penguin/cookbook-nfs/issues'
BREAKS HERE
-    "quantum_client_packages" => [ "python-quantumclient" ],
BREAKS HERE
-            only_if new_resource.log4j['customized']
BREAKS HERE
-# If set, Quantum API service will bind to the address on this interface,
-# otherwise it will bind to the API endpoint's host.
BREAKS HERE
-        if (tries -= 1).zero?
-          raise Docker::Error::AuthenticationError, "#{username} failed to authenticate with #{serveraddress}"
-        else
-          retry
-        end
BREAKS HERE
-default['openresty']['status']['url']           = "/nginx-status"
BREAKS HERE
-    command "start runsvdir"
-  if node[:platform_version].to_f < 8.04
BREAKS HERE
-        opts = @env.empty? ? @options : @options.merge(env_dir: ::File.join(@sv_dir, @service_name, 'env'))
-          arg,
-          default: opts
BREAKS HERE
-      Chef::Log.debug("Package list response code: #{reps.code}")
-      Chef::Log.debug("Package list response body: #{reps.body}")
BREAKS HERE
